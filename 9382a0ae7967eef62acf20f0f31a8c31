{
  "url": "https://api.github.com/gists/9382a0ae7967eef62acf20f0f31a8c31",
  "forks_url": "https://api.github.com/gists/9382a0ae7967eef62acf20f0f31a8c31/forks",
  "commits_url": "https://api.github.com/gists/9382a0ae7967eef62acf20f0f31a8c31/commits",
  "id": "9382a0ae7967eef62acf20f0f31a8c31",
  "node_id": "G_kwDOBcuSaNoAIDkzODJhMGFlNzk2N2VlZjYyYWNmMjBmMGYzMWE4YzMx",
  "git_pull_url": "https://gist.github.com/9382a0ae7967eef62acf20f0f31a8c31.git",
  "git_push_url": "https://gist.github.com/9382a0ae7967eef62acf20f0f31a8c31.git",
  "html_url": "https://gist.github.com/9382a0ae7967eef62acf20f0f31a8c31",
  "files": {
    "code.js": {
      "filename": "code.js",
      "type": "application/javascript",
      "language": "JavaScript",
      "raw_url": "https://gist.githubusercontent.com/jade-addin/9382a0ae7967eef62acf20f0f31a8c31/raw/b823c03a1e4ac1797036002b675620a704e74fc8/code.js",
      "size": 24973,
      "truncated": false,
      "content": "//logistic regression in excel using javascript\n\nlet predictor_names\nlet select_values\nconst form_data={}// takes the place of the from where users entered data on original webpage\nlet model_results={}\nasync function auto_exec(){\n  // set the tool css\n  Jade.set_css(gist_files('style.css'),\"naive-bayes\")\n  // place the tool html \n  tag(\"tools-body\").innerHTML=gist_files('logistic-regression.html')\n  \n  // fill in values from last tool use\n  const tool_data = await jade.read_object_from_workbook(window.active_tool)\n  if(tool_data.outcome_values){\n    select_values = tool_data.outcome_values\n  }\n\n //console.log(\"select_values\",select_values)\n\n  for(const[key,value] of Object.entries(tool_data)){\n    if(tag(key)){\n      tag(key).value=value\n    }\n  }\n\n  // read the last run if there is one\n  model_results = await jade.read_object_from_workbook(window.active_tool+\"_model_result\")\n //console.log(\"model_results\",model_results)\n\n\n}\n\n\n\n\n\n\nfunction save_inputs(){\n  const values_to_save=get_form_values([\"training-percent\",\"datasheet\",\"predictors\",\"outcome\",\"predictionsheet\",\"predictionrange\"])\n  jade.save_object_to_workbook(\n    values_to_save     \n    , window.active_tool)\n\n}\n\nfunction get_form_values(tag_names){\n  const obj={}\n  for(const tag_name of tag_names){\n    obj[tag_name]=tag(tag_name).value\n  }\n  return obj\n}\n\n\nfunction configure_example(){\n\n  Excel.run(async function(excel){\n    const sheetname=\"Example Data\"\n    let sheet = excel.workbook.worksheets.getItemOrNullObject(sheetname); \n    await excel.sync()\n    if (sheet.isNullObject) {\n      // sheet does not yet exist, create it\n      sheet=excel.workbook.worksheets.add(sheetname)\n    }else{\n      sheet.getUsedRange().delete()\n    }\n    sheet.activate()\n    await jade_modules.jet_engine.stream_to_range(\"https://jade-addin.github.io/data/donation.data\",sheet)\n    await jade_modules.jet_engine.stream_to_range(\"https://jade-addin.github.io/data/donation-prediction.data\",sheet,0,5)\n    \n\n    //sheet.getRange(\"A1:D41\").values = jade_modules.jet_engine.table_stream_to_excel_array(\"1\u001F1\u001F1\u001F1\u001EDonate\u001FMember\u001FIncome\u001FAge\u001E0\u001F3\u001F83.4\u001F53\u001E0\u001F1\u001F84.3\u001F53\u001E0\u001F1\u001F87.2\u001F50\u001E0\u001F1\u001F86.6\u001F52\u001E0\u001F1\u001F92\u001F45\u001E0\u001F1\u001F90.4\u001F50\u001E1\u001F1\u001F138.3\u001F51\u001E1\u001F2\u001F140.8\u001F46\u001E0\u001F1\u001F90.5\u001F54\u001E0\u001F2\u001F66.6\u001F55\u001E0\u001F1\u001F91.2\u001F55\u001E0\u001F1\u001F95.7\u001F58\u001E1\u001F2\u001F76.3\u001F52\u001E0\u001F1\u001F103.2\u001F57\u001E1\u001F1\u001F102.6\u001F58\u001E0\u001F1\u001F104\u001F56\u001E0\u001F2\u001F91.3\u001F47\u001E0\u001F2\u001F84.5\u001F57\u001E0\u001F1\u001F111.5\u001F56\u001E0\u001F1\u001F110.7\u001F59\u001E1\u001F2\u001F89.7\u001F60\u001E0\u001F2\u001F97.5\u001F54\u001E0\u001F2\u001F98.2\u001F56\u001E1\u001F1\u001F124.5\u001F54\u001E1\u001F2\u001F99.5\u001F58\u001E1\u001F1\u001F122.2\u001F62\u001E1\u001F2\u001F106.2\u001F50\u001E1\u001F2\u001F110.6\u001F57\u001E0\u001F2\u001F109.8\u001F59\u001E1\u001F2\u001F113.9\u001F54\u001E1\u001F2\u001F113.3\u001F61\u001E1\u001F2\u001F124.5\u001F56\u001E0\u001F1\u001F133.8\u001F49\u001E1\u001F2\u001F142.4\u001F44\u001E0\u001F1\u001F89.4\u001F52\u001E0\u001F1\u001F87.3\u001F58\u001E0\u001F1\u001F84.6\u001F48\u001E1\u001F2\u001F124.9\u001F58\u001E0\u001F1\u001F84.4\u001F47\u001E1\u001F2\u001F119.4\u001F50\").values\n    //sheet.getRange(\"F1:H5\").values = jade_modules.jet_engine.table_stream_to_excel_array(\"1\u001F1\u001F1\u001EMember\u001FIncome\u001FAge\u001E3\u001F83.4\u001F56\u001E1\u001F140.3\u001F42\u001E1\u001F122.2\u001F42\u001E1\u001F106.6\u001F25\").values\n    await excel.sync()\n    tag(\"datasheet\").value=\"Example Data\"\n    tag(\"outcome\").value=\"A1:A41\"\n    tag(\"predictors\").value=\"B1:D41\"\n    tag(\"predictionsheet\").value=\"Example Data\"\n    tag(\"predictionrange\").value=\"F1:H5\"\n\n  })\n}\n\n\nasync function get_address(tag_name){\n  tag(tag_name).value=await jade_modules.jet_engine.selected_range_address()\n}\n\n\n// must be called from insde an excel block\nfunction format_table(sheet, start_row,start_column,rows,columns,row_headers=0, column_headers=1){\n  if(column_headers){\n    const col_head_range = sheet.getRangeByIndexes(start_row-1,start_column-1,column_headers,columns)\n    jade_modules.jet_engine.range_format(sheet, col_head_range, \"format/fill/color\",  \"Maroon\")\n    jade_modules.jet_engine.range_format(sheet, col_head_range, \"format/font/color\",  \"White\")\n    jade_modules.jet_engine.range_format(sheet, col_head_range, \"format/font/bold\",  true)\n        \n  }\n  if(row_headers){\n    const row_head_range = sheet.getRangeByIndexes(start_row-1+column_headers,start_column-1,rows-column_headers,row_headers)\n    jade_modules.jet_engine.range_format(sheet, row_head_range, \"format/fill/color\",  \"LightGray\")\n  }\n  const table_range = sheet.getRangeByIndexes(start_row-1,start_column-1,rows,columns)\n  jade_modules.jet_engine.border_around(sheet, table_range,\"Medium\",\"Continuous\",\"Black\")\n  \n}\n\nasync function run_model(){\n  // save the defaults for the tool\n  \n  if(!isNaN(tag(\"training-percent\")) || parseFloat(tag(\"training-percent\"))<1 || parseFloat(tag(\"training-percent\"))>100){\n    alert(\"Training Percent must be a number between 1 and 100.\",\"Model Problem\")  \n    return\n  }\n  \n  save_inputs()\n\n  Excel.run(async function(excel){\n   //console.log('tag(\"outcome\")',tag(\"outcome\").value)\n    const sheet = excel.workbook.worksheets.getItem(tag(\"datasheet\").value)\n    const outcome = sheet.getRange(tag(\"outcome\").value)\n    const predictors = sheet.getRange(tag(\"predictors\").value)\n    let sheetname=\"Logistic Regression Results\"\n    predictors.load(\"values\")\n    outcome.load(\"values\")\n    \n    predictor_names=predictors.getRow(0)\n    predictor_names.load(\"values\")\n    let out_sheet = excel.workbook.worksheets.getItemOrNullObject(sheetname); \n\n    await excel.sync()\n    \n    if(predictors.values.length !== outcome.values.length){\n      alert(\"You must have the same number of rows for your predictors as you do for your outcomes.\",\"Problem\")\n      return\n    }\n    if(outcome.values[0].length !== 1){\n      alert(\"Your outcome must be a single column.\",\"Problem\")\n      return\n    }\n    // check outcomes for 1 and zero only\n    for(let x=1;x<outcome.values.length;x++){\n      if(outcome.values[x][0]!==1 && outcome.values[x][0]!==0){\n        alert(\"All all values in the outcome must be 1 or 0.  This analysis stopped when encountering \" + outcome.values[x][0] + \".\", \"Problem\")\n        return  \n      }\n    }\n\n    // figure out which predictors are to be used in the model\n    const predictors_in_model=[]\n    if(!tag(\"predictor-names\").innerHTML){\n      const html=['Include the following:<div id=\"predictors-in-use\" style=\"padding-left:1rem\">']\n\n      for(let x=0;x<predictor_names.values[0].length;x++){\n        const pred = predictor_names.values[0][x]\n        html.push(`<input type=\"checkbox\" checked value=\"${x}\"> ${pred}<br>`)\n        predictors_in_model.push(x)\n      }\n      html.push(\"</div>\")\n      tag(\"predictor-names\").innerHTML=html.join(\"\")\n    }else{\n      for(const elem of tag(\"predictors-in-use\").children){\n        if(elem.tagName===\"INPUT\" && elem.checked){\n          predictors_in_model.push(parseInt(elem.value))\n        }\n      }\n    }  \n\n   //console.log(\"predictors_in_model\",predictors_in_model)\n    form_data.predictors=predictors_in_model\n\n    // build data for analysis\n    const data_for_training=[]\n    const data_for_testing=[]\n    const training_percent = parseFloat(tag(\"training-percent\").value)\n    \n    for(let x=1;x<predictors.values.length;x++){\n      const row_data=[]\n      for(let p=0;p<predictors_in_model.length;p++){\n        row_data.push(predictors.values[x][predictors_in_model[p]])\n      }\n      row_data.push([outcome.values[x][0]])\n\n        data_for_training.push(row_data.join(\",\"))\n    }\n\n    // now move the appropriate number of entries to the testing array\n\n   //console.log(\"training_percent\",training_percent)\n   //console.log(\"data_for_training.length\",data_for_training.length)\n    let test_length=data_for_training.length - Math.round(data_for_training.length * (training_percent/100))\n    if(training_percent<100 && test_length===0){\n      test_length=1\n    }\n\n   //console.log(\"test_length\",test_length)\n\n    for(let x=0;x<test_length;x++){\n      const index = Math.floor(Math.round(Math.random()*data_for_training.length))-1\n      let entry = data_for_training.splice(index,1)\n     //console.log(\"index\",index,\"entry\",entry)\n      data_for_testing.push(entry[0])\n    }\n\n\n    // if(training_percent < 100 && data_for_testing.length ===0){\n    //   //we need at least one record to test\n    //   data_for_testing.push(data_for_training.pop())\n    // }\n    \n   //console.log('data_for_training',data_for_training)\n   //console.log('data_for_testing',data_for_testing)\n\n    form_data[\"data\"]=data_for_training.join(\"\\n\")\n    form_data[\"cPts\"]=data_for_training.length-1\n    form_data[\"cVar\"]=predictors_in_model.length\n    \n\n\n    iterate(tag('form'))\n\n   //console.log(form_data.output)\n   //console.log(model_results)\n    const confusion_array=[[0,0],[0,0]]\n    if(data_for_testing.length > 0){\n      // some of the data is for testing the model, so run the test\n      for(let z=0;z<data_for_testing.length;z++){\n        const test_row = data_for_testing[z].split(\",\")\n        let the_sum=model_results.intercept.coeff\n       //console.log(\"test_row\",test_row)\n       //console.log(z,\"-\",model_results.intercept.coeff)\n        for(let x=0;x<model_results.predictors.length;x++){\n         //console.log(z,x, model_results.predictors[x].coeff, parseFloat(test_row[x]))\n           \n          the_sum += model_results.predictors[x].coeff * parseFloat(test_row[x])\n        }  \n        const odds=Math.exp(the_sum)\n       //console.log(\"the_sum\",the_sum,\"odds\",odds,\"probability\",odds/(odds+1))\n        let prediction = 0\n        const actual = parseInt(test_row[test_row.length-1])\n        if((odds/(odds+1))>.5){\n         //console.log(\"predict true\")\n          prediction=1\n        }\n        confusion_array[prediction][actual]++\n      }\n      confusion_array[0].unshift(0)\n      confusion_array[1].unshift(1)\n      confusion_array.unshift([\"Actual\",0,1])\n      confusion_array.unshift([null,\"Predicted\",null])\n      confusion_array.unshift([\"Confusion Matrix\",null,null])\n     //console.log('confusion_array',confusion_array)\n    }\n\n\n\n\n    if (out_sheet.isNullObject) {\n      // sheet does not yet exist, create it\n      out_sheet=excel.workbook.worksheets.add(sheetname)\n    }else{\n      out_sheet.getRange(\"1:\"+(10+predictors_in_model.length)).insert(Excel.InsertShiftDirection.down)\n    }\n\n   //console.log(\"predictor_names\",predictor_names.values)\n \n    out_sheet.activate()\n    await excel.sync()\n\n    const model_stats=[]\n    const prediction_formula=['=R3C3']\n    model_stats.push([\"Model Statistics\",null])\n    model_stats.push([\"Y-Intercept\",1])\n    for(let x=0;x<predictors_in_model.length;x++){\n      const m = predictors_in_model[x]\n      model_stats.push([`Beta: ${predictor_names.values[0][m]}`,0])\n      prediction_formula.push(` & \"+(\" & R${4+x}C3 & \"*<<${predictor_names.values[0][m]}>>)\"`)\n    }\n\n\n    out_sheet.getRange(\"G7:H7\").merge(true)\n    out_sheet.getRange(\"B2:C2\").merge(true)\n\n    // out_sheet.getRange(\"B7:B8\").merge(true)\n    // out_sheet.getRange(\"C7:C8\").merge(true)\n    // out_sheet.getRange(\"D7:D8\").merge(true)\n    // out_sheet.getRange(\"E7:E8\").merge(true)\n    // out_sheet.getRange(\"F7:F8\").merge(true)\n\n    format_table(out_sheet,2,2,4,2,1,1)\n    format_table(out_sheet,7,2,3+predictors_in_model.length,7,1,2)\n\n\n    jade_modules.jet_engine.range_format(out_sheet, \"F9:H9\",\"format/fill/color\",  \"Gray\")\n    jade_modules.jet_engine.range_format(out_sheet, \"B9:H\"+(9+predictors_in_model.length), \"numberFormat\",  \"0.000\")\n    jade_modules.jet_engine.range_format(out_sheet, \"E9:E\"+(9+predictors_in_model.length), \"numberFormat\",  \"0.00000\")\n    jade_modules.jet_engine.range_format(out_sheet, \"C3\", \"numberFormat\",  \"0.000\")\n    jade_modules.jet_engine.range_format(out_sheet, \"C4\", \"numberFormat\",  \"0\")\n\n    jade_modules.jet_engine.range_format(out_sheet, \"C5\", \"numberFormat\",  \"0.00000\")\n\n    out_sheet.getRange(\"B2:C5\").values=[\n       [\"Overall Model Fit\",null],\n       [\"Chi Square\",model_results.fit.chi_square],\n       [\"df\",model_results.fit.df],\n       [\"p-value\",model_results.fit.p]\n     ]\n\n     let coeff=[\n      [\"Predictor\",\"Co-\",\"Standard\",null,\"Odds\",tag(\"confidence\").value + \"% Conf. Int.\",null],\n      [\"Name\",\"efficient\",\"Error\",\"p-value\",\"Ratio\",\"Low\",\"High\"],\n      [\"Intercept\",model_results.intercept.coeff,model_results.intercept.std_err,model_results.intercept.p,null,null,null]\n    ]\n    for(let x=0;x<predictors_in_model.length;x++){\n     //console.log(x,model_results.predictors[x].variable,model_results.predictors[x].odds_ratio)\n      coeff.push([model_results.predictors[x].variable,model_results.predictors[x].coeff,model_results.predictors[x].std_err,model_results.predictors[x].p,model_results.predictors[x].odds_ratio,model_results.predictors[x].conf_low,model_results.predictors[x].conf_high])\n    }\n   //console.log(\"coeff\",coeff)\n\n    out_sheet.getRangeByIndexes(6,1,3+predictors_in_model.length,7).values=coeff\n    out_sheet.getRange(\"B:H\").format.autofitColumns()\n\n\n\n    // disable odds ratio and confidence interval\n    const optional_data = out_sheet.getRangeByIndexes(6,5,3+predictors_in_model.length,3)\n    optional_data.values=null\n    optional_data.format.fill.clear()\n    jade_modules.jet_engine.border_around(sheet, optional_data,\"Medium\",\"Continuous\",\"Black\")\n    optional_data.format.borders.getItem('EdgeBottom').style = \"None\";\n    optional_data.format.borders.getItem('EdgeRight').style = \"None\";\n    optional_data.format.borders.getItem('EdgeTop').style = \"None\";\n\n    // confusion matrix\n    if(data_for_testing.length > 0){\n      out_sheet.getRange(\"B7:H7\").insert(Excel.InsertShiftDirection.down);\n      const confusion_matrix = out_sheet.getRange(\"E2:G6\")\n      confusion_matrix.values=confusion_array\n      jade_modules.jet_engine.range_format(out_sheet, \"E4:G6\", \"numberFormat\",  \"0\")\n      format_table(out_sheet,2,5,5,3,1,1)\n      out_sheet.getRange(\"E2:G2\").merge(true)\n      out_sheet.getRange(\"F3:G3\").merge(true)\n      jade_modules.jet_engine.range_format(out_sheet, \"F3:G4\",\"format/fill/color\",  \"LightGray\")\n      jade_modules.jet_engine.range_format(out_sheet, \"E3:G6\", \"format/horizontalAlignment\",  \"Center\")      \n\n    }\n\n    \n\nexcel.sync()\n//    out_sheet.getRangeByIndexes(model_stats.length+2,1,1,1).formulasR1C1=prediction_formula.join(\"\")\n      jade.save_object_to_workbook(model_results,window.active_tool+\"_model_result\")\n  })\n\n\n}\n\n\n\nasync function predict(){\n  // save the defaults for the tool\n  save_inputs()\n  //console.log(\"probabilities\", probabilities)\n  if(Object.keys(model_results).length===0){\n      alert(\"Could not find a model.  Have you completed step 1?\",\"Problem\")\n      return\n  }\n  const variables=[]\n  for(const pred of model_results.predictors){\n    variables.push({name:pred.variable,position:null,coeff:pred.coeff})\n  }\n\n  Excel.run(async function(excel){\n    const sheet = excel.workbook.worksheets.getItem(tag(\"predictionsheet\").value)\n    const datarange = sheet.getRange(tag(\"predictionrange\").value)\n    const data_names=datarange.getRow(0)\n    data_names.load('values,columnIndex')\n    sheet.activate()\n    await excel.sync()\n\n    // check to see if we can find all the vairables\n    const missing_variables=[]\n    for(const variable of variables){\n      if(data_names.values[0].includes(variable.name)){\n        variable.position=data_names.values[0].indexOf(variable.name)\n      }else{  \n        missing_variables.push(variable.name)\n      }\n    }\n    if(missing_variables.length>0){\n      alert(`In the data you are using for prediction, you must have a column named for each of the predictors in the model.  Could not find the following:<br><ul><li>${missing_variables.join(\"</li><li>\")}</li></ul>`, \"Problem\")\n      return\n    }\n   //console.log(\"variables\",variables)\n\n\n    datarange.getColumnsAfter(3).insert(Excel.InsertShiftDirection.right);\n    const next_col = datarange.getColumnsAfter(3)\n    next_col.load('values,columnIndex')\n    datarange.load(\"values\")\n    await excel.sync()\n\n    const start_col=data_names.columnIndex\n    const target_col=next_col.columnIndex\n    const col_count = data_names.values[0].length\n\n   //console.log(\"start_col\",start_col)\n   //console.log(\"target_col\",target_col)\n   //console.log(\"col_count\",col_count)\n    const prediction_formula=[`=exp(${model_results.intercept.coeff}\\n`]\n    for(const v of variables){\n      prediction_formula.push(`+(${v.coeff}*RC[${0-col_count+v.position}])\\n`)\n    }\n    prediction_formula.push(\")\")\n\n    const prediction=[[\"Odds\",\"Probability\",\"Prediction\"]]\n    for(let x=1;x<next_col.values.length;x++){\n      prediction.push([prediction_formula.join(\"\"),\"=RC[-1]/(RC[-1]+1)\",\"=if(RC[-1]>.5,1,0)\"])\n    }\n    next_col.formulasR1C1=prediction\n    await excel.sync()\n  })\n}\n     /////////////////////////////////////////////////////////////////\n    //                                                             //\n   //  code imported from https://statpages.info/logistic.html    //\n  //     This code has been modified to work with JADE Tools     //\n //                                                             //\n/////////////////////////////////////////////////////////////////\n\nfunction Abs(x) { return Math.abs(x) }\nfunction Sqrt(x) { return Math.sqrt(x) }\nfunction Exp(x) { return Math.exp(x) }\nfunction Ln(x) { return Math.log(x) }\nfunction Power(x,n) { return Math.pow(x,n) }\n\nvar Pi = 3.141592653589793;\nvar PiD2 = Pi/2;\n\nfunction ChiSq(x,n) {\n    if(x>1000 | n>1000) { var q=Norm((Power(x/n,1/3)+2/(9*n)-1)/Sqrt(2/(9*n)))/2; if (x>n) {return q} else {return 1-q} }\n    var p=Math.exp(-0.5*x); if((n%2)==1) { p=p*Math.sqrt(2*x/Pi) }\n    var k=n; while(k>=2) { p=p*x/k; k=k-2 }\n    var t=p; var a=n; while(t>1e-15*p) { a=a+2; t=t*x/a; p=p+t }\n    return 1-p\n    }\n\nfunction Norm(z) { var q=z*z\n    if(Abs(z)>7) {return (1-1/q+3/(q*q))*Exp(-q/2)/(Abs(z)*Sqrt(PiD2))} else {return ChiSq(q,1) }\n    }\n\nfunction ANorm(p) { var v=0.5; var dv=0.5; var z=0\n\twhile(dv>1e-15) { z=1/v-1; dv=dv/2; if(Norm(z)>p) { v=v-dv } else { v=v+dv } }\n\treturn z\n\t}\n\nfunction Fmt(x) { var v;\n\tif(x>=0) { v=\"          \"+(x+0.00005) } else { v=\"          \"+(x-0.00005) }\n\tv = v.substring(0,v.indexOf(\".\")+5)\n\treturn v.substring(v.length-10,v.length)\n\t}\n\nfunction Fmt3(x) { var v;\n\tv = \"   \" + x;\n\treturn v.substring(v.length-3,v.length)\n\t}\n\nfunction Fmt9(x) { var v;\n\tv = \"         \" + x;\n\treturn v.substring(v.length-9,v.length)\n\t}\n\nfunction vFmt(x) { var v;\n\tif(x>=0) { v=\"              \"+(x+0.0000005) } else { v=\"          \"+(x-0.0000005) }\n\tv = v.substring(0,v.indexOf(\".\")+7)\n\treturn v.substring(v.length-14,v.length)\n\t}\n\nfunction Xlate(s,from,to) { var v = s;\n\tvar l=v.indexOf(from);\n\twhile(l>-1) {\n\t\tv = v.substring(0,l) + to + v.substring(l+1,v.length);\n\t\tl=v.indexOf(from)\n\t\t}\n\treturn v\n    }\n\nfunction crArr(n) {\n\tthis.length = n\n\tfor (var i = 0; i < this.length; i++) { this[i] = 0 }\n\t}\n\t\nfunction ix(j,k,nCols) { return j * nCols + k }\n\nvar CR = \"\\r\";\nvar LF = \"\\n\";\nvar Tb = \"\\t\";\nvar NL = CR + LF;\n\nfunction iterate(form) {\n\nvar i = 0; var j = 0; var k = 0; var l = 0;\n\nvar nC   = eval(form_data.cPts);\nvar nR   = eval(form_data.cVar);\nvar nP   = nR + 1;\nvar nP1  = nP + 1;\nvar sY0 = 0;\nvar sY1 = 0;\nvar sC = 0;\nconsole.log(\"confidence\", tag(\"confidence\").value)\nvar cConfLev = tag(\"confidence\").value\nvar zc = ANorm( 1 - eval(cConfLev)/100 )\n\nvar X    = new crArr( nC * ( nR + 1 ) );\nvar Y0   = new crArr( nC );\nvar Y1   = new crArr( nC );\nvar xM   = new crArr( nR + 1 );\nvar xSD  = new crArr( nR + 1 );\nvar Par  = new crArr( nP );\nvar SEP  = new crArr( nP );\nvar Arr  = new crArr( nP * nP1 );\n\nvar da = Xlate(form_data.data,Tb,\",\");\nform_data.data.value = da;\nif( da.indexOf(NL)==-1 ) { if( da.indexOf(CR)>-1 ) { NL = CR } else { NL = LF } }\n\nfor (i = 0; i<nC; i++) {\n\tX[ix(i,0,nR+1)] = 1;\n\tl = da.indexOf(NL); if( l==-1 ) { l = da.length };\n\tvar v = da.substring(0,l);\n\tda = da.substring(l+NL.length,da.length);\n\tfor (j = 1; j<=nR; j++) {\n\t\tl = v.indexOf(\",\"); if( l==-1 ) { l = v.length };\n\t\tx = eval(v.substring(0,l))\n\t\tX[ix(i,j,nR+1)] = x;\n\t\tv = v.substring(l+1,v.length);\n\t\t}\n\tif(false){\n    // grouped data instead of raw data.\n\t\tl = v.indexOf(\",\"); if( l==-1 ) { l = v.length };\n\t\tx = eval(v.substring(0,l))\n\t\tY0[i] = x; sY0 = sY0 + x;\n\t\tv = v.substring(l+1,v.length);\n\t\tl = v.indexOf(\",\"); if( l==-1 ) { l = v.length };\n\t\tx = eval(v.substring(0,l))\n\t\tY1[i] = x; sY1 = sY1 + x;\n\t\tv = v.substring(l+1,v.length);\n\t}else{\n\t\tx = eval(v.substring(0,l));\n\t\tif ( x==0 ) { Y0[i] = 1; sY0 = sY0 + 1 } else { Y1[i] = 1; sY1 = sY1 + 1 }\n\t}\n\tsC = sC + (Y0[i] + Y1[i]);\n\tfor (j = 1; j<=nR; j++) {\n\t\tx = X[ix(i,j,nR+1)];\n\t\txM[j] = xM[j] + (Y0[i] + Y1[i])*x;\n\t\txSD[j] = xSD[j] + (Y0[i] + Y1[i])*x*x;\n\t\t}\n\t}\n\nvar o = \"Descriptives...\" + NL;\n\no = o + ( NL + sY0 + \" cases have Y=0; \" + sY1 + \" cases have Y=1.\" + NL );\n\no = o + ( NL + \" Variable     Avg       SD    \" + NL );\nfor (j = 1; j<=nR; j++) {\n\txM[j]  = xM[j]  / sC;\n\txSD[j] = xSD[j] / sC;\n\txSD[j] = Sqrt( Abs( xSD[j] - xM[j] * xM[j] ) )\n\to = o + (  \"   \" + Fmt3(j) + \"    \" + Fmt(xM[j]) + Fmt(xSD[j])+ NL );\n\t}\nxM[0] = 0; xSD[0] = 1;\n\nfor (i = 0; i<nC; i++) {\n\tfor (j = 1; j<=nR; j++) {\n\t\tX[ix(i,j,nR+1)] = ( X[ix(i,j,nR+1)] - xM[j] ) / xSD[j];\n\t\t}\n\t}\n\no = o + ( NL + \"Iteration History...\" );\n//console.log(o);\nform_data.output=o\n\nPar[0] = Ln( sY1 / sY0 );\nfor (j = 1; j<=nR; j++) {\n\tPar[j] = 0;\n\t}\n\nvar LnV = 0; var Ln1mV = 0;\n\nvar LLp = 2e+10;\nvar LL  = 1e+10;\nvar Fract = 0.1\n\nwhile( Abs(LLp-LL)>0.0000001 ) {\n\tLLp = LL;\n\tLL = 0;\n\tfor (j = 0; j<=nR; j++) {\n\t\tfor (k = j; k<=nR+1; k++) {\n\t\t\tArr[ix(j,k,nR+2)] = 0;\n\t\t\t}\n\t\t}\n\t\n\tfor (i = 0; i<nC; i++) {\t\n\t\tvar v = Par[0];\n\t\tfor (j = 1; j<=nR; j++) {\n\t\t\tv = v + Par[j] * X[ix(i,j,nR+1)];\n\t\t\t}\n\t\tif( v>15 ) { LnV = -Exp(-v); Ln1mV = -v; q = Exp(-v); v=Exp(LnV) }\n\t\t\telse { if( v<-15 ) {\tLnV = v; Ln1mV = -Exp(v); q = Exp(v); v=Exp(LnV) }\n\t\t\t\telse { v = 1 / ( 1 + Exp(-v) ); LnV = Ln(v); Ln1mV = Ln(1-v); q = v*(1-v) }\n\t\t\t}\n\t\tLL = LL - 2*Y1[i]*LnV - 2*Y0[i]*Ln1mV;\n\t\tfor (j = 0; j<=nR; j++) {\n\t\t\tvar xij = X[ix(i,j,nR+1)];\n\t\t\tArr[ix(j,nR+1,nR+2)] = Arr[ix(j,nR+1,nR+2)] + xij * ( Y1[i] * (1 - v) + Y0[i] * (-v) );\n\t\t\tfor (k=j; k<=nR; k++) {\n\t\t\t\tArr[ix(j,k,nR+2)] = Arr[ix(j,k,nR+2)] + xij * X[ix(i,k,nR+1)] * q * (Y0[i] + Y1[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\to = o + ( NL + \"-2 Log Likelihood = \" + Fmt( LL ) );\n\tif( LLp==1e+10 ) { LLn = LL; o = o + \" (Null Model)\" }\n\t//console.log(o);\n  form_data.output=o\n\n\tfor (j = 1; j<=nR; j++) {\n\t\tfor (k=0; k<j; k++) {\n\t\t\tArr[ix(j,k,nR+2)] = Arr[ix(k,j,nR+2)];\n\t\t\t}\n\t\t}\n\n\tfor (i=0; i<=nR; i++) { var s = Arr[ix(i,i,nR+2)]; Arr[ix(i,i,nR+2)] = 1;\n\t\tfor (k=0; k<=nR+1; k++) { Arr[ix(i,k,nR+2)] = Arr[ix(i,k,nR+2)] / s; }\n\t\tfor (j=0; j<=nR; j++) {\n\t\t\tif (i!=j) { s = Arr[ix(j,i,nR+2)]; Arr[ix(j,i,nR+2)] = 0;\n\t\t\t\tfor (k=0; k<=nR+1; k++) {\n\t\t\t\t\tArr[ix(j,k,nR+2)] = Arr[ix(j,k,nR+2)] - s * Arr[ix(i,k,nR+2)];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\tfor( j=0; j<=nR; j++) {\n\t\tPar[j] = Par[j] + Fract * Arr[ix(j,nR+1,nR+2)];\n\t\t}\nFract = Fract + 0.1; if( Fract>1 ) { Fract = 1 }\n\t}\n\no = o + ( \" (Converged)\" + NL );\nvar CSq = LLn - LL;\no = o + ( NL + \"Overall Model Fit...\" + NL + \"  Chi Square=\" + Fmt(CSq) + \";  df=\" + nR + \";  p=\" + Fmt(ChiSq(CSq,nR)) + NL );\nmodel_results.fit={\n  chi_square:CSq,\n  df:nR,\n  p:ChiSq(CSq,nR)\n}\n\no = o + ( NL + \"Coefficients, Standard Errors, Odds Ratios, and \" + cConfLev + \"% Confidence Limits...\" + NL );\no = o + ( \" Variable     Coeff.    StdErr       p          O.R.      Low  --  High\" + NL );\nmodel_results.predictors=[]\nfor( j=1; j<=nR; j++) {\n\tPar[j] = Par[j] / xSD[j];\n\tSEP[j] = Sqrt( Arr[ix(j,j,nP+1)] ) / xSD[j];\n\tPar[0] = Par[0] - Par[j] * xM[j];\n //console.log(\"Fmt3(j)\",Fmt3(j))\n\n\n  o = o + ( \"   \" + Fmt3(j) + \"    \" + Fmt(Par[j]) + Fmt(SEP[j]) + Fmt( Norm(Abs(Par[j]/SEP[j])) ) );\n\tvar ORc = Exp( Par[j] );\n\tvar ORl = Exp( Par[j] - zc * SEP[j] );\n\tvar ORh = Exp( Par[j] + zc * SEP[j] );\n\to = o + ( \"   \" + Fmt(ORc) + Fmt(ORl) + Fmt(ORh) + NL );\n\n  model_results.predictors.push({\n    variable:predictor_names.values[0][form_data.predictors[Fmt3(j)-1]],\n    coeff:Par[j],\n    std_err:SEP[j],\n    p:Norm(Abs(Par[j]/SEP[j])),\n    odds_ratio:ORc,\n    conf_low:ORl,\n    conf_high:ORh\n    })\n  \n\n}\nSEI = 0;\nfor (j = 0; j<=nR; j++) {\n\tif( j==0 ) { Xj = 1 } else { Xj = -xM[j]/xSD[j] }\n\tfor (k=0; k<=nR; k++) {\n\t\tif( k==0 ) { Xk = 1 } else { Xk = -xM[k]/xSD[k] }\n\t\tSEI = SEI + Xj * Xk * Arr[ix(j,k,nR+2)];\n\t\t}\n\t}\nSEI = Sqrt( SEI )\no = o + ( \"Intercept \" + Fmt(Par[0]) + Fmt(SEI) + Fmt( Norm(Abs(Par[0]/SEI)) ) );\nmodel_results.intercept={\n  coeff:Par[0],\n  std_err:SEI,\n  p:Norm(Abs(Par[0]/SEI)) \n}\no = o + ( NL + NL + \"Predicted Probability of Outcome, with \" + cConfLev + \"% Confidence Limits...\" )\nif(false)//grouped\n\t{ o = o + ( NL + \"    X                n0           n1     Prob        Low  --  High\" + NL ) }\n\telse\n\t{ o = o + ( NL + \"    X                 Y     Prob        Low  --  High\" + NL ) }\nfor (i = 0; i<nC; i++) {\t\n\tv = Par[0];\n\tfor (j = 1; j<=nR; j++) {\n\t\tx = xM[j] + xSD[j] * X[ix(i,j,nR+1)];\n\t\tv = v + Par[j] * x;\n\t\to = o + Fmt(x);\n\t\t}\n\tp = 1 / ( 1 + Exp( -v ) );\n\tif(false)//grouped\n\t\t{ o = o + ( \"    \" + Fmt9(Y0[i]) + \"    \" + Fmt9(Y1[i]) + Fmt(p) ) }\n\t\telse\n\t\t{ o = o + ( \"    \" + Fmt9(Y1[i]) + Fmt(p) ) }\n\nSEY = 0;\nfor (j = 0; j<=nR; j++) {\n\tif( j==0 ) { Xj = 1 } else { Xj = X[ix(i,j,nR+1)] }\n\tfor (k=0; k<=nR; k++) {\n\t\tif( k==0 ) { Xk = 1 } else { Xk = X[ix(i,k,nR+1)] }\n\t\tSEY = SEY + Xj * Xk * Arr[ix(j,k,nR+2)];\n\t\t}\n\t}\nSEY = Sqrt( SEY )\no = o + ( \" \" + Fmt(1/(1+Exp(-(v-zc*SEY)))) + \" \" + Fmt(1/(1+Exp(-(v+zc*SEY)))) );\no = o + NL;\n}\n//console.log(o);\nform_data.output=o\n\n}\t\t\n"
    },
    "logistic-regression.html": {
      "filename": "logistic-regression.html",
      "type": "text/html",
      "language": "HTML",
      "raw_url": "https://gist.githubusercontent.com/jade-addin/9382a0ae7967eef62acf20f0f31a8c31/raw/8307daec07662f3c6964e20e97ea9f71c8291679/logistic-regression.html",
      "size": 7998,
      "truncated": false,
      "content": "\n<div class=\"hidden\" id=\"jet-refresh\" style=\"margin-left: .5rem;\"><i title=\"Re-load this tool.\" onclick=\"jade_modules.jet_engine.select_page()\" class=\"fa-solid fa-arrows-rotate\"  cursor:pointer\"></i></div>    \n<div style=\"margin:1rem; text-align: center;\"><div style=\"display:inline-block; text-align: left;\">\n    <table style=\"width:100%\" align=\"center\" cellspacing=\"0\" cellpadding=\"4\">\n        <tbody>\n            <tr>\n                <td onclick=\"jade_modules.jet_engine.toggle_table(this.nextElementSibling.firstElementChild)\" colspan=\"2\" class=\"section head\">Example</td>\n                <td class=\"section drop\"><i  title=\"Hide or show this step.\" onclick=\"jade_modules.jet_engine.toggle_table(this)\" class=\"fa-solid fa-chevron-down\"></i></td>\n            </tr>            \n            <tr class=\"hidden\" style=\"background-color: white;\">\n                <td colspan=\"3\">Click the button below to build a sheet called \"Example Data\" and configure this tool to run an analysis based on the data.  You can <a href=\"https://www.youtube.com/watch?v=yIYKR4sgzI8\">watch a video</a> walking you through the process and explaining the basics of the analysis.</td>\n            </tr>            \n            <tr class=\"hidden\">\n                <td colspan=\"3\" align=\"right\"><button id=\"configure-button\" onclick=\"jade_modules.code.configure_example()\">Configure Example</button></td>\n            </tr>            \n        </tbody>\n    </table>\n    <div style=\"margin-top: 1rem;\" />\n    \n\n    <table style=\"width:100%\" align=\"center\" cellspacing=\"0\" cellpadding=\"4\">\n    <tbody>\n        <tr>\n            <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\" colspan=\"2\" class=\"section head\">1. Configure Model</td>\n            <td class=\"section drop\"><i  title=\"Hide or show this step.\" onclick=\"jade_modules.jet_engine.toggle_table(this)\" class=\"fa-solid fa-chevron-up\"></i></td>\n        </tr>            \n        <tr class=\"hidden note\">\n            <td colspan=\"3\">In this step, you configure this tool to indicate how the model should be run.</td>\n        </tr>            \n        <!--tr>\n            <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\"  class=\"label\" >Confidence Level:</td>\n            <td><input size=\"2\" type=\"text\" id=\"confidence\" value=\"95\"/>%</td>\n            <td></td>\n        </tr>            \n        <tr class=\"hidden note\">\n            <td colspan=\"3\">Confidence level is used for determining the upper and lower boundaries of the confidence interval in the analysis report.  It's usually a number fairly close to 100%, like 90%, 95% or 99%.</td>\n        </tr-->            \n        <tr>\n            <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\"  class=\"label\" >Data Sheet:</td>\n            <td><input size=\"6\" type=\"text\" id=\"datasheet\" onfocus=\"jade_modules.jet_engine.default_selected_sheet(this)\"/></td>\n            <td><i title=\"Get the name of the active sheet.\" onclick=\"jade_modules.jet_engine.get_sheet_name('datasheet')\" class=\"fa-solid fa-file\" style=\"color:#777; cursor:pointer\"></i></td>\n        </tr>            \n        <tr class=\"hidden note\">\n            <td colspan=\"3\">This is the name of the worksheet that has the data you will use to build your prediction model</td>\n        </tr>            \n        <tr>\n            <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\"  class=\"label\" >Dependent Variable:</td>\n            <td><input size=\"6\" type=\"text\" id=\"outcome\" onchange=\"jade_modules.code.find_outcomes()\" onfocus=\"jade_modules.jet_engine.default_selected_range(this)\"/></td>\n            <td><i title=\"Get the data columns from the selecte range.\" onclick=\"jade_modules.jet_engine.get_data_column_address('outcome')\" class=\"fa-solid fa-table\" style=\"color:#777; cursor:pointer\"></i></td>\n        </tr>            \n        <tr class=\"hidden note\">\n            <td colspan=\"3\">The range that holds the model outcome data.  This is also known as the \"response\" or the \"label\".</td>\n        </tr>            \n        <tr>\n            <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\"  class=\"label\" >Independent Variables:</td>\n            <td><input size=\"6\" type=\"text\" id=\"predictors\" onfocus=\"jade_modules.jet_engine.default_selected_range(this)\"/></td>\n            <td><i title=\"Get the data columns from the selected range.\" onclick=\"jade_modules.jet_engine.get_data_column_address('predictors')\" class=\"fa-solid fa-table\" style=\"color:#777; cursor:pointer\"></i></td>\n        </tr>            \n        <tr class=\"hidden note\">\n            <td colspan=\"3\">The range that holds the model input data. These are alos know as \"predictors\" or \"features\".</td>\n        </tr>            \n        <tr>\n            <td id=\"predictor-names\" colspan=\"3\" style=\"padding-left: 1rem;\"></td>\n        </tr>      \n        <tr onclick=\"jade_modules.jet_engine.toggle_next_row(this)\" class=\"label\" >\n            <td  onclick=\"jade_modules.jet_engine.toggle_next_row(this)\" class=\"label\" >Training Set %:</td>\n            <td><input size=\"6\" type=\"text\" id=\"training-percent\" value=\"80\"/></td>\n            <td></td>\n        </tr>            \n        <tr class=\"hidden note\">\n            <td colspan=\"3\">This is the percent of your data you want to use to train the model.  It is number like 80.  Set this to 100 to build a model without also testing it.</td>\n        </tr>            \n\n        <tr>\n            <td colspan=\"3\" align=\"right\"><button id=\"configure-button\" onclick=\"jade_modules.code.run_model()\">Run Model</button></td>\n        </tr>            \n    </tbody>\n</table>\n<div style=\"margin-top: 1rem;\" />\n\n<table style=\"width:100%\" align=\"center\" cellspacing=\"0\" cellpadding=\"4\">\n    <tbody>\n        <tr>\n            <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\" colspan=\"2\" class=\"section head\">2. Make Predictions</td>\n            <td class=\"section drop\"><i  title=\"Hide or show this step.\" onclick=\"jade_modules.jet_engine.toggle_table(this)\" class=\"fa-solid fa-chevron-up\"></i></td>\n        </tr>            \n        <tr class=\"hidden note\">\n            <td colspan=\"3\">This step will add three columns (odds, probability, and prediction) to a table that has the same predctors as the table used to create the most recently-run model.</td>\n        </tr>            \n        <tr>\n            <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\"  class=\"label\" >Data Sheet:</td>\n            <td><input size=\"6\" type=\"text\" id=\"predictionsheet\" onfocus=\"jade_modules.jet_engine.default_selected_sheet(this)\"/></td>\n            <td><i title=\"Get the name of the active sheet.\" onclick=\"jade_modules.jet_engine.get_sheet_name('predictionsheet')\" class=\"fa-solid fa-file\" style=\"color:#777; cursor:pointer\"></i></td>\n        </tr>            \n        <tr class=\"hidden note\">\n            <td colspan=\"3\">This is the name of the worksheet that has the data about which you want predictions.  Include a row at the top with column names.  The data must have column names that match the column names of the predictors used to create the model.</td>\n        </tr>            \n        <tr>\n            <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\"  class=\"label\" >Data Range:</td>\n            <td><input size=\"6\" type=\"text\" id=\"predictionrange\" onfocus=\"jade_modules.jet_engine.default_selected_range(this)\"/></td>\n            <td><i title=\"Get the address of the selected range.\" onclick=\"jade_modules.jet_engine.get_multicell_address('predictionrange')\" class=\"fa-solid fa-table\" style=\"color:#777; cursor:pointer\"></i></td>\n        </tr>            \n        <tr class=\"hidden note\">\n            <td colspan=\"3\">This is a reference to table of data with your predictions, including a header row.</td>\n        </tr>            \n        <tr>\n            <td colspan=\"3\" align=\"right\"><button onclick=\"jade_modules.code.predict()\">Predict Outcomes</button></td>\n        </tr>            \n    </tbody>\n</table>\n</div></div>\n<input  type=\"hidden\" id=\"confidence\" value=\"95\"/>"
    },
    "manifest.json": {
      "filename": "manifest.json",
      "type": "application/json",
      "language": "JSON",
      "raw_url": "https://gist.githubusercontent.com/jade-addin/9382a0ae7967eef62acf20f0f31a8c31/raw/3d2cd53138c7fce67102091f00cd9fbc8c69f4aa/manifest.json",
      "size": 58,
      "truncated": false,
      "content": "[\r\n    \"code.js\",\"logistic-regression.html\",\"style.css\"\r\n]"
    },
    "style.css": {
      "filename": "style.css",
      "type": "text/css",
      "language": "CSS",
      "raw_url": "https://gist.githubusercontent.com/jade-addin/9382a0ae7967eef62acf20f0f31a8c31/raw/7068cde4d17e9f6c8158b5bf818f296d7fefcaa1/style.css",
      "size": 4,
      "truncated": false,
      "content": "/**/"
    }
  },
  "public": true,
  "created_at": "2022-05-06T11:55:30Z",
  "updated_at": "2022-05-20T20:19:24Z",
  "description": "JET: Logistic Regression tool for the JADE Excel Add-in (using javascript)",
  "comments": 0,
  "user": null,
  "comments_url": "https://api.github.com/gists/9382a0ae7967eef62acf20f0f31a8c31/comments",
  "owner": {
    "login": "jade-addin",
    "id": 97227368,
    "node_id": "U_kgDOBcuSaA",
    "avatar_url": "https://avatars.githubusercontent.com/u/97227368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jade-addin",
    "html_url": "https://github.com/jade-addin",
    "followers_url": "https://api.github.com/users/jade-addin/followers",
    "following_url": "https://api.github.com/users/jade-addin/following{/other_user}",
    "gists_url": "https://api.github.com/users/jade-addin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jade-addin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jade-addin/subscriptions",
    "organizations_url": "https://api.github.com/users/jade-addin/orgs",
    "repos_url": "https://api.github.com/users/jade-addin/repos",
    "events_url": "https://api.github.com/users/jade-addin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jade-addin/received_events",
    "type": "User",
    "site_admin": false
  },
  "forks": [

  ],
  "history": [
    {
      "user": {
        "login": "theGove",
        "id": 24496385,
        "node_id": "MDQ6VXNlcjI0NDk2Mzg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/24496385?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theGove",
        "html_url": "https://github.com/theGove",
        "followers_url": "https://api.github.com/users/theGove/followers",
        "following_url": "https://api.github.com/users/theGove/following{/other_user}",
        "gists_url": "https://api.github.com/users/theGove/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/theGove/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/theGove/subscriptions",
        "organizations_url": "https://api.github.com/users/theGove/orgs",
        "repos_url": "https://api.github.com/users/theGove/repos",
        "events_url": "https://api.github.com/users/theGove/events{/privacy}",
        "received_events_url": "https://api.github.com/users/theGove/received_events",
        "type": "User",
        "site_admin": false
      },
      "version": "37e679628920f1175393411675f749be464f71be",
      "committed_at": "2022-05-20T20:19:22Z",
      "change_status": {
        "total": 853,
        "additions": 853,
        "deletions": 0
      },
      "url": "https://api.github.com/gists/9382a0ae7967eef62acf20f0f31a8c31/37e679628920f1175393411675f749be464f71be"
    }
  ],
  "truncated": false
}
