{
  "url": "https://api.github.com/gists/766f9f7b76f9841a2ef8d5d72ef4d0ba",
  "forks_url": "https://api.github.com/gists/766f9f7b76f9841a2ef8d5d72ef4d0ba/forks",
  "commits_url": "https://api.github.com/gists/766f9f7b76f9841a2ef8d5d72ef4d0ba/commits",
  "id": "766f9f7b76f9841a2ef8d5d72ef4d0ba",
  "node_id": "G_kwDOBcuSaNoAIDc2NmY5ZjdiNzZmOTg0MWEyZWY4ZDVkNzJlZjRkMGJh",
  "git_pull_url": "https://gist.github.com/766f9f7b76f9841a2ef8d5d72ef4d0ba.git",
  "git_push_url": "https://gist.github.com/766f9f7b76f9841a2ef8d5d72ef4d0ba.git",
  "html_url": "https://gist.github.com/766f9f7b76f9841a2ef8d5d72ef4d0ba",
  "files": {
    "code.js": {
      "filename": "code.js",
      "type": "application/javascript",
      "language": "JavaScript",
      "raw_url": "https://gist.githubusercontent.com/jade-addin/766f9f7b76f9841a2ef8d5d72ef4d0ba/raw/d494fabbc25660a6ba2bb523f5d3fbd459a59640/code.js",
      "size": 10756,
      "truncated": false,
      "content": "const initialized={}\nconst built_objects={}\nasync function auto_exec(){\n  Jade.set_css(gist_files('style.css'))\n  tag(\"tools-body\").innerHTML=gist_files('task.html')\n  const tool_data = await jade.read_object_from_workbook(window.active_tool)\n  console.log(\"tool_data\",tool_data)\n  for(const[key,value] of Object.entries(tool_data)){\n    console.log(key, value)\n    tag(key).value=value\n  }\n  jade_modules.jet_engine.toggle_table(tag(\"default-tool\"))\n  tag('module-result').innerHTML=jade_modules.code.build_module()\n}\n\nasync function save_props(){\n  const the_object={result:\"it works with the active tool\"}\n  await jade.save_object_to_workbook(the_object, window.active_tool)\n}\n\nasync function read_props(){\n  const obj = await jade.read_object_from_workbook(window.active_tool)\n  console.log(\"obj\",obj)\n}\n\n\n\nfunction default_value(input){\n  if(!input.value){\n    console.log(\"getting address of active cell\")\n    Excel.run(async (excel) => {\n      let rng = excel.workbook.getSelectedRange();\n      rng.load(\"address\");\n      await excel.sync();\n      input.value = rng.address.split(\"!\")[1]\n  })\n}\n}\n\n\nfunction build_module(){\n  const task = `title: MODULE TITLE #UPDATE\ntext: MODULE TEXT #UPDATE\nrules:\n- message: Filled by function\n  name: Minimum API version available\n  steps:\n  - function: min_api_version\n    params:\n      api_version: 1.7\n- message: Filled by function\n  name: Sheet exists and cells are complete\n  steps:\n  - function: sheet_and_cells\n    params:\n      range_array: \n      - B2:B10 #UPDATE\n      - C2:C10 #UPDATE\n      sheet_name: SHEETNAME #UPDATE\ntasks:\n  `\n\n  return task\n}\n\n\n\nasync function build_task(task_type, tag_id){\n  let sheet_name\n  let cell_address\n  let range_address\n  let doit_do\n  let doit_undo\n  let hint_update=\" # UPDATE\"\n  let response_formula_update=\" # UPDATE\"\n  switch (task_type){\n    case \"range\":\n      await Excel.run(async (excel) => {\n        let rng = excel.workbook.getSelectedRange();\n        rng.load(\"address,formulas\");\n        await excel.sync();\n        console.log(rng.address)\n        sheet_name =  rng.address.split(\"!\")[0]\n        cell_address = rng.address.split(\"!\")[1].split(\":\")[0]\n        range_address = rng.address.split(\"!\")[1]\n        const doit_formula = rng.formulas[0][0]\n        doit_do = `- [set_sheet, ${sheet_name}]\\n    - [formula, '${range_address}', ${doit_formula}]`\n        doit_undo = `- [set_sheet, ${sheet_name}]\\n    - [formula, '${range_address}', '']`\n        })\n      hint_update=\"\"\n      response_formula_update=\"\"        \n      break\n    default:\n      cell_address=\"A1\"\n      sheet_name=\"Sheet1\"        \n      doit_do = `- [set_sheet, Sheet1] # UPDATE\\n    - [formula, 'A1', \"=today()\"] # UPDATE`\n      doit_undo = `- [set_sheet, Sheet1] # UPDATE\\n    - [formula, 'A1', ''] # UPDATE`\n    }\n  \n  tag(tag_id).value = `- name: TASK NAME #UPDATE\n  id: TASKID  #UPDATE\n  xmlid: null\n  hint: ${sheet_name}|${cell_address} ${hint_update}\n  text: TASK TEXT #UPDATE\n  responseFormula: =cellResponse('${sheet_name}'!${cell_address})${response_formula_update}\n  doit:\n    do:\n    ${doit_do}\n    undo:\n    ${doit_undo}\n  video:\n  - description: Task Solution\n    type: show\n    files:\n    - platform: PC\n      url: null #UPDATE PC Vimeo Video URL\n    - platform: Mac\n      url: null #UPDATE MAC Vimeo Video URL\n    - platform: Online\n      url: null #UPDATE Online Vimeo Video URL\n  rules:\n`\n}\n\nfunction get_checked_items(container){\n  //accepts a tagh that contains checkbokes and returns which are cheked\n  let box=container\n  let unchecked=0\n  if(typeof box===\"string\"){box=tag(box)}\n  const list=[]\n  for(const elem of box.childNodes){\n    if(elem.type===\"checkbox\"){\n      unchecked++\n      //console.log(elem, elem.checked, elem.type)\n      if(elem.checked){\n        unchecked--\n        list.push(elem.nextSibling.nodeValue.trim())\n      }\n    }\n  }\n  //console.log(\"unchecked\",unchecked)\n  if(list.length===0 || unchecked===0){return null}\n  return list\n}\n\nasync function build_rule(rule_type, tag_id){\n\n  switch (rule_type){\n    case \"range\":\n      tag(tag_id).value=await build_range_rule()\n      break\n    default:  \n  }\n\n}\n\nasync function build_range_rule(){\n  let robustness_template=\"\"\n  if(tag(\"include-robustness\").checked){\n    robustness_template=`\\n        robustness: [[{precedent: \"'${built_objects.range_rule.sheet_name}'!c10\", value: 220}, {precedent: sheet1!c11, value: Accounting}], [{precedent: \"'${built_objects.range_rule.sheet_name}'!c10\", value: 145}, {precedent: sheet1!c11, value: Marketing}]`\n  }\n\n  const list_fun = get_checked_items(\"list-fun\")\n  const list_ref = get_checked_items(\"list-ref\")\n  let min_ref=\"\"\n  let min_fun=\"\"\n\n  if(list_fun){\n    min_fun=`\\n        minimum_functions: [${list_fun.join()}]`\n  }\n\n  if(list_ref){\n    const data=[]\n    for(const ref of list_ref){\n      data.push(`{ref: ${ref.split(\"!\")[1]}, sheet: ${ref.split(\"!\")[0]}}`)\n    }\n    min_ref=\"\\n        minimum_references: [\" + data.join(\", \") + \"]\"\n\n  }\n  \n  console.log(\"ref_list\",list_ref)\n  await Excel.run(async (context) => {\n  }) \n\n  return `  - name: Evaluate range ${built_objects.range_rule.address}\n    id: AA # UPDATE\n    points: 1 # UPDATE\n    message: ''\n    steps:\n    - function: evaluate_range_formulas\n      params:\n        formula: ${built_objects.range_rule.key_formula}\n        range: ${built_objects.range_rule.address}\n        sheet_name: ${built_objects.range_rule.sheet_name}\n        sign_matters: true\n        weights:\n          value: ${tag(\"wt-val\").value / 100}\n          references: ${tag(\"wt-ref\").value / 100}\n          formula: ${tag(\"wt-fun\").value / 100}\n          copied: ${tag(\"wt-cop\").value / 100}${min_fun}${min_ref}${robustness_template}\n`\n}\n\n\nfunction show_rule_options(rule_type){\n  console.log(\"at show rule opts\")\n  for(const child of tag(\"rule-options\").children){\n    child.style.display=\"none\"\n  }\n  switch(rule_type){\n    case \"range\":\n      console.log(\"at show range\")\n      tag(\"range-rule-options\").style.display=\"block\"\n      break\n    case \"chart\":\n      tag(\"chart-rule-options\").style.display=\"block\"\n      break\n    default:  \n  }\n}\n\n\nasync function get_precedents(range){\n  const context=range.context\n  let retval=[]\n  let directPrecedents = range.getDirectPrecedents();\n  range.load(\"address\");\n  directPrecedents.areas.load(\"address\");\n  try{\n    await context.sync();\n  }catch(e){\n    return null//cell has not precedents\n  }\n\n  for (let i = 0; i < directPrecedents.areas.items.length; i++) {\n    //console.log(`  ${directPrecedents.areas.items[i].address}`);\n    retval.push(...directPrecedents.areas.items[i].address.split(\",\"))\n  }\n\n  return retval\n  \n}\nfunction init_rule(){\n  if(!initialized.range_rule){scan_for_range_rule()}\n}\n\nasync function scan_for_range_rule(){\n  initialized.range_rule=true\n  console.log('in scan for range rule============================================')\n  // show all parts of the form\n  tag(\"row-ref-2\").style.display=\"none\"\n  tag(\"row-ref-1\").style.display=\"none\"\n  tag(\"row-fun-2\").style.display=\"none\"\n  tag(\"row-fun-1\").style.display=\"none\"\n  tag(\"row-cop\").style.display=\"none\"\n\n\n  const weight={\n    value:40,\n    reference:0,\n    function:0,\n    copied:0\n  }\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getActiveWorksheet() \n    const range = context.workbook.getSelectedRange();\n    const first_cell=range.getCell(0,0)\n    \n    // evaluate precedents\n    const precedents = await get_precedents(first_cell)\n    console.log(\"returned pprecedents\",precedents)\n    if(precedents){\n      weight.reference=20\n      const html=[]\n      for(const prec of precedents){\n        html.push(`<input checked type=\"checkbox\" /> ${prec}<br />`)\n      }\n\n      console.log(\"children\",tag(\"row-ref-2\").childNodes[1])\n      tag(\"row-ref-2\").childNodes[1].innerHTML=html.join(\"\")\n      //tag(\"row-fun-2\").innerHTML=html.join(\"\")\n      tag(\"row-ref-2\").style.display=\"\"\n      tag(\"row-ref-1\").style.display=\"\"\n    }\n  \n\n    range.load('formulas,address')\n    sheet.load('name')\n    await context.sync()\n    // show copy\n    if(range.address.includes(\":\")){\n      weight.copied=20\n      tag(\"row-cop\").style.display=\"\"\n    }\n\n    // Evaluate if we should show functions\n    let first_cell_formula = range.formulas[0][0]\n    //console.log('first_cell_formula',first_cell_formula)\n    const function_array = extract_functions_from_formula(first_cell_formula)\n    const html=[]\n    if(function_array){\n      for(const func of function_array){\n        html.push(`<input checked type=\"checkbox\" /> ${func}<br />`)\n      }\n    }\n    if(html.length>0){\n      console.log(2)\n      weight.function=20\n      //console.log(\"children\",tag(\"row-fun-2\").childNodes[1])\n      tag(\"row-fun-2\").childNodes[1].innerHTML=html.join(\"\")\n      //tag(\"row-fun-2\").innerHTML=html.join(\"\")\n      tag(\"row-fun-2\").style.display=\"\"\n      tag(\"row-fun-1\").style.display=\"\"\n    }\n    \n    //  adjust points\n    const total_points=weight.value + weight.reference + weight.function + weight.copied\n    tag(\"wt-fun\").value= Math.round(100 * weight.function/total_points)\n    tag(\"wt-ref\").value= Math.round(100 * weight.reference/total_points)\n    tag(\"wt-cop\").value= Math.round(100 * weight.copied/total_points)\n    tag(\"wt-val\").value=100 - tag(\"wt-fun\").value - tag(\"wt-ref\").value - tag(\"wt-cop\").value\n\n    // remember stuff for building\n    built_objects.range_rule={\n      sheet_name: sheet.name,\n      address:range.address.split(\"!\")[1],\n      key_formula:range.formulas[0][0],\n    }\n  });\n}\n\n\nfunction update_range(){\n  Excel.run(async (excel) => {\n    let rng = excel.workbook.getSelectedRange();\n    rng.load(\"address\");\n    await excel.sync();\n    tag(\"data-range\").value = rng.address.split(\"!\")[1]\n  })\n}\n\nasync function append_range(source,destination){\n  \n//  if(tag(source).value===''){\n  await jade_modules.jet_engine.get_multicell_address(source)\n//  }\n  \n  \n  let comma = \"\"\n  if(tag(destination).value && tag(destination).value.charAt(tag(destination).value.length-1)!==\",\"){comma=\",\"}\n  tag(destination).value += comma + tag(source).value\n  tag(source).value  = ''\n}\n\n//Utilities (possible add to JET tools)\n\nfunction extract_functions_from_formula(formula_text){\n\n  const regex = /\\w+\\(/g\n  let key_formulas_found = true\n  let temp_function_array = []\n  try{\n    temp_function_array = formula_text.match(regex)\n  }catch(err){\n    key_formulas_found = false\n  }\n  if(key_formulas_found===true&&Array.isArray(temp_function_array)){\n    let function_array = []\n    for(const single_function of temp_function_array){\n      if(function_array.indexOf(single_function.replace(\"(\",\"\").toUpperCase())<0){function_array.push(single_function.replace(\"(\",\"\").toUpperCase())}\n    }    \n    return function_array\n  }else{\n    return null\n  }  \n}\n\n"
    },
    "manifest.json": {
      "filename": "manifest.json",
      "type": "application/json",
      "language": "JSON",
      "raw_url": "https://gist.githubusercontent.com/jade-addin/766f9f7b76f9841a2ef8d5d72ef4d0ba/raw/e6405d3baa585ff80fac9d22a3f63fa62745fe2e/manifest.json",
      "size": 41,
      "truncated": false,
      "content": "[\n    \"code.js\",\"task.html\",\"style.css\"\n]"
    },
    "style.css": {
      "filename": "style.css",
      "type": "text/css",
      "language": "CSS",
      "raw_url": "https://gist.githubusercontent.com/jade-addin/766f9f7b76f9841a2ef8d5d72ef4d0ba/raw/d4fcef81499ba350e965d75ebc3f71234bd2e53c/style.css",
      "size": 83,
      "truncated": false,
      "content": ".light{\n    color:red;\n}\n.opt-list{\n    font-size: .8rem;\n    padding-left: 1rem;\n}"
    },
    "task.html": {
      "filename": "task.html",
      "type": "text/html",
      "language": "HTML",
      "raw_url": "https://gist.githubusercontent.com/jade-addin/766f9f7b76f9841a2ef8d5d72ef4d0ba/raw/4f874ed60725864ce746825ffc580e2df5c4d822/task.html",
      "size": 9443,
      "truncated": false,
      "content": "\n<div class=\"hidden\" id=\"jet-refresh\" style=\"margin-left: .5rem;\"><i title=\"Re-load this tool.\" onclick=\"jade_modules.jet_engine.select_page()\" class=\"fa-solid fa-arrows-rotate\"  cursor:pointer\"></i></div>    \n<div style=\"margin:1rem; text-align: center;\"><div style=\"display:inline-block; text-align: left;\">\n    <table style=\"width:100%\" align=\"center\" cellspacing=\"0\" cellpadding=\"4\">\n        <tbody>\n            <tr>\n                <td onclick=\"jade_modules.jet_engine.toggle_table(this.nextElementSibling.firstElementChild)\" colspan=\"2\" class=\"section head\">Instructions</td>\n                <td class=\"section drop\"><i  title=\"Hide or show this step.\" onclick=\"jade_modules.jet_engine.toggle_table(this)\" class=\"fa-solid fa-chevron-down\"></i></td>\n            </tr>            \n            <tr class=\"hidden\" style=\"background-color: white;\">\n                <td colspan=\"3\">The tools needed to create the YAML statements in the setup.yaml file are below. Click on the title for the tool you wish to use to expose the form for that tool. Supply the parameters and click build to create the statement. The statement will appear in the output textbox where it can be copied and pasted into the setup.yaml file.</td>\n            </tr>            \n        </tbody>\n    </table>\n    <div style=\"margin-top: 1rem;\" />\n\n\n\n    <table style=\"width:100%\" align=\"center\" cellspacing=\"0\" cellpadding=\"4\">\n        <!-- Creates the yaml statement to create a range task -->\n        <tbody>\n            <tr>\n                <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\" colspan=\"2\" class=\"section head\">Module</td>\n                <td class=\"section drop\"><i title=\"Hide or show this step.\" onclick=\"jade_modules.jet_engine.toggle_table(this)\" class=\"fa-solid fa-chevron-down\"></i></td>\n            </tr>            \n            <tr class=\"hidden note\">\n                <td colspan=\"3\">Creates the yaml statement to create a task for a master.yaml file.</td>\n            </tr>            \n           \n\n            <tr class=\"hidden\">\n                <td class=\"entry\" colspan=\"3\"><textarea style=\"width:100%\" rows=\"4\" cols=\"33\" wrap=\"hard\" id=\"module-result\"></textarea></td>\n            </tr>  \n            <tr class=\"hidden\">\n                <td colspan=\"3\" align=\"right\"><button id=\"configure-button\" onclick=\"jade_modules.code.copy_results('module-result')\">Copy</button></td>\n            </tr> \n        </tbody>\n    </table>\n    <div style=\"margin-top: 1rem;\" />\n\n    <table style=\"width:100%\" align=\"center\" cellspacing=\"0\" cellpadding=\"4\">\n        <!-- Creates the yaml statement to create a range task -->\n        <tbody>\n            <tr>\n                <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\" colspan=\"2\" class=\"section head\">Task</td>\n                <td class=\"section drop\"><i title=\"Hide or show this step.\" onclick=\"jade_modules.jet_engine.toggle_table(this)\" class=\"fa-solid fa-chevron-down\"></i></td>\n            </tr>            \n            <tr class=\"hidden note\">\n                <td colspan=\"3\">Creates the yaml statement to create a task for a master.yaml file.</td>\n            </tr>            \n            <tr class=\"hidden\">\n                <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\"  class=\"label\" >Task Type:</td>\n                <td class=\"entry\" colspan=\"2\" >\n                    <select  style=\"width:100%\" id=\"task-type\">\n                        <option value=\"simple\">Simple</option>\n                        <option value=\"range\" selected>Range</option>\n                        <option value=\"chart\">Chart</option>\n                    </select>\n                </td>\n            </tr>            \n            <tr class=\"hidden note\">\n                <td colspan=\"3\">This adds the range above into the list of ranges.</td>\n            </tr>    \n            \n\n            <tr class=\"hidden\">\n                <td colspan=\"3\" align=\"right\"><button id=\"configure-button\" onclick=\"jade_modules.code.build_task(tag('task-type').value, 'task-result')\">Build</button></td>\n            </tr>            \n\n            <tr class=\"hidden\">\n                <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\"  class=\"label\" colspan=\"3\" >Output:</td>\n            </tr>            \n            <tr class=\"hidden\">\n                <td class=\"entry\" colspan=\"3\"><textarea rows=\"4\" cols=\"33\" wrap=\"hard\" id=\"task-result\"></textarea></td>\n            </tr>            \n            <tr class=\"hidden note\">\n                <td colspan=\"3\">This is the output that will be copied to the setup.yaml file.</td>\n            </tr>            \n            <tr class=\"hidden\">\n                <td colspan=\"3\" align=\"right\"><button id=\"configure-button\" onclick=\"jade_modules.code.copy_results('task-result')\">Copy</button></td>\n            </tr>            \n   \n        </tbody>\n    </table>\n    <div style=\"margin-top: 1rem;\" />\n\n\n    <table style=\"width:100%\" align=\"center\" cellspacing=\"0\" cellpadding=\"4\">\n        <!-- Creates the yaml statement to create a range task -->\n        <tbody>\n            <tr>\n                <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\" colspan=\"2\" class=\"section head\">Rule</td>\n                <td class=\"section drop\"><i  id=\"default-tool\" title=\"Hide or show this step.\" onclick=\"jade_modules.jet_engine.toggle_table(this);jade_modules.code.init_rule()\" class=\"fa-solid fa-chevron-down\"></i></td>\n            </tr>            \n            <tr class=\"hidden note\">\n                <td colspan=\"3\">Creates the yaml statement to create a task for a master.yaml file.</td>\n            </tr>            \n            <tr class=\"hidden\">\n                <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\"  class=\"label\" >Rule Type:</td>\n                <td class=\"entry\" colspan=\"2\" >\n                    <select  style=\"width:100%\" id=\"rule-type\" onchange=\"jade_modules.code.show_rule_options(this.value)\">\n                        <option value=\"simple\">Simple</option>\n                        <option value=\"range\" selected>Range</option>\n                        <option value=\"chart\">Chart</option>\n                    </select>\n                </td>\n            </tr>            \n            <tr class=\"hidden note\">\n                <td colspan=\"3\">This adds the range above into the list of ranges.</td>\n            </tr>    \n            \n            <tr class=\"hidden\">\n                <td colspan=\"3\" align=\"center\">\n                    <div id=\"rule-options\">\n                        <div id=\"range-rule-options\">\n                            <table border=\"0\">\n                                <tr><td colspan=\"3\">Weights</td></tr>\n                                    <tr><td>&nbsp;</td><td>Value:</td><td><input id=\"wt-val\" type=\"number\" size=\"4\" value=\"100\" min=\"0\" max=\"100\" />%</td></tr>\n                                    <tr id=\"row-ref-1\" style=\"display:none\"><td></td><td>Reference:</td><td><input id=\"wt-ref\" type=\"number\" size=\"4\" value=\"20\" min=\"0\" max=\"100\" />%</td></tr>\n                                    <tr id=\"row-ref-2\" style=\"display:none \"><td></td><td colspan=\"2\" id=\"list-ref\" class=\"opt-list\"></td></tr>\n                                    <tr id=\"row-fun-1\" style=\"display:none\"><td></td><td>Functions:</td><td><input id=\"wt-fun\" type=\"number\" size=\"4\" value=\"20\" min=\"0\" max=\"100\" />%</td></tr>\n                                    <tr id=\"row-fun-2\" style=\"display:none \"><td></td><td colspan=\"2\" id=\"list-fun\" class=\"opt-list\"></td></tr>\n                                    <tr id=\"row-cop\" style=\"display:none\"><td>&nbsp;</td><td>Copied:</td><td><input id=\"wt-cop\" type=\"number\" size=\"4\" value=\"20\" min=\"0\" max=\"100\" />%</td></tr>\n                                    \n                                \n                                    <tr><td colspan=\"3\" align=\"right\"><button onclick=\"jade_modules.code.scan_for_range_rule()\">Rescan</button></td></tr>\n                                    <tr><td colspan=\"3\" class=\"opt-list\"><input type=\"checkbox\" id=\"include-robustness\" /> Include Robustness Template</td></tr>\n                                </table>\n                        </div>    \n                        <div id=\"chart-rule-options\" style=\"display:none\">\n                            chart rule otpions\n                        </div>    \n                    </div>\n                </td>\n            </tr>            \n\n            <tr class=\"hidden\">\n                <td colspan=\"3\" align=\"right\"><button id=\"configure-button\" onclick=\"jade_modules.code.build_rule(tag('rule-type').value, 'rule-result')\">Build</button></td>\n            </tr>            \n\n            <tr class=\"hidden\">\n                <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\"  class=\"label\" colspan=\"3\" >Output:</td>\n            </tr>            \n            <tr class=\"hidden\">\n                <td class=\"entry\" colspan=\"3\"><textarea rows=\"4\" cols=\"33\" wrap=\"hard\" id=\"rule-result\"></textarea></td>\n            </tr>            \n            <tr class=\"hidden note\">\n                <td colspan=\"3\">This is the output that will be copied to the setup.yaml file.</td>\n            </tr>            \n            <tr class=\"hidden\">\n                <td colspan=\"3\" align=\"right\"><button id=\"configure-button\" onclick=\"jade_modules.code.copy_results('rule-result')\">Copy</button></td>\n            </tr>            \n   \n        </tbody>\n    </table>\n    <div style=\"margin-top: 1rem;\" />\n\n\n\n</div></div>\n"
    }
  },
  "public": true,
  "created_at": "2022-08-29T22:17:52Z",
  "updated_at": "2022-09-03T05:20:08Z",
  "description": "ATLAS Task Creation",
  "comments": 0,
  "user": null,
  "comments_url": "https://api.github.com/gists/766f9f7b76f9841a2ef8d5d72ef4d0ba/comments",
  "owner": {
    "login": "jade-addin",
    "id": 97227368,
    "node_id": "U_kgDOBcuSaA",
    "avatar_url": "https://avatars.githubusercontent.com/u/97227368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jade-addin",
    "html_url": "https://github.com/jade-addin",
    "followers_url": "https://api.github.com/users/jade-addin/followers",
    "following_url": "https://api.github.com/users/jade-addin/following{/other_user}",
    "gists_url": "https://api.github.com/users/jade-addin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jade-addin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jade-addin/subscriptions",
    "organizations_url": "https://api.github.com/users/jade-addin/orgs",
    "repos_url": "https://api.github.com/users/jade-addin/repos",
    "events_url": "https://api.github.com/users/jade-addin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jade-addin/received_events",
    "type": "User",
    "site_admin": false
  },
  "forks": [

  ],
  "history": [
    {
      "user": {
        "login": "nickballphd",
        "id": 39495054,
        "node_id": "MDQ6VXNlcjM5NDk1MDU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/39495054?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nickballphd",
        "html_url": "https://github.com/nickballphd",
        "followers_url": "https://api.github.com/users/nickballphd/followers",
        "following_url": "https://api.github.com/users/nickballphd/following{/other_user}",
        "gists_url": "https://api.github.com/users/nickballphd/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nickballphd/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nickballphd/subscriptions",
        "organizations_url": "https://api.github.com/users/nickballphd/orgs",
        "repos_url": "https://api.github.com/users/nickballphd/repos",
        "events_url": "https://api.github.com/users/nickballphd/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nickballphd/received_events",
        "type": "User",
        "site_admin": false
      },
      "version": "f5ab1e3721d9faacd7c8f1c12d7fc1a81320e72f",
      "committed_at": "2022-09-03T05:20:07Z",
      "change_status": {
        "total": 547,
        "additions": 547,
        "deletions": 0
      },
      "url": "https://api.github.com/gists/766f9f7b76f9841a2ef8d5d72ef4d0ba/f5ab1e3721d9faacd7c8f1c12d7fc1a81320e72f"
    }
  ],
  "truncated": false
}
