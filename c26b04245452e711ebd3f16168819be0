{
  "url": "https://api.github.com/gists/c26b04245452e711ebd3f16168819be0",
  "forks_url": "https://api.github.com/gists/c26b04245452e711ebd3f16168819be0/forks",
  "commits_url": "https://api.github.com/gists/c26b04245452e711ebd3f16168819be0/commits",
  "id": "c26b04245452e711ebd3f16168819be0",
  "node_id": "G_kwDOBcuSaNoAIGMyNmIwNDI0NTQ1MmU3MTFlYmQzZjE2MTY4ODE5YmUw",
  "git_pull_url": "https://gist.github.com/c26b04245452e711ebd3f16168819be0.git",
  "git_push_url": "https://gist.github.com/c26b04245452e711ebd3f16168819be0.git",
  "html_url": "https://gist.github.com/jade-addin/c26b04245452e711ebd3f16168819be0",
  "files": {
    "code.js": {
      "filename": "code.js",
      "type": "application/javascript",
      "language": "JavaScript",
      "raw_url": "https://gist.githubusercontent.com/jade-addin/c26b04245452e711ebd3f16168819be0/raw/7ebba5504897513d2cce7812d4816346144bd297/code.js",
      "size": 12731,
      "truncated": false,
      "content": "\n//logistic regression in excel using javascript\n\nlet predictor_names\nlet select_values\n//const form_data={}// takes the place of the from where users entered data on original webpage\nlet model_results={}\nasync function auto_exec(){\n  // set the tool css\n  Jade.set_css(gist_files('style.css'),\"naive-bayes\")\n  // place the tool html \n  tag(\"tools-body\").innerHTML=gist_files('wilcoxon-signed-rank.html')\n\n  // add the script : https://stdlib.io/docs/api/latest\n  const sc  = document.createElement('script');\n  sc.type=\"module\"\n  sc.innerHTML=`import wilcoxon from 'https://cdn.jsdelivr.net/gh/stdlib-js/stats-wilcoxon@esm/index.mjs';\n    window.wilcoxon = wilcoxon;`   \n  document.head.appendChild(sc);\n\n\n\n\n  // fill in values from last tool use\n  const tool_data = await jade.read_object_from_workbook(window.active_tool)\n  if(tool_data.outcome_values){\n    select_values = tool_data.outcome_values\n  }\n\n //console.log(\"select_values\",select_values)\n\n  for(const[key,value] of Object.entries(tool_data)){\n    if(tag(key)){\n      tag(key).value=value\n    }\n  }\n\n  // read the last run if there is one\n  model_results = await jade.read_object_from_workbook(window.active_tool+\"_model_result\")\n //console.log(\"model_results\",model_results)\n\n}\n\nfunction input_ids(classname=\"param\"){\n  //returns an array of all elements with the given classname\n  const retval=[]\n  for(const elem of document.getElementsByClassName(classname)){\n    retval.push(elem.id)\n  }\n  return retval\n}\n\n\nfunction save_inputs(){\n  const values_to_save=get_form_values(input_ids())\n  jade.save_object_to_workbook(\n    values_to_save     \n    , window.active_tool)\n}\n// function reset_model(){\n//   console.log(\"at reset model\")\n//   tag(\"predictor-names\").innerHTML=\"\"\n// }\nfunction new_data_sheet(){\n  tag(\"datarange\").value=\"\"\n  tag(\"predictors\").value=\"\"\n  tag(\"outcome\").value=\"\"\n  tag(\"predictor-names\").innerHTML=\"\"\n  \n}\nfunction new_data_range(){\n   tag(\"predictors\").value=\"\"\n   tag(\"outcome\").value=\"\"\n   tag(\"predictor-names\").innerHTML=\"\"\n  }\n\n\n\nfunction get_form_values(tag_names){\n  const obj={}\n  console.log(tag_names)\n  for(const tag_name of tag_names){\n    obj[tag_name]=tag(tag_name).value\n  }\n  return obj\n}\n\n\nfunction configure_example(){\n  Excel.run(async function(excel){\n    const sheetname=\"Example Data\"\n    let sheet = excel.workbook.worksheets.getItemOrNullObject(sheetname); \n    await excel.sync()\n    if (sheet.isNullObject) {\n      // sheet does not yet exist, create it\n      sheet=excel.workbook.worksheets.add(sheetname)\n    }else{\n      sheet.getUsedRange().delete()\n    }\n    sheet.activate()\n    await jade_modules.jet_engine.stream_to_range(\"https://jade-addin.github.io/data/patient.data\",sheet)\n    await excel.sync()\n    tag(\"datasheet\").value=\"Example Data\"\n    tag(\"sample\").value=\"A1:B10\"\n  })\n}\n\n\nasync function get_address(tag_name){\n  tag(tag_name).value=await jade_modules.jet_engine.selected_range_address()\n}\n\n\n// must be called from insde an excel block\nfunction format_table(sheet, start_row,start_column,rows,columns,row_headers=0, column_headers=1){\n  if(column_headers){\n    const col_head_range = sheet.getRangeByIndexes(start_row-1,start_column-1,column_headers,columns)\n    jade_modules.jet_engine.range_format(sheet, col_head_range, \"format/fill/color\",  \"Maroon\")\n    jade_modules.jet_engine.range_format(sheet, col_head_range, \"format/font/color\",  \"White\")\n    jade_modules.jet_engine.range_format(sheet, col_head_range, \"format/font/bold\",  true)\n        \n  }\n  if(row_headers){\n    const row_head_range = sheet.getRangeByIndexes(start_row-1+column_headers,start_column-1,rows-column_headers,row_headers)\n    jade_modules.jet_engine.range_format(sheet, row_head_range, \"format/fill/color\",  \"LightGray\")\n  }\n  const table_range = sheet.getRangeByIndexes(start_row-1,start_column-1,rows,columns)\n  jade_modules.jet_engine.border_around(sheet, table_range,\"Medium\",\"Continuous\",\"Black\")\n  \n}\nfunction collapse_array(array_data, allow_null=false){\n  //Takes all values from a two dimensional array and returns a one dimensional array of all values\n  const retval=[]\n  for(const row of array_data){\n    for(const col of row){\n      if(col===null){\n        if(allow_null){\n          retval.push(null)  \n        }\n      }else{\n        retval.push(col)\n      }\n      \n    }\n  }\n  return retval\n}\nasync function run_model(){\n  // save the defaults for the tool\n console.log(\"run model\")\n \n  save_inputs()\n\n\n  Excel.run(async function(excel){\n   //console.log('tag(\"outcome\")',tag(\"outcome\").value)\n\n    const sheet = excel.workbook.worksheets.getItem(tag(\"datasheet\").value)\n    const confidence = tag(\"confidence\").value\n    const alternative = tag(\"alternative\").value\n    const mu = tag(\"mu\").value\n    \n    const sample = sheet.getRange(tag(\"sample\").value)\n\n    let sheetname=\"Wilcoxon Signed Rank Results\"\n    sample.load(\"values\")\n    let out_sheet = excel.workbook.worksheets.getItemOrNullObject(sheetname); \n    try{\n      await excel.sync()\n    }catch(e){\n     //console.log(\"e\",e)\n      alert(\"Unable to initialize model. Check that the data field is a valid range and that the Data Sheet is a valid sheet name.\", \"Problem\")\n    }\n\n    //check confidence\n    if(isNaN(confidence) || confidence < 0 || confidence > 100){\n      alert('Confidence must be a number between 0 and 100.  This analysis stopped because the confidence level is ' + confidence + \".\", \"Problem\")\n      return  \n    }\n\n\n    // check sample\n    const sample_data = sample.values\n    console.log(\"sample_data\",sample_data)\n    if(sample_data[0].length>2){\n      console.log(\"sample_data[0].length\",sample_data[0].length)\n      alert('The Data field can only comprise one or two columns.', \"Problem\")\n      return  \n    }\n\n    const x=[]\n    const y=[]\n\n\n\n\n    for(const row of sample_data){\n      for(let c=0;c<sample_data.length;c++ ){\n        if(!isNaN(row[c]) && row[c]!==null && row[c]!==\"\" ){\n          if(c===0){\n            x.push(row[c])\n          }else if (c===1){\n            y.push(row[c])\n          }\n        }\n      }\n    }\n     \n    // same number of values in both columns\n    if(sample_data[0].length>1){\n      // there are two columns\n      if(x.length!==y.length){\n        alert('You must have the same number of numeric values in both columns.', \"Problem\")\n        return  \n      }\n    }\n\n\n    //we have some numeric data\n    if(x.length===0){\n      alert('No numeric data found.', \"Problem\")\n      return  \n    }\n\n    //Mu is a number\n    if(isNaN(mu)){\n      alert('Mu must be numeric.', \"Problem\")\n      return  \n    }\n\n    let label1=sample_data[0][0]\n    if(!isNaN(label1)){\n      label1=\"Column \" + get_column_letter(tag(\"sample\").value)\n    }\n    let label2=\"\"\n    if(sample_data[0].length>1){\n      label2=sample_data[0][1]\n      if(!isNaN(label2)){\n        label2=\"Column \" + get_column_letter(tag(\"sample\").value,\"last\")\n      }  \n    }\n\n\n   // passed all checks, ready to run the analysis   \n\n    model_results=wilcoxon_test(x, y, confidence, alternative, mu, tag(\"zero\").value, label1, label2)\n\n    \n    //console.log(form_data.output)\n    console.log(\"model_results\",model_results)\n\n    \n    if (out_sheet.isNullObject) {\n      // sheet does not yet exist, create it\n      out_sheet=excel.workbook.worksheets.add(sheetname)\n    }else{\n      out_sheet.getRange(\"1:11\").insert(Excel.InsertShiftDirection.down)\n    }\n\n   //console.log(\"predictor_names\",predictor_names.values)\n \n    out_sheet.activate()\n    //await excel.sync()\n\n\n    // header\n    out_sheet.getRange(\"B2:f2\").merge(true)\n    jade_modules.jet_engine.range_format(out_sheet, \"B2:f2\",\"format/fill/color\",  \"#000080\")\n    jade_modules.jet_engine.range_format(out_sheet, \"B2:f2\", \"format/font/color\",  \"White\")\n    jade_modules.jet_engine.range_format(out_sheet, \"B2:f2\", \"format/font/bold\",  true)\n    jade_modules.jet_engine.range_format(out_sheet, \"B2:f2\", \"format/horizontalAlignment\",  \"Center\") \n    out_sheet.getRange(\"B2\").values=model_results.method //sample_1[0]+ \" vs. \" + sample_2[0]\n\n\n    // analysis data\n    format_table(out_sheet,4,2,7,2,1,1)\n    format_table(out_sheet,4,5,6,2,1,1)\n    \n    // jade_modules.jet_engine.range_format(out_sheet, \"F9:H9\",\"format/fill/color\",  \"Gray\")\n    // jade_modules.jet_engine.range_format(out_sheet, \"B9:H\"+(9+predictors_in_model.length), \"numberFormat\",  \"0.000\")\n    // jade_modules.jet_engine.range_format(out_sheet, \"E9:E\"+(9+predictors_in_model.length), \"numberFormat\",  \"0.00000\")\n    // jade_modules.jet_engine.range_format(out_sheet, \"C3\", \"numberFormat\",  \"0.000\")\n    // jade_modules.jet_engine.range_format(out_sheet, \"C4\", \"numberFormat\",  \"0\")\n    // jade_modules.jet_engine.range_format(out_sheet, \"C5\", \"numberFormat\",  \"0.00000\")\n\n    out_sheet.getRange(\"B4:C10\").values=[\n       [\"Analysis Configuration\",null],\n       [\"Data Sheet\",tag(\"datasheet\").value],\n       [\"Data Range\",tag(\"sample\").value],\n       [\"Significance Level\",tag(\"confidence\").value+\"%\"],\n       [\"Alternative\",tag(\"alternative\").value],\n       [\"Mu\",tag(\"mu\").value],\n       [\"Zero Method\",tag(\"zero\").value]\n     ]\n     await excel.sync()\n     out_sheet.getRange(\"E4:F9\").values=[\n      [\"Analysis Result\",null],\n      [\"Method\",model_results.method.split(\" \")[0]],\n      [\"Test Statistic\",model_results.statistic],\n      [\"alpha\",model_results.alpha],\n      [\"p-Value\",model_results.pValue],\n      [\"Reject H0\",model_results.rejected],\n    ]\n    await excel.sync()\n\n    jade_modules.jet_engine.range_format(out_sheet, \"f7\", \"numberFormat\",  \"0.00\")\n    jade_modules.jet_engine.range_format(out_sheet, \"f8\", \"numberFormat\",  \"0.0000\")\n\n    // conclusion\n    // out_sheet.getRange(\"B11:f11\").merge(true)\n    // out_sheet.getRange(\"B11\").values=[[model_results.conclusion]]\n    // out_sheet.getRange(\"B11\").format.wrapText = true\n    \n    // jade_modules.jet_engine.range_format(out_sheet, \"b11\",\"format/wrapText\",  \"True\")\n\n    //out_sheet.getRange(\"11:11\").format.rowHeight=45\n    out_sheet.getRange(\"B1:F1\").format.autofitColumns()\n    await excel.sync()\n    await save_model_to_sheet(out_sheet, model_results, excel)\n\n    await excel.sync()\n    // not sure what the next line does\n    jade.save_object_to_workbook(model_results,window.active_tool+\"_model_result\")\n    })\n\n\n}\n\nasync function save_model_to_sheet(sheet, report, ctx){\n  const model_names=sheet.names\n  model_names.load(\"items\")\n  const name_list=[]\n  await ctx.sync()\n\n  if(model_names.items.length>0){\n    for(let y=model_names.items.length-1; y>=0 ;y--){\n      //console.log(\"deleting model name on sheet\",y)\n      model_names.items[y].delete()\n    }\n  }\n  \n  //write the model result\n  for(const[key,val] of Object.entries(report)){\n    console.log(key, val)\n    name_list.push(key)\n    if(typeof val===\"string\"){\n      sheet.names.add(key,val).visible=false\n    }else{\n      sheet.names.add(key,JSON.stringify(val)).visible=false\n    }\n    await ctx.sync()\n  }\n\n  for(id of input_ids()){// write the user config\n    if(!name_list.includes(id)){\n      if(typeof tag(id).value===\"string\"){\n        sheet.names.add(id,tag(id).value).visible=false\n      }else{\n        sheet.names.add(id,JSON.stringify(tag(id).value)).visible=false\n      }  \n    }\n  }\n\n}\n\nfunction wilcoxon_test(x, y, significance, alternative, mu, zero, label1, label2){\n\n  console.log(\"x\", \"y\", \"significance\", \"alternative\", \"mu\", \"zero\")\n  console.log(x, y, significance, alternative, mu, zero)\n\n\n  let result\n  const alpha = (100-significance)/100\n  if(y.length>0){\n    console.log(\"two sample\")\n    result = wilcoxon(x,y,{\n      alpha:alpha,\n      alternative:alternative,\n      mu:parseFloat(mu),\n      zero:zero\n    });\n  }else{\n    console.log(\"one sample\")\n    result = wilcoxon(x,{\n      alpha:alpha,\n      alternative:alternative,\n      mu:parseFloat(mu),\n      zero:zero\n    });\n\n  }\n  switch(alternative){\n\n  }\n  result.label1=label1\n  result.label2=label2\n  result.alpha = alpha\n  result.significance = parseFloat(significance)\n  result.alternative = alternative\n  result.mu = parseFloat(mu)\n  result.zero = zero\n  //result.conclusion = (result.rejected ? `At the ${result.significance}% significance level, we can conclude that median of the population reprenseted by the \"${label1}\" sample is greater than the median of the population represented by the \"${label2}\" sample.` \n  //                         : `At the ${result.significance}% significance level, we have do not ...` \n  //)\n  \n\n  return JSON.parse(JSON.stringify(result,null,2))\n}\n\nfunction get_column_letter(address, first_or_last=\"first\"){\n  const data =  address.split(\":\")\n  console.log(\"first_or_last\",first_or_last)\n  if(first_or_last===\"first\"){\n    return data[0].replace(/[0-9]/g, '').toUpperCase()\n  }else{\n    return data[1].replace(/[0-9]/g, '').toUpperCase()\n  }\n\n}"
    },
    "manifest.json": {
      "filename": "manifest.json",
      "type": "application/json",
      "language": "JSON",
      "raw_url": "https://gist.githubusercontent.com/jade-addin/c26b04245452e711ebd3f16168819be0/raw/f75196e34e31342761b5726d13b7296502749d3d/manifest.json",
      "size": 57,
      "truncated": false,
      "content": "[\n    \"code.js\",\"wilcoxon-signed-rank.html\",\"style.css\"\n]"
    },
    "stat.js": {
      "filename": "stat.js",
      "type": "application/javascript",
      "language": null,
      "raw_url": "https://gist.githubusercontent.com/jade-addin/c26b04245452e711ebd3f16168819be0/raw/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391/stat.js",
      "size": 0,
      "truncated": false,
      "content": ""
    },
    "style.css": {
      "filename": "style.css",
      "type": "text/css",
      "language": "CSS",
      "raw_url": "https://gist.githubusercontent.com/jade-addin/c26b04245452e711ebd3f16168819be0/raw/7068cde4d17e9f6c8158b5bf818f296d7fefcaa1/style.css",
      "size": 4,
      "truncated": false,
      "content": "/**/"
    },
    "wilcoxon-signed-rank.html": {
      "filename": "wilcoxon-signed-rank.html",
      "type": "text/html",
      "language": "HTML",
      "raw_url": "https://gist.githubusercontent.com/jade-addin/c26b04245452e711ebd3f16168819be0/raw/319a05d927b33b93299fcdaa1bb76f50a01759ee/wilcoxon-signed-rank.html",
      "size": 6313,
      "truncated": false,
      "content": "\n\n<div class=\"hidden\" id=\"jet-refresh\" style=\"margin-left: .5rem;\"><i title=\"Re-load this tool.\" onclick=\"jade_modules.jet_engine.select_page()\" class=\"fa-solid fa-arrows-rotate\"  cursor:pointer\"></i></div>    \n<div style=\"margin:1rem; text-align: center;\"><div style=\"display:inline-block; text-align: left;\">\n    <table style=\"width:100%\" align=\"center\" cellspacing=\"0\" cellpadding=\"4\">\n        <tbody>\n            <tr>\n                <td onclick=\"jade_modules.jet_engine.toggle_table(this.nextElementSibling.firstElementChild)\" colspan=\"2\" class=\"section head\">Example</td>\n                <td class=\"section drop\"><i  title=\"Hide or show this step.\" onclick=\"jade_modules.jet_engine.toggle_table(this)\" class=\"fa-solid fa-chevron-down\"></i></td>\n            </tr>            \n            <tr class=\"hidden\" style=\"background-color: white;\">\n                <td colspan=\"3\">Click the button below to build a sheet called \"Example Data\" and configure this tool to run an analysis based on the data.  You can <a href=\"https://atlas.myeducator.com/vimeo.html?id=735466668\">watch a video</a> walking you through the process and explaining the basics of the analysis.</td>\n            </tr>            \n            <tr class=\"hidden\">\n                <td colspan=\"3\" align=\"right\"><button id=\"configure-button\" onclick=\"jade_modules.code.configure_example()\">Configure Example</button></td>\n            </tr>            \n        </tbody>\n    </table>\n    <div style=\"margin-top: 1rem;\" />\n\n\n    <table style=\"width:100%\" align=\"center\" cellspacing=\"0\" cellpadding=\"4\">\n    <tbody>\n        <tr>\n            <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\" colspan=\"2\" class=\"section head\">Analysis</td>\n            <td class=\"section drop\"><i  title=\"Hide or show this step.\" onclick=\"jade_modules.jet_engine.toggle_table(this)\" class=\"fa-solid fa-chevron-up\"></i></td>\n        </tr>            \n        <tr class=\"hidden note\">\n            <td colspan=\"3\">Identify the data to be used for your analysis.</td>\n        </tr>            \n\n        <tr>\n            <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\"  class=\"label\" >Data Sheet:</td>\n            <td class=\"entry\"><input class=\"param\" type=\"text\" id=\"datasheet\" onchange=\"jade_modules.code.new_data_sheet()\" onfocus=\"jade_modules.jet_engine.default_selected_sheet(this)\"/></td>\n            <td><i title=\"Get the name of the active sheet.\" onclick=\"jade_modules.jet_engine.get_sheet_name('datasheet');jade_modules.code.new_data_sheet()\" class=\"fa-solid fa-file\" style=\"color:#777; cursor:pointer\"></i></td>\n        </tr>            \n        <tr class=\"hidden note\">\n            <td colspan=\"3\">This is the name of the worksheet that has the data you will use to build your prediction model</td>\n        </tr>            \n\n\n        <tr>\n            <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\"  class=\"label\" >Data:</td>\n            <td class=\"entry\"><input class=\"param\" type=\"text\" id=\"sample\" onchange=\"jade_modules.code.reset_model()\" onfocus=\"jade_modules.jet_engine.default_selected_range(this);jade_modules.code.reset_model()\"/></td>\n            <td><i title=\"Get the data columns from the selecte range.\" onclick=\"jade_modules.jet_engine.get_data_column_address('sample');jade_modules.code.reset_model()\" class=\"fa-solid fa-table\" style=\"color:#777; cursor:pointer\"></i></td>\n        </tr>            \n        <tr class=\"hidden note\">\n            <td colspan=\"3\">The range that holds the measurements for comparison.  If one column is selected, the anlaysis assumes each number represents a difference between the first and second measurement for a subject.  If two columns are provided, the analysis assumes the two columns hold before and after measurements. Non-numeric entries are ignored.</td>\n        </tr>            \n\n\n\n        <tr>\n            <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\"  class=\"label\" >Significance Level:</td>\n            <td><input class=\"param\" size=\"2\" type=\"text\" id=\"confidence\" value=\"95\"/></td>\n            <td>%</td>\n        </tr>            \n        <tr class=\"hidden note\">\n            <td colspan=\"3\">Significance level is used for deciding if we can reject the null hypothesis that the two samples are drawn from the same population.  It's usually a number fairly close to 100%, like 90%, 95% or 99%.</td>\n        </tr>            \n\n        <tr>\n            <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\"  class=\"label\" >Alternative:</td>\n            <td><select class=\"param\" id=\"alternative\">\n                <option value=\"two-sided\">Two-sided</option>\n                <option value=\"greater\">Greater</option>\n                <option value=\"less\">Less</option>\n            </select></td>\n            <td></td>\n        </tr>            \n        <tr class=\"hidden note\">\n            <td colspan=\"3\">Indicate whether the analysis is checking for a difference between the two measurements (two-sided), that the second measurement is greater than the first (Greater) or that the second is less than than the first (Less).</td>\n        </tr>            \n\n        <tr>\n            <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\"  class=\"label\" >Mu:</td>\n            <td><input class=\"param\" size=\"2\" type=\"text\" id=\"mu\" value=\"0\"/></td>\n            <td></td>\n        </tr>            \n        <tr class=\"hidden note\">\n            <td colspan=\"3\">A number indicating the hypthesized median differnce.</td>\n        </tr>            \n\n\n        <tr>\n            <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\"  class=\"label\" >Zero Method:</td>\n            <td><select class=\"param\" id=\"zero\">\n                <option value=\"wilcox\">Wilcox</option>\n                <option value=\"pratt\">Pratt</option>\n                <option value=\"zsplit\">z-split</option>\n            </select></td>\n            <td></td>\n        </tr>            \n        <tr class=\"hidden note\">\n            <td colspan=\"3\">Method governing how zero-differences are handled.</td>\n        </tr>            \n\n\n\n\n        <tr>\n            <td colspan=\"3\" align=\"right\"><button id=\"configure-button\" onclick=\"jade_modules.code.run_model()\">Run Analysis</button></td>\n        </tr>            \n    </tbody>\n</table>\n<div style=\"margin-top: 1rem;\" />\n\n\n</div></div>"
    }
  },
  "public": true,
  "created_at": "2023-05-09T16:54:16Z",
  "updated_at": "2023-05-09T22:44:05Z",
  "description": "JET: Wilcoxon Signed-Rank tool for JADE Excel Addin",
  "comments": 0,
  "user": null,
  "comments_url": "https://api.github.com/gists/c26b04245452e711ebd3f16168819be0/comments",
  "owner": {
    "login": "jade-addin",
    "id": 97227368,
    "node_id": "U_kgDOBcuSaA",
    "avatar_url": "https://avatars.githubusercontent.com/u/97227368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jade-addin",
    "html_url": "https://github.com/jade-addin",
    "followers_url": "https://api.github.com/users/jade-addin/followers",
    "following_url": "https://api.github.com/users/jade-addin/following{/other_user}",
    "gists_url": "https://api.github.com/users/jade-addin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jade-addin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jade-addin/subscriptions",
    "organizations_url": "https://api.github.com/users/jade-addin/orgs",
    "repos_url": "https://api.github.com/users/jade-addin/repos",
    "events_url": "https://api.github.com/users/jade-addin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jade-addin/received_events",
    "type": "User",
    "site_admin": false
  },
  "forks": [

  ],
  "history": [
    {
      "user": {
        "login": "theGove",
        "id": 24496385,
        "node_id": "MDQ6VXNlcjI0NDk2Mzg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/24496385?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theGove",
        "html_url": "https://github.com/theGove",
        "followers_url": "https://api.github.com/users/theGove/followers",
        "following_url": "https://api.github.com/users/theGove/following{/other_user}",
        "gists_url": "https://api.github.com/users/theGove/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/theGove/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/theGove/subscriptions",
        "organizations_url": "https://api.github.com/users/theGove/orgs",
        "repos_url": "https://api.github.com/users/theGove/repos",
        "events_url": "https://api.github.com/users/theGove/events{/privacy}",
        "received_events_url": "https://api.github.com/users/theGove/received_events",
        "type": "User",
        "site_admin": false
      },
      "version": "6245b4f49e5f023d02a9587bca290582b490fe8d",
      "committed_at": "2023-05-09T22:44:04Z",
      "change_status": {
        "total": 532,
        "additions": 532,
        "deletions": 0
      },
      "url": "https://api.github.com/gists/c26b04245452e711ebd3f16168819be0/6245b4f49e5f023d02a9587bca290582b490fe8d"
    }
  ],
  "truncated": false
}
