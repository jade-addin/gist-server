{
  "url": "https://api.github.com/gists/6e16e7521df65a93b17dd9b74c9161eb",
  "forks_url": "https://api.github.com/gists/6e16e7521df65a93b17dd9b74c9161eb/forks",
  "commits_url": "https://api.github.com/gists/6e16e7521df65a93b17dd9b74c9161eb/commits",
  "id": "6e16e7521df65a93b17dd9b74c9161eb",
  "node_id": "G_kwDOBcuSaNoAIDZlMTZlNzUyMWRmNjVhOTNiMTdkZDliNzRjOTE2MWVi",
  "git_pull_url": "https://gist.github.com/6e16e7521df65a93b17dd9b74c9161eb.git",
  "git_push_url": "https://gist.github.com/6e16e7521df65a93b17dd9b74c9161eb.git",
  "html_url": "https://gist.github.com/6e16e7521df65a93b17dd9b74c9161eb",
  "files": {
    "jet_engine.js": {
      "filename": "jet_engine.js",
      "type": "application/javascript",
      "language": "JavaScript",
      "raw_url": "https://gist.githubusercontent.com/jade-addin/6e16e7521df65a93b17dd9b74c9161eb/raw/0a1961d70356c59956cf8c63be5c543f7c01392a/jet_engine.js",
      "size": 21258,
      "truncated": false,
      "content": "const version=3\nfunction auto_exec(){\n ;console.log(\"===========================\",version,\"===========================\")\n //console.log(\"at jade_engine.autoexec -------------- 3 -------------\",my_gist_id())\n}\n\n\nasync function launch(gist_id, local_url){\n\n  // gist_id is the gist id of the tool set you are trying to launch\n //console.log(\"at launch\")\n //console.log(\"files from tool gist\",window.gist_files[gist_id])\n\n  window.local_url=local_url\n\n  for(const [file_name,contents] of Object.entries(window.gist_files[gist_id])){\n    if(file_name.slice(-5)===\".json\"){\n      // found the first json file, it must be the tools set\n        window.tool_groups = JSON.parse(contents)\n        window.tool_groups.gist_id=gist_id\n      break\n    }\n  }\n  Jade.open_canvas(\"tools\",gist_files('jet_tools.html'),false)\n  tag(\"tools-head\").appendChild(get_selector())\n  show_tool_group(0)\n}\n\nfunction get_selector(){\n   //console.log(\"tool_groups\",tool_groups)\n    window.tool_groups.tool_list={}\n    const sel = document.createElement(\"select\")\n    sel.className=\"panel-selector\"\n    sel.id=\"tool-selector\"\n  \n    for (let g=0;g<tool_groups.groups.length;g++){\n      const group=tool_groups.groups[g]\n     //console.log(\"group\",group.name)\n      if(group.tools){\n       //console.log(\"tool count\", group.tools.length )\n      }\n      const option = document.createElement(\"option\");\n      option.value = g\n      option.text = group.name\n      if(group.tools){\n        option.className=\"panel-selector-option tool-group\"\n      }else  {\n        option.className=\"panel-selector-option\"      \n      }\n      sel.appendChild(option);\n      if (group.tools){\n        for (let t=0;t<group.tools.length;t++){\n          const tool=group.tools[t]\n         //console.log(\"tool\",tool)\n          const option = document.createElement(\"option\");\n          option.value = g + \"-\" + t\n          option.text =  tool.name\n          option.className=\"panel-selector-option\"\n          sel.appendChild(option);    \n          window.tool_groups.tool_list[tool.gist_id]=[g,t]\n        }\n      }\n    }\n  \n  \n  \n    // for (let i=0; i<jade_panel_labels.length; i++) {\n    //   var option = document.createElement(\"option\");\n    //   option.value = Jade.panel_label_to_panel_name(jade_panel_labels[i]) \n    //  //console.log(\"-->\", option.value)\n    //   option.text = jade_panel_labels[i];\n    //   option.className=\"panel-selector-option\"\n    //   sel.appendChild(option);\n    // }\n    \n    sel.style.height=\"40px\"\n    sel.onchange = jade_modules.jet_engine.select_page\n    return sel\n  }\n  \n  function select_page(){\n   //console.log(\"selecting\",tag(\"tool-selector\"), )\n    const tool_id=tag(\"tool-selector\").value.split(\"-\")\n   //console.log(tool_id,)\n    if(tool_id.length===1){\n      //Tool Group\n      show_tool_group(tool_id[0])\n    }else{\n      // tool\n      show_tool(tool_id[0],tool_id[1])\n    }\n  }\n  \n  async function show_tool_group(group_index){\n   //console.log(\"showing group\",group_index)\n    const html=[\"<p>\" + window.tool_groups.groups[group_index].text + \"</p>\"]\n    const tools=window.tool_groups.groups[group_index].tools\n    if(tools){\n      html.push(\"<p>Tools in this group include the following:</p><ol>\")\n      for(let tool_index=0; tool_index<tools.length; tool_index++){\n        const tool = tools[tool_index]\n        html.push('<li style=\"margin-bottom:1rem\">')\n        html.push(`<b style=\"cursor:pointer\" onclick=\"jade_modules.jet_engine.show_tool(${group_index},${tool_index})\">`+tool.name+\":</b> \")\n        html.push(tool.text)\n        html.push(\"</li>\")\n      }\n      html.push(\"</ol>\")\n    }\n    tag(\"tools-body\").innerHTML='<div style=\"margin:1rem; text-align: center;\"><div style=\"display:block; text-align: left;\">' + html.join(\"\") + '</div><div id=\"intro-body\" style=\"display:inline-block; text-align: left;\"></div></div><div id=\"tools-foot\" style=\"margin:1rem;\"></div>'\n   //console.log(\"before if\",group_index)\n    if(group_index==0){// this is the introduction group\n     //console.log(\"after if\")\n      const history=await get_jet_history()\n     //console.log(\"jet_history\",history)\n      const html=[]\n      if(history.length===0){\n        html.push('Click \"Introduction\" above to select a tool.')\n      }else{\n        html.push(\"Recently used tools:<br><ol>\")\n        for(const entry of history){\n         //console.log(\"entry\",entry)\n          if(window.tool_groups.tool_list[entry]){// the gist id might not be here if the tool as been removed from the master list\n            const [group_index,tool_index]=window.tool_groups.tool_list[entry]\n            const tool=window.tool_groups.groups[group_index].tools[tool_index]\n            html.push('<li>')\n            html.push(`<span style=\"cursor:pointer\" onclick=\"jade_modules.jet_engine.show_tool(${group_index},${tool_index})\">`+tool.name+\"</span> \")\n            html.push(\"</li>\")\n          }\n        }\n      }\n      html.push(\"</ol>\")\n     //console.log(\"listing groups--------------------\")\n      html.push(\"<p>The tools available here are categorizded into the following groups:</p><ol>\")\n      const groups=window.tool_groups.groups\n      for(let group_index=1; group_index<groups.length; group_index++){\n        const group = groups[group_index]\n        html.push('<li style=\"margin-bottom:1rem\">')\n        html.push(`<b style=\"cursor:pointer\" onclick=\"jade_modules.jet_engine.show_tool_group(${group_index})\">`+group.name+\":</b> \")\n        html.push(group.text)\n        html.push(\"</li>\")\n      }\n      html.push(\"</ol>\")\n      html.push('<p onclick=\"jade.reset()\"><i class=\"fa-solid fa-circle-xmark\"></i> Close Excel Tools</p>')\n      tag(\"intro-body\").innerHTML=html.join(\"\")\n      if(jade_settings.workbook.load_gist_id === my_gist_id() ){\n        tag(\"tools-foot\").innerHTML='<p onclick=\"jade_modules.jet_engine.pin(this)\"><i class=\"fa-solid fa-trash-can\"></i> Un-pin \"Excel Tools\" from this workbook</p>'\n      }else{  \n        tag(\"tools-foot\").innerHTML='<p onclick=\"jade_modules.jet_engine.pin(this)\"><i class=\"fa-solid fa-thumbtack\"></i> Pin \"Excel Tools\" to this workbook</p>'\n      }\n    }\n  \n  }\n  \n  \n  function pin(elem){\n    // this is the gist id of the Excel tools gist\n   //console.log(elem.innerHTML)\n    if(elem.innerHTML.includes('trash')){\n      jade_settings.workbook.load_gist_id = \"\"\n      Jade.write_settings_to_workbook()\n      elem.innerHTML='<i class=\"fa-solid fa-thumbtack\"></i> Pin \"Excel Tools\" to this workbook'\n    }else{\n      jade_settings.workbook.load_gist_id = window.tool_groups.gist_id\n      Jade.write_settings_to_workbook()\n      elem.innerHTML='<i class=\"fa-solid fa-trash-can\"></i> Un-pin \"Excel Tools\" from this workbook'\n    }\n  }\n  \n  async function get_jet_history(){\n    let history = await jade.read_object_from_workbook(\"jet_history\")\n    if(history.tools_used){\n      history=history.tools_used\n    }else{\n      history=[]\n    }\n    return history\n  }\n  \n  \n  async function tool_used(gist_id){\n    let history = await jade.read_object_from_workbook(\"jet_history\")\n    if(history.tools_used){\n      history=history.tools_used\n    }else{\n      history=[]\n    }\n    //const jet_history = await jade.read_object_from_workbook(\"jet_history\")\n   //console.log(\"at tools used jet_history\",history)\n    // if(!jet_history.tools_used){\n    //   jet_history.tools_used=[]\n    // }\n    if(!history.includes(gist_id)){\n      history.push(gist_id)\n    }\n    await jade.save_object_to_workbook({tools_used:history}, \"jet_history\")\n   //console.log(\"after save\")\n  \n  }\n  \n  async function show_tool(group_index, tool_index){\n    tag(\"tool-selector\").value=`${group_index}-${tool_index}`\n    const gist_id = window.tool_groups.groups[group_index].tools[tool_index].gist_id\n    window.active_tool=gist_id\n    if( window.local_url){\n      await jade.load_gist_from_local_server(window.active_tool,undefined,window.local_url)\n      jade.show_element(\"jet-refresh\")\n    }else{\n      jade.load_gist(window.active_tool)\n    }\n    tool_used(gist_id)\n    \n  }\n\n  function toggle_next_row(the_td){\n    let next_icon=false\n    try{\n      next_icon = the_td.nextElementSibling.firstElementChild\n    }catch(e){\n      //failed to attach to next icon, nothing to do\n    }\n    if(next_icon && next_icon.className.includes(\"down\")){\n      //the whole table is collapsed, act like clicking on the down arrow\n      toggle_table(next_icon)\n    }else{\n      let elem=the_td.parentNode.nextSibling\n      while(elem.tagName!==\"TR\"){\n        elem=elem.nextSibling\n      }\n      jade.toggle_element(elem)\n    }\n  }\n\n  function toggle_table(the_icon){\n    let elem=the_icon\n    while(elem.tagName!==\"TR\"){\n      elem=elem.parentNode\n    }\n\n    if(the_icon.className.includes(\"fa-chevron-down\")){\n      // showing the content\n      while(elem.nextElementSibling){\n        elem=elem.nextElementSibling\n        if(!elem.className.includes(\"note\")){\n          jade.show_element(elem)\n        }\n      }\n      the_icon.className=\"fa-solid fa-chevron-up\"\n    }else{\n      //hiding the content\n      while(elem.nextElementSibling){\n        elem=elem.nextElementSibling\n        jade.hide_element(elem)\n      }\n      the_icon.className=\"fa-solid fa-chevron-down\"\n    }\n\n    \n  }\n\n  async function save_html_values(array_of_element_ids){\n    //used to write state to workbook\n    await jade.save_object_to_workbook(\n      get_form_values(array_of_element_ids)     \n      , window.active_tool\n    )\n      function get_form_values(tag_names){\n        const obj={}\n        for(const tag_name of tag_names){\n          obj[tag_name]=tag(tag_name).value\n        }\n        return obj\n      }\n\n  }\n  \n  async function restore_html_values(){\n    // analog to save_html_values.  It restores them to the html\n    const tool_data = await jade.read_object_from_workbook(window.active_tool)\n    //console.log(\"tool_data\",tool_data)\n    for(const[key,value] of Object.entries(tool_data)){\n      //console.log(key, value)\n      tag(key).value=value\n    }\n\n  }\n\n\n\n  async function get_multicell_address(tag_name,include_sheet_name=false){\n    const address=await selected_range_address()\n    if(address.includes(\":\")){\n      tag(tag_name).value=address\n    }else{\n      tag(tag_name).value=await get_current_region(include_sheet_name)\n    }\n    \n  }\n  \n  async function get_current_region(include_sheet_name=false){\n    let address=\"\"\n    await Excel.run(async (excel) => {\n      let rng = excel.workbook.getSelectedRange().getSurroundingRegion();\n      rng.load(\"address\");\n      rng.select()\n      await excel.sync();\n      if(include_sheet_name){\n        address=rng.address\n      }else{\n        address=rng.address.split(\"!\")[1]\n      }\n    })\n    return address\n  }\n  \n  \n  async function selected_range_address(){\n    let address=\"\"\n    await Excel.run(async (excel) => {\n      let rng = excel.workbook.getSelectedRange();\n      rng.load(\"address\");\n      await excel.sync();\n      address=rng.address.split(\"!\")[1]\n    })\n    return address\n  }\n\n  function default_selected_range(input,include_sheet_name=false){\n    // fills the input supplied with the selected range if the input is empty\n    if(!input.value){\n     //console.log(\"getting address of active cell\")\n      Excel.run(async (excel) => {\n        let rng = excel.workbook.getSelectedRange();\n        rng.load(\"address\");\n        await excel.sync();\n        if(include_sheet_name){\n          input.value = rng.address\n        }else{\n          input.value = rng.address.split(\"!\")[1]\n        }\n      })\n    }\n  }\n  \n  function get_data_column_address(tag_name){\n    // fills the input supplied with the selected range if the input is empty\n   //console.log(\"at get_data_column_address\")\n      Excel.run(async (excel) => {\n        let selection = excel.workbook.getSelectedRange()\n        let rng = selection.getEntireColumn().getIntersectionOrNullObject(selection.getSurroundingRegion());\n        rng.load(\"address\");\n        rng.select()\n        await excel.sync();\n        tag(tag_name).value=rng.address.split(\"!\")[1]\n    })\n \n  }\n  \n\n  function default_selected_sheet(input){\n    // fills the input supplied with the selected range if the input is empty\n    if(!input.value){\n     //console.log(\"getting name of selecte sheet\")\n      Excel.run(async (excel) => {\n        let sht = excel.workbook.worksheets.getActiveWorksheet();\n        sht.load(\"name\");\n        await excel.sync();\n        input.value = sht.name\n      })\n    }\n  }\n  \n  async function get_sheet_name(tag_name){\n    Excel.run(async (excel) => {\n      let sht = excel.workbook.worksheets.getActiveWorksheet();\n      sht.load(\"name\");\n      await excel.sync();\n      tag(tag_name).value = sht.name\n    })\n  }\n\n\n  function range_format(sheet, range_array, attribute,  value){\n    const header_color = \"Maroon\"\n\n    if(value === undefined){\n        // set the defaults for various attributes\n        switch(attribute) {\n            case\"numberFormat\":\n                value=\"_(* #,##0.00_);_(* (#,##0.00);_(* \\\"-\\\"??_);_(@_)\";\n                break;\n            case\"format/horizontalAlignment\":\n                value=\"Center\"\n                break;\n            case\"format/verticalAlignment\":\n                value=\"Center\"\n                break;\n            case\"format/textOrientation\":\n                value=-90\n                break;\n            case\"format/wrapText\":\n                value=true\n                break;\n            case\"format/fill/color\":\n                value=header_color\n                break;\n            case\"format/font/bold\":\n                value=true\n                break;\n            case\"format/font/color\":\n                value=\"white\"\n                break;\n            case\"format/font/italic\":\n                value=true\n                break;\n            case\"format/font/name\":\n                value=\"Arial Narrow\"\n                break;\n            case\"format/font/size\":\n                value=16\n                break;\n            case\"format/font/underline\":\n                value=\"none\"\n                break;\n            default:break;\n        }\n    }\n\n    switch(attribute) { // handle special values\n        case \"format/fill/color\":\n            switch(value){  case\"task_color\": value=task_color;break;\n                            case\"header_color\": value=header_color;break;\n            }break;\n        case \"format/font/color\":\n            switch(value){  case\"header_color\": value=header_font_color;break;\n            }break;\n        case \"numberFormat\":\n            switch(value){  case 0: value=\"0\";break;\n            }break;\n        default:break;\n      }\n\n      var att_list=attribute.split(\"/\");\n      var att = att_list.pop()\n      var pth = att_list.join(\"/\")\n\n\n    // now we are ready to set the value of the attribute\n    //for(var i=0;i<range_array.length;i++){\n\n    for(const rng of fix_array(range_array)){\n      let the_range=rng\n      if(typeof rng==='string'){the_range = sheet.getRange(rng)}\n    \n      if(pth.length==0){\n          var attr=the_range[attribute]=value\n      }else{\n          let attr = get_child_object(the_range, pth)\n          attr[att]=value;\n      }\n\n    }\n  }\n\n  function get_child_object(theObject, path) {\n    //getProp({\"format\":{\"font\":{\"bold\":true,\"italic\":false}}}, \"format/font/italic\")\n    //will return false\n    //console.log(theObject, path)\n    var parts = path.split(\"/\"),\n        idx = parts.shift(),\n        newPath = parts.join(\"/\"),\n        obj = theObject[idx];\n\n    if(parts.length === 0) {\n        return obj;\n\n    } else {\n      return get_child_object(obj, newPath);\n    }\n  }\n\n\nfunction fix_array(string_or_array){\n    //if  string_or_array is a string, return an array based on it\n    if(Array.isArray(string_or_array)){\n      return string_or_array;\n    }else{\n      return [string_or_array];\n    }\n}\n\nfunction border_around(sheet, range_array, border_weight, border_style, border_color){\n\n  if( border_weight === undefined) border_weight='Thin';\n  if( border_style === undefined) border_style='Continuous';\n  if( border_color === undefined) border_color='black';\n\n  range_array = fix_array(range_array);\n //console.log(\"range_array\",range_array)\n  for(const rng of range_array){\n    let the_range=rng\n    if(typeof rng==='string'){the_range = sheet.getRange(rng)}\n\n    the_range.format.borders.getItem('EdgeBottom').style = border_style;\n    the_range.format.borders.getItem('EdgeLeft').style = border_style;\n    the_range.format.borders.getItem('EdgeRight').style = border_style;\n    the_range.format.borders.getItem('EdgeTop').style = border_style;\n    the_range.format.borders.getItem('EdgeBottom').weight = border_weight;\n    the_range.format.borders.getItem('EdgeLeft').weight = border_weight;\n    the_range.format.borders.getItem('EdgeRight').weight = border_weight;\n    the_range.format.borders.getItem('EdgeTop').weight = border_weight;\n    the_range.format.borders.getItem('EdgeBottom').color = border_color;\n    the_range.format.borders.getItem('EdgeLeft').color = border_color;\n    the_range.format.borders.getItem('EdgeRight').color = border_color;\n    the_range.format.borders.getItem('EdgeTop').color = border_color;\n  }\n}\n\nfunction border(sheet, range_array, border_element, border_weight, border_style, border_color){\n\n  if(typeof border_weight == 'undefined') border_weight='Thin';\n  if(typeof border_style == 'undefined') border_style='Continuous';\n  if(typeof border_color == 'undefined') border_color='Black';\n\n  range_array = fix_array(range_array);\n  for(const rng of range_array){\n    let the_range=rng\n    if(typeof rng==='string'){the_range = sheet.getRange(rng)}\n  \n      switch (border_element){\n          case \"EdgeBottom\":\n              the_range.format.borders.getItem('EdgeBottom').style = border_style;\n              the_range.format.borders.getItem('EdgeBottom').weight = border_weight;\n              the_range.format.borders.getItem('EdgeBottom').color = border_color;\n              break;\n          case \"EdgeLeft\":\n              the_range.format.borders.getItem('EdgeLeft').style = border_style;\n              the_range.format.borders.getItem('EdgeLeft').weight = border_weight;\n              the_range.format.borders.getItem('EdgeLeft').color = border_color;\n\n              break;\n          case \"EdgeRight\":\n              the_range.format.borders.getItem('EdgeRight').style = border_style;\n              the_range.format.borders.getItem('EdgeRight').weight = border_weight;\n              the_range.format.borders.getItem('EdgeRight').color = border_color;\n\n              break;\n          case \"EdgeTop\":\n              the_range.format.borders.getItem('EdgeTop').style = border_style;\n              the_range.format.borders.getItem('EdgeTop').weight = border_weight;\n              the_range.format.borders.getItem('EdgeTop').color = border_color;\n              break;\n\n          case \"InsideHorizontal\":\n                  the_range.format.borders.getItem('InsideHorizontal').style = border_style;\n                  the_range.format.borders.getItem('InsideHorizontal').weight = border_weight;\n                  the_range.format.borders.getItem('InsideHorizontal').color = border_color;\n                  break;\n\n          case \"InsideVertical\":\n                  the_range.format.borders.getItem('InsideVertical').style = border_style;\n                  the_range.format.borders.getItem('InsideVertical').weight = border_weight;\n                  the_range.format.borders.getItem('InsideVertical').color = border_color;\n                  break;\n\n      }\n  }\n}\n\nfunction table_stream_to_excel_array(stream){\n  //data puublished by the \"data files\" JADE development tool\n  //rows are separated by \u001E which is String.fromCharCode(30)\n  //cells in a row are separated by \u001F which is String.fromCharCode(31)\n  \nconst us = String.fromCharCode(31)//unit separatpr\nconst rs = String.fromCharCode(30)//row spearatpr\nconst raw_data=stream.split(rs)\nconst data=[]\nconst columnFormats=raw_data.shift().split(us)\ndata.push(raw_data.shift().split(us))// put header row into data\nfor(const raw_row of raw_data){\n  const row=raw_row.split(us)\n  //console.log(row)\n  for(let u=0;u<row.length;u++){\n    if(!columnFormats[u].includes(\"@\")){\n      // it has no @ symbol, assume it is a number type.  If we are wrong, no big deal because any thing that won't convert to a number stays a string\n      if(!isNaN(row[u])){\n        try{\n        row[u]=parseFloat(row[u])\n        }catch(e){\n          ;console.log(e)\n          //swallow becuase if we can't convert to number, we leave it as a string\n        }\n      }\n    }\n  }\n  data.push(row)\n}\nreturn {columnFormats:columnFormats, values:data}\n}\n\nasync function stream_to_range(stream_url, sheet, start_row=0, start_col=0){\n  //https://jade-addin.github.io/data/titanic.stream\n  const response = await fetch(stream_url)\n  if(response.status===200){\n    const data = table_stream_to_excel_array(await response.text())\n   //console.log(\"data\",data)\n    //set the column data types\n    for(let x=0;x<data.columnFormats.length;x++){\n      sheet.getRangeByIndexes(start_row+1,start_col+x,data.values.length-1,1).numberFormat = data.columnFormats[x]\n    }\n    //set the data\n    const rng=sheet.getRangeByIndexes(start_row,start_col,data.values.length,data.values[0].length)\n    rng.values=data.values\n    return rng\n  }else{\n    console.error(\"An error happened requesting \" & stream_url)\n  }\n}"
    },
    "jet_tools.html": {
      "filename": "jet_tools.html",
      "type": "text/html",
      "language": "HTML",
      "raw_url": "https://gist.githubusercontent.com/jade-addin/6e16e7521df65a93b17dd9b74c9161eb/raw/5230fd962404b56f34d49905d655d2e81d7a985e/jet_tools.html",
      "size": 55,
      "truncated": false,
      "content": "<div id=\"tools-head\"></div>\n<div id=\"tools-body\"></div>"
    },
    "jet_tools.json": {
      "filename": "jet_tools.json",
      "type": "application/json",
      "language": "JSON",
      "raw_url": "https://gist.githubusercontent.com/jade-addin/6e16e7521df65a93b17dd9b74c9161eb/raw/e42dc1bbcea60d1c146893d25744553c8f76bff9/jet_tools.json",
      "size": 1534,
      "truncated": false,
      "content": "{\n    \"groups\":[\n        {   \"name\":\"Introduction\",\n            \"text\":\"The tools available here extend the functionality of Excel.\"\n        },\n        {   \"name\":\"Statistics\",\n            \"text\":\"This is the introduction text for stats\",\n            \"tools\":[\n            {\n                \"name\":\"Logistic Regression\",\n                \"text\":\"Compute a logistic regression\",\n                \"gist_id\":\"eb60bfa3375c631682282e1377fbb684\"\n            },\n            {\n                \"name\":\"Naive Bayes Analysis\",\n                \"text\":\"Compute a Naive Bayes Analysis\",\n                \"gist_id\":\"e7c158b8544aaacf2e2dce2a6acfcd52\"\n            },\n            {\n                \"name\":\"Cluster Analysis\",\n                \"text\":\"Compute a Cluster Analysis\",\n                \"gist_id\":\"0511e31d0a461f2c2b8d38b60bf81303\"\n            }\n            ]\n        },\n        {   \"name\":\"What-If Analysis\",\n            \"text\":\"What-If analysis allows you to examine how a spreadsheet model appear under different conditions\",\n            \"tools\":[\n                {\n                    \"name\":\"Goal Seek\",\n                    \"text\":\"Adjust a cell to try to find a particular result for a formula.\",\n                    \"gist_id\":\"e7ba294429166f2cf2aeaed622c0cc84\"\n                },\n                {\n                    \"name\":\"Scenario Manager\",\n                    \"text\":\"substitute input values for multiple cells\",\n                    \"gist_id\":\"162df2908f70f21dd33ad560bb0ae055\"\n                }\n            ]\n        \n        }\n    ]\n}"
    }
  },
  "public": true,
  "created_at": "2022-05-02T14:44:24Z",
  "updated_at": "2022-06-01T23:15:30Z",
  "description": "JET Engine: processor for JET tool sets",
  "comments": 0,
  "user": null,
  "comments_url": "https://api.github.com/gists/6e16e7521df65a93b17dd9b74c9161eb/comments",
  "owner": {
    "login": "jade-addin",
    "id": 97227368,
    "node_id": "U_kgDOBcuSaA",
    "avatar_url": "https://avatars.githubusercontent.com/u/97227368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jade-addin",
    "html_url": "https://github.com/jade-addin",
    "followers_url": "https://api.github.com/users/jade-addin/followers",
    "following_url": "https://api.github.com/users/jade-addin/following{/other_user}",
    "gists_url": "https://api.github.com/users/jade-addin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jade-addin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jade-addin/subscriptions",
    "organizations_url": "https://api.github.com/users/jade-addin/orgs",
    "repos_url": "https://api.github.com/users/jade-addin/repos",
    "events_url": "https://api.github.com/users/jade-addin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jade-addin/received_events",
    "type": "User",
    "site_admin": false
  },
  "forks": [

  ],
  "history": [
    {
      "user": {
        "login": "theGove",
        "id": 24496385,
        "node_id": "MDQ6VXNlcjI0NDk2Mzg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/24496385?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theGove",
        "html_url": "https://github.com/theGove",
        "followers_url": "https://api.github.com/users/theGove/followers",
        "following_url": "https://api.github.com/users/theGove/following{/other_user}",
        "gists_url": "https://api.github.com/users/theGove/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/theGove/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/theGove/subscriptions",
        "organizations_url": "https://api.github.com/users/theGove/orgs",
        "repos_url": "https://api.github.com/users/theGove/repos",
        "events_url": "https://api.github.com/users/theGove/events{/privacy}",
        "received_events_url": "https://api.github.com/users/theGove/received_events",
        "type": "User",
        "site_admin": false
      },
      "version": "7812ae87c53aa069bcdebce02f32d4f888ae1595",
      "committed_at": "2022-06-01T23:15:28Z",
      "change_status": {
        "total": 663,
        "additions": 663,
        "deletions": 0
      },
      "url": "https://api.github.com/gists/6e16e7521df65a93b17dd9b74c9161eb/7812ae87c53aa069bcdebce02f32d4f888ae1595"
    }
  ],
  "truncated": false
}
