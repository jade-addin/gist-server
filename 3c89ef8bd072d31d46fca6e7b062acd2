{
  "url": "https://api.github.com/gists/3c89ef8bd072d31d46fca6e7b062acd2",
  "forks_url": "https://api.github.com/gists/3c89ef8bd072d31d46fca6e7b062acd2/forks",
  "commits_url": "https://api.github.com/gists/3c89ef8bd072d31d46fca6e7b062acd2/commits",
  "id": "3c89ef8bd072d31d46fca6e7b062acd2",
  "node_id": "G_kwDOBcuSaNoAIDNjODllZjhiZDA3MmQzMWQ0NmZjYTZlN2IwNjJhY2Qy",
  "git_pull_url": "https://gist.github.com/3c89ef8bd072d31d46fca6e7b062acd2.git",
  "git_push_url": "https://gist.github.com/3c89ef8bd072d31d46fca6e7b062acd2.git",
  "html_url": "https://gist.github.com/3c89ef8bd072d31d46fca6e7b062acd2",
  "files": {
    "code.js": {
      "filename": "code.js",
      "type": "application/javascript",
      "language": "JavaScript",
      "raw_url": "https://gist.githubusercontent.com/jade-addin/3c89ef8bd072d31d46fca6e7b062acd2/raw/a7840ba11c0ed41d788785bc7f6fa3a2220f1db0/code.js",
      "size": 14712,
      "truncated": false,
      "content": "//Query Excel Data\nlet db = null\nwindow.local_query_data_loded=false\n\nasync function auto_exec(){\n  // set the tool css\n  Jade.set_css(gist_files('style.css'),\"naive-bayes\")\n  // place the tool html \n  tag(\"tools-body\").innerHTML=gist_files('query-excel-data.html')\n  // fill in values from last tool use\n  await jade_modules.jet_engine.restore_html_values()\n\n  add_library(\"https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.6.2/sql-wasm.js\",\"sha512-L6uhvfNcUH0q/Y1IWnX/IlweC3hvYNIwSsvwWL2b2V7692tnGPxQwwDEpR8kFnUa0VSSNalR3FnEF4gr4jti+A==\",\"anonymous\",\"no-referrer\")\n  const filename = \"sql-wasm.js\"\n\n  tag(\"sql\").addEventListener(\"keypress\", function(event) {\n    if (event.key === \"\\n\" && event.ctrlKey) {\n      run_query(tag('sql').value)\n    }\n  });\n  initialize_sql_engine()\n}\n\nfunction initialize_sql_engine(){\n  // it takes a couple of seconds for initSqlJs to be available after the call to load the library.\n  // this function keeps trying to load if it fails.\n  try{\n    initSqlJs({ locateFile: filename => `https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.6.2/sql-wasm.wasm` }).then(function(SQL){\n      db = new SQL.Database();\n    });\n    scan_tables()\n  }catch(e){\n    setTimeout(function() {initialize_sql_engine()}, 1000);\n  }\n}\n\nfunction button_handler(button){\n  jade_modules.code[button.id]()\n}\n\nfunction save_inputs(){\n  jade_modules.jet_engine.save_html_values([\"sql\",\"sheet-name\"])\n}\nfunction re_scan(){\n  if(tag(\"table-list\").parentNode.className!==\"hidden\"){\n    // the table list was just shown, rescan\n    scan_tables()\n  }\n}\n\nasync function scan_tables(){\n  const table_structure = await jade.read_object_from_workbook(window.active_tool + \"_table_structure\")\n //console.log(\"at scan tables\", table_structure)\n\n  await Excel.run(async function(excel) {\n    const table_objects = excel.workbook.tables;\n    table_objects.load('items');\n    await excel.sync();\n    \n    // load the columns\n    for(let x=0;x<table_objects.items.length;x++){\n      table_objects.items[x].columns.load(\"items,count\")\n    }\n    await excel.sync();\n\n    const html=[]\n    for(let t=0;t<table_objects.items.length;t++){\n      const table = table_objects.items[t]\n      //console.log(table.name, table.columns.count)\n      const col_html=[]\n      for(let c=0;c<table_objects.items[t].columns.count;c++){\n        const column = table.columns.items[c]\n        //console.log(\"\",column.name)\n        //console.log(\"\",column.values)\n        let checked=\"\"\n        if(table_structure[table.name]===undefined || table_structure[table.name].columns.includes(column.name)){\n          checked=\" checked\"\n        }\n        col_html.push(`<input onclick=\"jade_modules.code.column_clicked(this)\" type=\"checkbox\"${checked} id=\"column-${t}-${c}\"><span onclick=\"jade_modules.code.insert_column_name(event)\">${column.name}</span><br />`)\n      }\n      let checked=\"\"\n      if(table_structure[table.name]===undefined || table_structure[table.name].checked){\n        checked=\" checked\"\n      }\n\n      html.push(`<div style=\"margin-left:1rem\"><input type=\"checkbox\"${checked} id=\"table-${t}\"><span class=\"clickable\" id=\"table_name-${t}\" onclick=\"jade_modules.code.show_fields(event)\">`)\n      html.push(table.name)\n      html.push(`</span> <i style=\"font-size:.8rem;color:#777; cursor:pointer\" title=\"rename table\" class=\"fa-solid fa-pen-to-square\" onclick=\"jade_modules.code.edit_table_name('${t}')\"></i> <i style=\"font-size:.8rem;color:#777; cursor:pointer\" title=\"load this table for querying\" class=\"fa-solid fa-database\" onclick=\"jade_modules.code.table_to_sqlite('${t}')\"></i><div id=\"columns-${t}\" class=\"hidden\" style=\"margin-left:1rem\">`)\n      html.push(col_html.join(\"\"))\n      html.push('</div></div>')\n    }\n    if(html.length===0){\n      // we did not find any tables, display a message insted\n      html.push('Could not find any tables in this workbook.  This tool will query data that has been set up as an <a href=\"https://support.microsoft.com/en-us/office/overview-of-excel-tables-7ab0bb7d-3a9e-4b56-a3c9-6c94334e492c\">Excel table</a>.')\n      jade.hide_element(\"load-data\")\n    }else{\n      jade.show_element(\"load-data\")\n    }\n    tag(\"table-list\").innerHTML=html.join(\"\")\n    \n  })\n\n}\n\nasync function get_sheet_names(lowercase=true){\n  const sheet_names = []\n  await Excel.run(async function(excel) {\n    const sheet_objects = excel.workbook.worksheets;\n    sheet_objects.load('items')\n    await excel.sync()\n    for(let x=0;x<sheet_objects.items.length;x++){\n      if(lowercase){\n        sheet_names.push(sheet_objects.items[x].name.toLowerCase())\n      }else{\n        sheet_names.push(sheet_objects.items[x].name)\n      }\n    }\n  })\n  return sheet_names\n}\n\nasync function get_table_names(lowercase=true){\n  const table_names = []\n  await Excel.run(async function(excel) {\n    const table_objects = excel.workbook.tables;\n    table_objects.load('items')\n    await excel.sync()\n    for(let x=0;x<table_objects.items.length;x++){\n      if(lowercase){\n        table_names.push(table_objects.items[x].name.toLowerCase())\n      }else{\n        table_names.push(table_objects.items[x].name)\n      }\n    }\n  })\n  return table_names\n}\n\n\nasync function rename_table(elem, current_name){\n  const table_names = await get_table_names()\n  if(table_names.includes(elem.value.toLowerCase())){\n    alert(`There is already a table named ${elem.value}. Please Choose a differnt name.`,\"Error\")\n    return\n  }\n\n  Excel.run(async function(excel){\n    const table=excel.workbook.tables.getItem(current_name)\n    table.name=elem.value\n    try{\n      await excel.sync()\n      elem.parentNode.innerHTML = elem.value\n    }catch(e){\n      alert(\"Unable to change table name. \" + e.message, \"Error\")\n     //console.log(e)\n    }\n    \n  })\n}\n\nfunction un_edit_table_name(current_name){\n //console.log(\"at un_edit\",tag(\"rename_table\"))\n  if(tag(\"rename_table\") && tag(\"rename_table\").value===current_name){\n    tag(\"rename_table\").parentNode.innerHTML = current_name\n  }\n}\n\nfunction edit_table_name(table_number){\n //console.log(\"at edit_table_name\", table_number)\n //console.log(tag(\"table_name-\" + table_number))\n  \n  if(tag(\"table_name-\" + table_number).innerHTML.includes(\"<input\")){\n   //console.log(\"already editing\")\n  }else{\n    const current_name=tag(\"table_name-\" + table_number).innerHTML\n      tag(\"table_name-\" + table_number).innerHTML=`<input id=\"rename_table\" value=\"${current_name}\" size=\"10\" onblur=\"jade_modules.code.un_edit_table_name('${current_name}')\" onchange=\"jade_modules.code.rename_table(this, '${current_name}')\">`\n    tag(\"rename_table\").focus()\n  }\n}\n\n\n// async function remove_table_from_sqlite(id){\n//   const table_name=tag(\"table_name-\"+id).innerHTML\n//     db.run(`drop table if exists \"${table_name}\"`);  \n// }\n\n\nasync function table_to_sqlite(id, include){\n  window.local_query_data_loded=true\n  const table_name=tag(\"table_name-\"+id).innerHTML\n  const columns=[]\n  const column_names=[]\n  for(const elem of tag(\"columns-\"+id).childNodes){\n    if(elem.tagName===\"INPUT\" && elem.checked){\n      columns.push(parseInt(elem.id.split(\"-\")[2]))\n      column_names.push(elem.nextSibling.textContent)\n    }\n  }\n\n  //console.log(\"at table_to_sqlite\", id ,columns)\n  const ret_obj={}\n  ret_obj[table_name]={\n    columns:column_names,\n    checked:include\n  }\n\n  if(!include){\n    db.run(`drop table if exists \"${table_name}\"`);  \n    return ret_obj\n  }\n\n  await Excel.run(async (context) => {\n    const table=context.workbook.tables.getItem(table_name)\n    table.load(\"columns\")\n    await context.sync()\n    //console.log(table.columns)\n    //table.columns.load(\"items\")\n    const ranges=[]\n    for(const column of columns){\n      ranges.push(table.columns.items[column].getRange())\n      ranges[ranges.length-1].load(\"text\")\n    }\n    await context.sync()\n   \n\n    const create_table=['create table \"']\n    create_table.push(table_name)\n    create_table.push('\" (')\n    const fields=[]\n    const q=[]\n    for(const range of ranges){\n      fields.push(`\"${range.text[0][0]}\" boolean`)\n      q.push(\"?\")\n    }\n    create_table.push(fields.join(\", \"))\n    create_table.push(\")\")\n    //console.log(create_table.join(\"\"))\n    db.run(\"begin transaction\")\n    db.run(`drop table if exists \"${table_name}\"`);\n    db.run(create_table.join(\"\"));\n\n    // set up data for insert\n    \n    for(let x=1;x<ranges[0].text.length;x++){\n      const one_row=[]\n      for(const range of ranges){\n        one_row.push(fixNull(range.text[x].shift()))\n      }\n      db.run(`INSERT INTO \"${table_name}\" VALUES (${q.join(\",\")})`, one_row);\n      \n    }\n\n\n    db.run(\"commit\")\n    \n  });\n  return ret_obj\n}\n\n\nasync function load_data(){\n  const table_structure={}\n  for(const elem of tag(\"table-list\").getElementsByTagName(\"span\")){\n    const table_num = elem.id.split(\"-\")[1]\n    if(elem.id && elem.id.includes(\"table_name-\") && tag(\"table-\" + table_num)){\n      for(const [key,val] of Object.entries(await table_to_sqlite(table_num,tag(\"table-\" + table_num).checked))){\n        table_structure[key]=val\n      }\n    }\n  }\n\n  jade.save_object_to_workbook(\n    table_structure\n    , window.active_tool + \"_table_structure\")\n  \n}\n\nfunction fixNull(val){\n  if(val===\"\"){return null}\n  return val\n}\n\nfunction column_clicked(box){\n  const id=box.id.split(\"-\")[1]\n //console.log(\"id\", id)\n  tag(\"table-\"+id).checked=true\n}\n\n\nfunction add_library(url, integrity, crossorigin, referrerpolicy){\n  // adds a JS library to the head section of the HTML sheet\n  const library = document.createElement('script');\n  library.setAttribute('src',url);\n  if(integrity){library.setAttribute('integrity',integrity)}\n  if(crossorigin){library.setAttribute('crossorigin',crossorigin)}\n  if(referrerpolicy){library.setAttribute('referrerpolicy',referrerpolicy)}\n //console.log(\"library\",library)\n  document.head.appendChild(library);\n}\n\n\nasync function run_query(sql){\n  if(!window.local_query_data_loded)(await load_data())\n  save_inputs()\n  jade.hide_element(\"sql-error\")\n  jade.hide_element(\"sql-message\")\n  execute(sql)\n}\n\nasync function execute(sql){\n\n  let it = db.iterateStatements(sql);\n  let sheet_num=0\n\n  try {\n      for (let stmt of it) {\n        //console.log(stmt)\n          values=[]\n          while (stmt.step()) {\n            values.push(stmt.get())\n          }\n        values.unshift(stmt.getColumnNames())\n        let sheet_name=tag(\"sheet-name\").value\n        if(sheet_num>0){\n          sheet_name += \"_\"+sheet_num\n        }\n        sheet_num++\n        array_to_table(sheet_name, values, 1, 1)\n      }\n  } catch(e) {\n      tag(\"sql-error\").innerHTML=`The SQL string \"${it.getRemainingSQL()}\" contains the following ${e}`\n      jade.show_element(\"sql-error\")\n      tag(\"sql-error\").scrollIntoView()\n      return\n  }\n\n\n}\n\nasync function array_to_table(sheet_name, range_data, start_row, start_col){\n  ////console.log(\"sheet_name\", sheet_name)\n  ////console.log(\"range_data\", range_data)\n\n  // pre-process.  as of May 2022, only looking for dates\n  const date_columns=[]\n  const date_time_columns=[]\n  for(let c=0;c<range_data[0].length;c++){\n    for(let r=1;r<range_data.length;r++){\n      if(range_data[r][c]){\n        if((range_data[r][c].length===24 && range_data[r][c].match(/(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.000Z)/g))\n            || (range_data[r][c].length===19 && range_data[r][c].match(/(\\d{4}-\\d{2}-\\d{2}\\s\\d{2}:\\d{2}:\\d{2})/g))){//check for date time\n            date_time_columns.push(c)\n          // modify the data so excel will read it as a date\n          for(let rr=r;rr<range_data.length;rr++){\n            if(range_data[rr][c]){\n              range_data[rr][c]=range_data[rr][c].substring(0,10) + \" \" + range_data[rr][c].substring(11,19)\n            }\n          }\n        }else if(range_data[r][c].length===10 && range_data[r][c].match(/(\\d{4}-\\d{2}-\\d{2})/g)){//check for date only\n          date_columns.push(c)\n        }\n        break// once we have found data, no need to keep looking\n      }\n    }\n  }\n\n\n\n  await Excel.run(async function(excel){\n    if(sheet_name){\n      var sheet = excel.workbook.worksheets.getItemOrNullObject(sheet_name); \n    }else{\n      var sheet = excel.workbook.worksheets.add(); \n    }\n    await excel.sync()\n    \n    if (!sheet.isNullObject) { \n      sheet.delete()\n    }  \n    sheet = excel.workbook.worksheets.add(sheet_name)\n\n    // set formats for dates so they can be read by local query\n    for(const col of date_time_columns){\n      sheet.getRangeByIndexes(start_row,col,range_data.length-1,1).numberFormat=\"yyyy-mm-dd hh:mm:ss\"\n    }\n    for(const col of date_columns){\n      sheet.getRangeByIndexes(start_row,col,range_data.length-1,1).numberFormat=\"yyyy-mm-dd\"\n    }\n    \n\n    await excel.sync()\n    sheet.activate()\n\n    const range=sheet.getRangeByIndexes(start_row-1,start_col-1,range_data.length, range_data[0].length)\n    range.values=range_data\n    range.format.autofitColumns()\n    const the_table = sheet.tables.add(range, true /*hasHeaders*/);\n    if(sheet_name){\n      let new_name = await get_table_name(sheet_name)\n      new_name=new_name.split(\" \").join(\"_\")\n      the_table.name=new_name\n    }\n    sheet.getRange(\"A1\").select\n    await excel.sync()\n    //console.log(\"the_table\",the_table)\n  })\n  \n}\n\nasync function get_table_name(requested_name){\n  const table_names = await get_table_names()\n  if(table_names.includes(requested_name.toLowerCase())){\n    // tablename already exists. check for numeric suffix\n    let numeric_suffix=1\n    while(table_names.includes(requested_name.toLowerCase()+\"_\"+numeric_suffix)){\n      numeric_suffix++\n    }\n    return requested_name + \"_\" + numeric_suffix\n  }else{\n    // there is no conflict.  use requested name\n    return requested_name\n  }\n}\n\nasync function get_sheet_name(requested_name){\n  const sheet_names = await get_sheet_names()\n  if(sheet_names.includes(requested_name.toLowerCase())){\n    // tablename already exists. check for numeric suffix\n    let numeric_suffix=1\n    while(sheet_names.includes(requested_name.toLowerCase()+\"_\"+numeric_suffix)){\n      numeric_suffix++\n    }\n    return requested_name + \"_\" + numeric_suffix\n  }else{\n    // there is no conflict.  use requested name\n    return requested_name\n  }\n}\nfunction junk(){\n  typeInTextarea(\"lol\",tag(\"sql\"))\n}\n\nfunction typeInTextarea(newText, el = document.activeElement) {\n  el.setRangeText(newText, el.selectionStart, el.selectionEnd,\"end\")\n  el.focus()\n\n}\n\nfunction insert_column_name(event){\n  if(event.ctrlKey){\n    typeInTextarea(event.srcElement.innerHTML,tag(\"sql\"))\n  }\n}\n\nfunction show_fields(event){\n  const elem=event.srcElement\n  if(event.ctrlKey){\n    typeInTextarea(elem.innerHTML,tag(\"sql\"))\n  }else{\n    if(!elem.innerHTML.includes(\"<input\")){\n      const id=elem.id.split(\"-\")[1]\n      jade.toggle_element(\"columns-\"+id)\n    }\n  }\n\n}\n"
    },
    "manifest.json": {
      "filename": "manifest.json",
      "type": "application/json",
      "language": "JSON",
      "raw_url": "https://gist.githubusercontent.com/jade-addin/3c89ef8bd072d31d46fca6e7b062acd2/raw/1097af054a386edea91e47c49df0f170dafb6cb3/manifest.json",
      "size": 53,
      "truncated": false,
      "content": "[\n    \"code.js\",\"query-excel-data.html\",\"style.css\"\n]"
    },
    "query-excel-data.html": {
      "filename": "query-excel-data.html",
      "type": "text/html",
      "language": "HTML",
      "raw_url": "https://gist.githubusercontent.com/jade-addin/3c89ef8bd072d31d46fca6e7b062acd2/raw/1c680ab66a4e62a1cddbba50db3c70c829dcedb5/query-excel-data.html",
      "size": 3828,
      "truncated": false,
      "content": "<div class=\"hidden\" id=\"jet-refresh\" style=\"margin-left: .5rem;\"><i title=\"Re-load this tool.\" onclick=\"jade_modules.jet_engine.select_page()\" class=\"fa-solid fa-arrows-rotate\"  cursor:pointer\"></i></div>    \n<div style=\"margin:1rem; text-align: center;\"><div style=\"display:inline-block; text-align: left;\">\n<table style=\"width:100%\" align=\"center\" cellspacing=\"0\" cellpadding=\"4\">\n    <tbody>\n        <tr>\n            <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\" colspan=\"2\" class=\"section head\">1. Load Data</td>\n            <td class=\"section drop\"><i  title=\"Hide or show this step.\" onclick=\"jade_modules.jet_engine.toggle_table(this);jade_modules.code.re_scan()\" class=\"fa-solid fa-chevron-up\"></i></td>\n        </tr>            \n        <tr class=\"hidden note\">\n            <td colspan=\"3\">Indicate which tables hold the data you want to query and speficy the columns to use. Close and re-open this section to re-scan this workbook for tables to include.</td>\n        </tr>            \n        <tr>\n            <td id=\"table-list\" colspan=\"3\"></td>\n        </tr>  \n        <tr id=\"load-data\">\n            <td colspan=\"3\"  align=\"right\">\n                <button onclick=\"jade_modules.code.load_data()\">Load Data</button><br>\n            </td>\n        </tr>  \n        \n    </tbody>\n</table>\n<div style=\"margin-top: 1rem;\" />\n<table  style=\"width:100%\" align=\"center\" cellspacing=\"0\" cellpadding=\"4\">\n    <tbody>\n        <tr>\n            <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\" colspan=\"2\" class=\"section head\">2. Query Data</td>\n            <td class=\"section drop\"><i  title=\"Hide or show this step.\" onclick=\"jade_modules.jet_engine.toggle_table(this)\" class=\"fa-solid fa-chevron-up\"></i></td>\n        </tr>            \n        <tr class=\"hidden note\">\n            <td colspan=\"3\">Specify data desired and import.</td>\n        </tr>            \n        <tr>\n            <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\"  class=\"label\" >Result Sheet:</td>\n            <td><input size=\"6\" type=\"text\" id=\"sheet-name\" value=\"Result\"/></td>\n            <td><i title=\"Get the name of the active sheet.\" onclick=\"jade_modules.jet_engine.get_sheet_name('sheet-name')\" class=\"fa-solid fa-file\" style=\"color:#777; cursor:pointer\"></i></td>\n        </tr>            \n        <tr class=\"hidden note\">\n            <td colspan=\"3\">This is the name of the worksheet that you want to create to hold the reqults of your query.  Be careful; all data will be erased from this sheet when the query is executed.  Leave this blank to create a sheet with an arbitrary name.</td>\n        </tr>            \n        <tr>\n            <td colspan=\"3\" onclick=\"jade_modules.jet_engine.toggle_next_row(this)\"  class=\"label\" >SQL:</td>\n        </tr>            \n        <tr class=\"hidden note\">\n            <td colspan=\"3\">Enter a <a href=\"https://docs.data.world/documentation/sql/concepts/basic/intro.html\">Structured Query Language</a> statement to specify the data you want to import.  Leave blank to select all records from a table with the name entered in the \"Data Sheet\" field above.</td>\n        </tr>            \n        <tr>\n            <td colspan=\"3\"> <textarea style=\"width:100%;height:5rem\" id=\"sql\">SELECT * FROM employee</textarea></td>\n        </tr>            \n        <tr>\n            <td colspan=\"3\" align=\"right\">\n                <button onclick=\"jade_modules.code.run_query(tag('sql').value)\">Execute</button><br>\n            </td>\n        </tr>            \n        <tr>\n            <td id=\"sql-message\" class=\"hidden\" colspan=\"3\" style=\"background-color: white;\"></td>\n        </tr>            \n        <tr>\n            <td id=\"sql-error\" class=\"hidden\" colspan=\"3\" style=\"background-color: white; color:red ;\"></td>\n        </tr>            \n    </tbody>\n</table>\n\n\n\n\n</div></div>"
    },
    "style.css": {
      "filename": "style.css",
      "type": "text/css",
      "language": "CSS",
      "raw_url": "https://gist.githubusercontent.com/jade-addin/3c89ef8bd072d31d46fca6e7b062acd2/raw/7068cde4d17e9f6c8158b5bf818f296d7fefcaa1/style.css",
      "size": 4,
      "truncated": false,
      "content": "/**/"
    }
  },
  "public": true,
  "created_at": "2022-05-11T13:07:51Z",
  "updated_at": "2022-05-28T15:07:03Z",
  "description": "JET: Query Excel Data",
  "comments": 0,
  "user": null,
  "comments_url": "https://api.github.com/gists/3c89ef8bd072d31d46fca6e7b062acd2/comments",
  "owner": {
    "login": "jade-addin",
    "id": 97227368,
    "node_id": "U_kgDOBcuSaA",
    "avatar_url": "https://avatars.githubusercontent.com/u/97227368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jade-addin",
    "html_url": "https://github.com/jade-addin",
    "followers_url": "https://api.github.com/users/jade-addin/followers",
    "following_url": "https://api.github.com/users/jade-addin/following{/other_user}",
    "gists_url": "https://api.github.com/users/jade-addin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jade-addin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jade-addin/subscriptions",
    "organizations_url": "https://api.github.com/users/jade-addin/orgs",
    "repos_url": "https://api.github.com/users/jade-addin/repos",
    "events_url": "https://api.github.com/users/jade-addin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jade-addin/received_events",
    "type": "User",
    "site_admin": false
  },
  "forks": [

  ],
  "history": [
    {
      "user": {
        "login": "theGove",
        "id": 24496385,
        "node_id": "MDQ6VXNlcjI0NDk2Mzg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/24496385?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theGove",
        "html_url": "https://github.com/theGove",
        "followers_url": "https://api.github.com/users/theGove/followers",
        "following_url": "https://api.github.com/users/theGove/following{/other_user}",
        "gists_url": "https://api.github.com/users/theGove/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/theGove/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/theGove/subscriptions",
        "organizations_url": "https://api.github.com/users/theGove/orgs",
        "repos_url": "https://api.github.com/users/theGove/repos",
        "events_url": "https://api.github.com/users/theGove/events{/privacy}",
        "received_events_url": "https://api.github.com/users/theGove/received_events",
        "type": "User",
        "site_admin": false
      },
      "version": "7d878b704d14dfa0a3cd67b0aec7496cebfa60ec",
      "committed_at": "2022-05-28T15:07:06Z",
      "change_status": {
        "total": 537,
        "additions": 537,
        "deletions": 0
      },
      "url": "https://api.github.com/gists/3c89ef8bd072d31d46fca6e7b062acd2/7d878b704d14dfa0a3cd67b0aec7496cebfa60ec"
    }
  ],
  "truncated": false
}
