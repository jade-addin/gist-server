{
  "url": "https://api.github.com/gists/53d9bea76d4d48dec4d67b2d0f042583",
  "forks_url": "https://api.github.com/gists/53d9bea76d4d48dec4d67b2d0f042583/forks",
  "commits_url": "https://api.github.com/gists/53d9bea76d4d48dec4d67b2d0f042583/commits",
  "id": "53d9bea76d4d48dec4d67b2d0f042583",
  "node_id": "G_kwDOBcuSaNoAIDUzZDliZWE3NmQ0ZDQ4ZGVjNGQ2N2IyZDBmMDQyNTgz",
  "git_pull_url": "https://gist.github.com/53d9bea76d4d48dec4d67b2d0f042583.git",
  "git_push_url": "https://gist.github.com/53d9bea76d4d48dec4d67b2d0f042583.git",
  "html_url": "https://gist.github.com/jade-addin/53d9bea76d4d48dec4d67b2d0f042583",
  "files": {
    "code.js": {
      "filename": "code.js",
      "type": "application/javascript",
      "language": "JavaScript",
      "raw_url": "https://gist.githubusercontent.com/jade-addin/53d9bea76d4d48dec4d67b2d0f042583/raw/71ba6d41d591b7a808a2a4d55bd536511023d497/code.js",
      "size": 13629,
      "truncated": false,
      "content": "//logistic regression in excel using javascript\n\nlet predictor_names\nlet select_values\n//const form_data={}// takes the place of the from where users entered data on original webpage\nlet model_results={}\nasync function auto_exec(){\n  // set the tool css\n  Jade.set_css(gist_files('style.css'),\"naive-bayes\")\n  // place the tool html \n  tag(\"tools-body\").innerHTML=gist_files('mann-whitney.html')\n  //https://thisancog.github.io/statistics.js/index.html\n  Jade.add_library(\"https://cdn.jsdelivr.net/npm/statistics.js@1.0.0/statistics.min.js\")\n  \n  // fill in values from last tool use\n  const tool_data = await jade.read_object_from_workbook(window.active_tool)\n  if(tool_data.outcome_values){\n    select_values = tool_data.outcome_values\n  }\n\n //console.log(\"select_values\",select_values)\n\n  for(const[key,value] of Object.entries(tool_data)){\n    if(tag(key)){\n      tag(key).value=value\n    }\n  }\n\n  // read the last run if there is one\n  model_results = await jade.read_object_from_workbook(window.active_tool+\"_model_result\")\n //console.log(\"model_results\",model_results)\n\n}\n\nfunction input_ids(classname=\"param\"){\n  //returns an array of all elements with the given classname\n  const retval=[]\n  for(const elem of document.getElementsByClassName(classname)){\n    retval.push(elem.id)\n  }\n  return retval\n}\n\n\nfunction save_inputs(){\n  const values_to_save=get_form_values(input_ids())\n  jade.save_object_to_workbook(\n    values_to_save     \n    , window.active_tool)\n}\n\nfunction reset_model(){\n  console.log(\"at reset model\")\n  tag(\"predictor-names\").innerHTML=\"\"\n}\nfunction new_data_sheet(){\n  tag(\"datarange\").value=\"\"\n  tag(\"predictors\").value=\"\"\n  tag(\"outcome\").value=\"\"\n  tag(\"predictor-names\").innerHTML=\"\"\n  \n}\nfunction new_data_range(){\n   tag(\"predictors\").value=\"\"\n   tag(\"outcome\").value=\"\"\n   tag(\"predictor-names\").innerHTML=\"\"\n  }\n\n\nasync function split_data(){\n  // save the defaults for the tool\n  save_inputs()\n\n  Excel.run(async function(excel){\n    const sheet = excel.workbook.worksheets.getItem(tag(\"datasheet\").value)\n    let datarange = sheet.getRange(tag(\"datarange\").value)\n    let train_label = datarange.getColumnsAfter(1).getRow(0)\n    const data_labels = datarange.getRow(0)\n    train_label.load(\"values\")\n    data_labels.load(\"values\")\n    try{\n      await excel.sync()\n     //console.log(\"train_label\",train_label.values)\n    }catch(e){\n      alert(`Unable to find the data on a sheet named \"${tag(\"datasheet\").value}\" in a range with an address of \"${tag(\"datarange\").value}\".`)\n      return\n    }\n\n    // checking to see that all columns have labels\n    for(const label of data_labels.values[0]){\n      if(!label){\n        alert('Your data must include a single header row and all cells in the header must have a value.')\n        return\n      }\n    }\n\n    if(train_label.values[0][0]===\"Train\" || data_labels.values[0][data_labels.values[0].length-1]===\"Train\"){\n      alert('This dataset has already been split.  To split it again, delete the column labeled \"Train\" to the right of your data')\n      return\n    }\n\n    let pct=0\n    try{\n      pct=parseFloat(tag(\"training-percent\").value)\n      if(pct < 1 || pct > 100){\n        alert(`Traing Set % must be a number between 1 and 100.`)\n        return\n        }\n    }catch(e){\n     //console.log(\"E\", e)\n      alert(`Could not understand the Training Set %.  You entered ${tag(\"training-percent\").value}.  Expecting a number between 1 and 100.`)\n      return\n    }\n\n\n\n    datarange.getColumnsAfter(1).insert(Excel.InsertShiftDirection.right);\n    const next_col = datarange.getColumnsAfter(1)\n    next_col.load(\"values\")\n    const new_data=[[\"Train\"]]\n\n    await excel.sync()\n\n    const rows=[]\n\n    for(let x=1;x<next_col.values.length;x++){\n      rows.push({index:x,rnd:Math.random()})\n      new_data.push([true])\n    }\n    rows.sort((a, b) => (a.rnd > b.rnd) ? 1 : -1)\n\n    let test_ct=Math.round(((100 - pct)/100)*rows.length)\n    if(test_ct < 1){\n      test_ct=1\n    }\n\n    // randomly assing test/train\n    for(let x=0;x<test_ct;x++){\n      new_data[rows[x].index][0]=false\n    }\n    next_col.values=new_data\n    await excel.sync()\n  })\n}\n\n\n\nfunction get_form_values(tag_names){\n  const obj={}\n  console.log(tag_names)\n  for(const tag_name of tag_names){\n    obj[tag_name]=tag(tag_name).value\n  }\n  return obj\n}\n\n\nfunction configure_example(){\n  Excel.run(async function(excel){\n    const sheetname=\"Example Data\"\n    let sheet = excel.workbook.worksheets.getItemOrNullObject(sheetname); \n    await excel.sync()\n    if (sheet.isNullObject) {\n      // sheet does not yet exist, create it\n      sheet=excel.workbook.worksheets.add(sheetname)\n    }else{\n      sheet.getUsedRange().delete()\n    }\n    sheet.activate()\n    await jade_modules.jet_engine.stream_to_range(\"https://jade-addin.github.io/data/viral_load.data\",sheet)\n    await excel.sync()\n    tag(\"datasheet\").value=\"Example Data\"\n    tag(\"sample1\").value=\"A1:A8\"\n    tag(\"sample2\").value=\"B1:B8\"\n  })\n}\n\n\nasync function get_address(tag_name){\n  tag(tag_name).value=await jade_modules.jet_engine.selected_range_address()\n}\n\n\n// must be called from insde an excel block\nfunction format_table(sheet, start_row,start_column,rows,columns,row_headers=0, column_headers=1){\n  if(column_headers){\n    const col_head_range = sheet.getRangeByIndexes(start_row-1,start_column-1,column_headers,columns)\n    jade_modules.jet_engine.range_format(sheet, col_head_range, \"format/fill/color\",  \"Maroon\")\n    jade_modules.jet_engine.range_format(sheet, col_head_range, \"format/font/color\",  \"White\")\n    jade_modules.jet_engine.range_format(sheet, col_head_range, \"format/font/bold\",  true)\n        \n  }\n  if(row_headers){\n    const row_head_range = sheet.getRangeByIndexes(start_row-1+column_headers,start_column-1,rows-column_headers,row_headers)\n    jade_modules.jet_engine.range_format(sheet, row_head_range, \"format/fill/color\",  \"LightGray\")\n  }\n  const table_range = sheet.getRangeByIndexes(start_row-1,start_column-1,rows,columns)\n  jade_modules.jet_engine.border_around(sheet, table_range,\"Medium\",\"Continuous\",\"Black\")\n  \n}\nfunction collapse_array(array_data, allow_null=false){\n  //Takes all values from a two dimensional array and returns a one dimensional array of all values\n  const retval=[]\n  for(const row of array_data){\n    for(const col of row){\n      if(col===null){\n        if(allow_null){\n          retval.push(null)  \n        }\n      }else{\n        retval.push(col)\n      }\n      \n    }\n  }\n  return retval\n}\nasync function run_model(){\n  // save the defaults for the tool\n console.log(\"run model\")\n \n  save_inputs()\n\n\n  Excel.run(async function(excel){\n   //console.log('tag(\"outcome\")',tag(\"outcome\").value)\n\n    const sheet = excel.workbook.worksheets.getItem(tag(\"datasheet\").value)\n    const confidence = tag(\"confidence\").value\n    const tails = tag(\"tails\").value\n    console.log(\"confidence\", confidence)\n\n    const sample1 = sheet.getRange(tag(\"sample1\").value)\n    const sample2 = sheet.getRange(tag(\"sample2\").value)\n\n    let sheetname=\"Mann-Whiteny U Results\"\n    sample1.load(\"values\")\n    sample2.load(\"values\")\n    let out_sheet = excel.workbook.worksheets.getItemOrNullObject(sheetname); \n    try{\n      await excel.sync()\n    }catch(e){\n     //console.log(\"e\",e)\n      alert(\"Unable to initialize model. Check the following:<ul><li>Sample 1</li><li>Sample 2</li></ul>\", \"Problem\")\n    }\n\n    //check confidence\n    if(isNaN(confidence) || confidence < 0 || confidence > 100){\n      alert('Confidence must be a number between 0 and 100.  This analysis stopped because the confidence level is ' + confidence + \".\", \"Problem\")\n      return  \n    }\n\n\n    // check sample 1\n    const sample_1 = collapse_array(sample1.values)\n    let data = sample1\n    for(let x=1;x<data.length;x++){\n        if(isNaN(data[x])){\n          alert('All cells following the first cell in the \"Sample 1\" range values be numeric.  This analysis stopped when encountering \"' + data[x] + '\".', \"Problem\")\n          return  \n        }\n    }\n\n    // check sample 2\n    const sample_2 = collapse_array(sample2.values)\n    data = sample_2\n    for(let x=1;x<data.length;x++){\n        if(isNaN(data[x])){\n          alert('All cells following the first cell in the \"Sample 2\" range values be numeric.  This analysis stopped when encountering \"' + data[x] + '\".', \"Problem\")\n          return  \n        }\n    }\n\n   // passed all checks, ready to run the analysis   \n\n   model_results=mann_whitney_u(sample_1, sample_2,confidence, tails)\n\n    \n    //console.log(form_data.output)\n    console.log(\"model_results\",model_results)\n\n    \n\n    if (out_sheet.isNullObject) {\n      // sheet does not yet exist, create it\n      out_sheet=excel.workbook.worksheets.add(sheetname)\n    }else{\n      out_sheet.getRange(\"1:11\").insert(Excel.InsertShiftDirection.down)\n    }\n\n   //console.log(\"predictor_names\",predictor_names.values)\n \n    out_sheet.activate()\n    //await excel.sync()\n\n\n    // header\n    out_sheet.getRange(\"B2:f2\").merge(true)\n    jade_modules.jet_engine.range_format(out_sheet, \"B2:f2\",\"format/fill/color\",  \"#000080\")\n    jade_modules.jet_engine.range_format(out_sheet, \"B2:f2\", \"format/font/color\",  \"White\")\n    jade_modules.jet_engine.range_format(out_sheet, \"B2:f2\", \"format/font/bold\",  true)\n    jade_modules.jet_engine.range_format(out_sheet, \"B2:f2\", \"format/horizontalAlignment\",  \"Center\") \n    out_sheet.getRange(\"B2\").values=sample_1[0]+ \" vs. \" + sample_2[0]\n\n\n    // analysis data\n    format_table(out_sheet,4,2,6,2,1,1)\n    format_table(out_sheet,4,5,6,2,1,1)\n    \n    // jade_modules.jet_engine.range_format(out_sheet, \"F9:H9\",\"format/fill/color\",  \"Gray\")\n    // jade_modules.jet_engine.range_format(out_sheet, \"B9:H\"+(9+predictors_in_model.length), \"numberFormat\",  \"0.000\")\n    // jade_modules.jet_engine.range_format(out_sheet, \"E9:E\"+(9+predictors_in_model.length), \"numberFormat\",  \"0.00000\")\n    // jade_modules.jet_engine.range_format(out_sheet, \"C3\", \"numberFormat\",  \"0.000\")\n    // jade_modules.jet_engine.range_format(out_sheet, \"C4\", \"numberFormat\",  \"0\")\n    // jade_modules.jet_engine.range_format(out_sheet, \"C5\", \"numberFormat\",  \"0.00000\")\n\n    out_sheet.getRange(\"B4:C9\").values=[\n       [\"Analysis Configuration\",null],\n       [\"Data Sheet\",tag(\"datasheet\").value],\n       [sample_1[0],tag(\"sample1\").value],\n       [sample_2[0],tag(\"sample2\").value],\n       [\"Significance Level\",tag(\"confidence\").value+\"%\"],\n       [\"Tails\",tag(\"tails\").value]\n     ]\n     out_sheet.getRange(\"E4:F9\").values=[\n      [\"Analysis Result\",null],\n      [\"Test Statistic\",model_results.MannWhitneyU],\n      [\"z-Score\",model_results.zScore],\n      [\"alpha\",model_results.alpha],\n      [\"p-Value\",model_results.p],\n      [\"Reject H0\",model_results.reject],\n    ]\n\n    jade_modules.jet_engine.range_format(out_sheet, \"f6\", \"numberFormat\",  \"0.000\")\n    jade_modules.jet_engine.range_format(out_sheet, \"f7\", \"numberFormat\",  \"0.00\")\n    jade_modules.jet_engine.range_format(out_sheet, \"f8\", \"numberFormat\",  \"0.0000\")\n\n    // conclusion\n    out_sheet.getRange(\"B11:f11\").merge(true)\n    out_sheet.getRange(\"B11\").values=[[model_results.conclusion]]\n    out_sheet.getRange(\"B11\").format.wrapText = true\n    \n    // jade_modules.jet_engine.range_format(out_sheet, \"b11\",\"format/wrapText\",  \"True\")\n\n    out_sheet.getRange(\"11:11\").format.rowHeight=45\n    out_sheet.getRange(\"B1:F1\").format.autofitColumns()\n\n    await save_model_to_sheet(out_sheet, model_results, excel)\n\n    await excel.sync()\n    // not sure what the next line does\n    jade.save_object_to_workbook(model_results,window.active_tool+\"_model_result\")\n    })\n\n\n}\n\nasync function save_model_to_sheet(sheet, report, ctx){\n  const model_names=sheet.names\n  model_names.load(\"items\")\n  const name_list=[]\n  await ctx.sync()\n\n  if(model_names.items.length>0){\n    for(let y=model_names.items.length-1; y>=0 ;y--){\n      //console.log(\"deleting model name on sheet\",y)\n      model_names.items[y].delete()\n    }\n  }\n\n  //write the model result\n  for(const[key,val] of Object.entries(report)){\n    //console.log(key, val)\n    name_list.push(key)\n    if(typeof val===\"string\"){\n      sheet.names.add(key,val).visible=false\n    }else{\n      sheet.names.add(key,JSON.stringify(val)).visible=false\n    }\n  }\n\n  for(id of input_ids()){// write the user config\n    if(!name_list.includes(id)){\n      if(typeof tag(id).value===\"string\"){\n        sheet.names.add(id,tag(id).value).visible=false\n      }else{\n        sheet.names.add(id,JSON.stringify(tag(id).value)).visible=false\n      }  \n    }\n  }\n\n}\n\n\nfunction mann_whitney_u(sample1, sample2, significance, tails){\n  const data = []\n  for(let x=1;x<sample1.length;x++){\n    data.push({\n      label:sample1[0],\n      value:sample1[x]\n    })\n  }\n  for(let x=1;x<sample2.length;x++){\n    data.push({\n      label:sample2[0],\n      value:sample2[x]\n    })\n  }\n\n  const vars = {\n    label: 'nominal',\n    value: 'metric'\n  }\n  \n  const stats = new Statistics(data, vars);\n  const u = stats.mannWhitneyU('label', 'value');\n  u.tails = parseInt(tails)\n  u.significance = parseFloat(significance)\n  u.p = (u.tails===1 ? u.pOneTailed : u.pTwoTailed )\n  u.alpha = (100-u.significance)/100\n  u.reject = u.alpha > u.p\n  u.conclusion = (u.reject ? `At the ${u.significance}% significance level, we have sufficient evidence to conclude that the \"${sample1[0]}\" sample and the \"${sample2[0]}\" sample are drawn from different populations.` \n                           : `At the ${u.significance}% significance level, we have do not have sufficient evidence to conclude that the \"${sample1[0]}\" sample and the \"${sample2[0]}\" sample are drawn from different populations.` \n  )\n  return u\n}"
    },
    "manifest.json": {
      "filename": "manifest.json",
      "type": "application/json",
      "language": "JSON",
      "raw_url": "https://gist.githubusercontent.com/jade-addin/53d9bea76d4d48dec4d67b2d0f042583/raw/904f16e17171ee574aa9d74f5b03fe230d7b326e/manifest.json",
      "size": 49,
      "truncated": false,
      "content": "[\n    \"code.js\",\"mann-whitney.html\",\"style.css\"\n]"
    },
    "mann-whitney.html": {
      "filename": "mann-whitney.html",
      "type": "text/html",
      "language": "HTML",
      "raw_url": "https://gist.githubusercontent.com/jade-addin/53d9bea76d4d48dec4d67b2d0f042583/raw/fcc5b59c10c28e35c0f1d8d3177d575b3a1792d5/mann-whitney.html",
      "size": 5940,
      "truncated": false,
      "content": "\n<div class=\"hidden\" id=\"jet-refresh\" style=\"margin-left: .5rem;\"><i title=\"Re-load this tool.\" onclick=\"jade_modules.jet_engine.select_page()\" class=\"fa-solid fa-arrows-rotate\"  cursor:pointer\"></i></div>    \n<div style=\"margin:1rem; text-align: center;\"><div style=\"display:inline-block; text-align: left;\">\n    <table style=\"width:100%\" align=\"center\" cellspacing=\"0\" cellpadding=\"4\">\n        <tbody>\n            <tr>\n                <td onclick=\"jade_modules.jet_engine.toggle_table(this.nextElementSibling.firstElementChild)\" colspan=\"2\" class=\"section head\">Example</td>\n                <td class=\"section drop\"><i  title=\"Hide or show this step.\" onclick=\"jade_modules.jet_engine.toggle_table(this)\" class=\"fa-solid fa-chevron-down\"></i></td>\n            </tr>            \n            <tr class=\"hidden\" style=\"background-color: white;\">\n                <td colspan=\"3\">Click the button below to build a sheet called \"Example Data\" and configure this tool to run an analysis based on the data.  You can <a href=\"https://atlas.myeducator.com/vimeo.html?id=735466668\">watch a video</a> walking you through the process and explaining the basics of the analysis.</td>\n            </tr>            \n            <tr class=\"hidden\">\n                <td colspan=\"3\" align=\"right\"><button id=\"configure-button\" onclick=\"jade_modules.code.configure_example()\">Configure Example</button></td>\n            </tr>            \n        </tbody>\n    </table>\n    <div style=\"margin-top: 1rem;\" />\n\n\n    <table style=\"width:100%\" align=\"center\" cellspacing=\"0\" cellpadding=\"4\">\n    <tbody>\n        <tr>\n            <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\" colspan=\"2\" class=\"section head\">Analysis</td>\n            <td class=\"section drop\"><i  title=\"Hide or show this step.\" onclick=\"jade_modules.jet_engine.toggle_table(this)\" class=\"fa-solid fa-chevron-up\"></i></td>\n        </tr>            \n        <tr class=\"hidden note\">\n            <td colspan=\"3\">Identify the data to be used for your analysis.</td>\n        </tr>            \n\n        <tr>\n            <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\"  class=\"label\" >Data Sheet:</td>\n            <td class=\"entry\"><input class=\"param\" type=\"text\" id=\"datasheet\" onchange=\"jade_modules.code.new_data_sheet()\" onfocus=\"jade_modules.jet_engine.default_selected_sheet(this)\"/></td>\n            <td><i title=\"Get the name of the active sheet.\" onclick=\"jade_modules.jet_engine.get_sheet_name('datasheet');jade_modules.code.new_data_sheet()\" class=\"fa-solid fa-file\" style=\"color:#777; cursor:pointer\"></i></td>\n        </tr>            \n        <tr class=\"hidden note\">\n            <td colspan=\"3\">This is the name of the worksheet that has the data you will use to build your prediction model</td>\n        </tr>            \n\n\n        <tr>\n            <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\"  class=\"label\" >Sample 1:</td>\n            <td class=\"entry\"><input class=\"param\" type=\"text\" id=\"sample1\" onchange=\"jade_modules.code.reset_model()\" onfocus=\"jade_modules.jet_engine.default_selected_range(this);jade_modules.code.reset_model()\"/></td>\n            <td><i title=\"Get the data columns from the selecte range.\" onclick=\"jade_modules.jet_engine.get_data_column_address('sample1');jade_modules.code.reset_model()\" class=\"fa-solid fa-table\" style=\"color:#777; cursor:pointer\"></i></td>\n        </tr>            \n        <tr class=\"hidden note\">\n            <td colspan=\"3\">The range that holds the first sample for comparison.  The first cell must hold the sample name and all other cells hold the observations the sample comprises.</td>\n        </tr>            \n\n        <tr>\n            <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\"  class=\"label\" >Sample 2:</td>\n            <td class=\"entry\"><input class=\"param\" type=\"text\" id=\"sample2\" onchange=\"jade_modules.code.reset_model()\" onfocus=\"jade_modules.jet_engine.default_selected_range(this);jade_modules.code.reset_model()\"/></td>\n            <td><i title=\"Get the data columns from the selecte range.\" onclick=\"jade_modules.jet_engine.get_data_column_address('sample2');jade_modules.code.reset_model()\" class=\"fa-solid fa-table\" style=\"color:#777; cursor:pointer\"></i></td>\n        </tr>            \n        <tr class=\"hidden note\">\n            <td colspan=\"3\">The range that holds the second sample for comparison.  The first cell must hold the sample name and all other cells hold the observations the sample comprises.</td>\n        </tr>            \n\n\n        <tr>\n            <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\"  class=\"label\" >Significance Level:</td>\n            <td><input class=\"param\" size=\"2\" type=\"text\" id=\"confidence\" value=\"95\"/></td>\n            <td>%</td>\n        </tr>            \n        <tr class=\"hidden note\">\n            <td colspan=\"3\">Significance level is used for deciding if we can reject the null hypothesis that the two samples are drawn from the same population.  It's usually a number fairly close to 100%, like 90%, 95% or 99%.</td>\n        </tr>            \n\n        <tr>\n            <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\"  class=\"label\" >Tails:</td>\n            <td><select class=\"param\" id=\"tails\"><option value=\"1\">One-tailed Test</option><option value=\"2\">Two-tailed Test</option></select></td>\n            <td>%</td>\n        </tr>            \n        <tr class=\"hidden note\">\n            <td colspan=\"3\">Significance level is used for deciding if we can reject the null hypothesis that the two samples are drawn from the same population.  It's usually a number fairly close to 100%, like 90%, 95% or 99%.</td>\n        </tr>            \n\n\n\n\n        <tr>\n            <td colspan=\"3\" align=\"right\"><button id=\"configure-button\" onclick=\"jade_modules.code.run_model()\">Run Analysis</button></td>\n        </tr>            \n    </tbody>\n</table>\n<div style=\"margin-top: 1rem;\" />\n\n\n</div></div>\n"
    },
    "style.css": {
      "filename": "style.css",
      "type": "text/css",
      "language": "CSS",
      "raw_url": "https://gist.githubusercontent.com/jade-addin/53d9bea76d4d48dec4d67b2d0f042583/raw/7068cde4d17e9f6c8158b5bf818f296d7fefcaa1/style.css",
      "size": 4,
      "truncated": false,
      "content": "/**/"
    }
  },
  "public": true,
  "created_at": "2023-05-04T14:32:36Z",
  "updated_at": "2023-05-08T21:59:58Z",
  "description": "JET: Mann-Whitney-U tool for JADE Excel Addin",
  "comments": 0,
  "user": null,
  "comments_url": "https://api.github.com/gists/53d9bea76d4d48dec4d67b2d0f042583/comments",
  "owner": {
    "login": "jade-addin",
    "id": 97227368,
    "node_id": "U_kgDOBcuSaA",
    "avatar_url": "https://avatars.githubusercontent.com/u/97227368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jade-addin",
    "html_url": "https://github.com/jade-addin",
    "followers_url": "https://api.github.com/users/jade-addin/followers",
    "following_url": "https://api.github.com/users/jade-addin/following{/other_user}",
    "gists_url": "https://api.github.com/users/jade-addin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jade-addin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jade-addin/subscriptions",
    "organizations_url": "https://api.github.com/users/jade-addin/orgs",
    "repos_url": "https://api.github.com/users/jade-addin/repos",
    "events_url": "https://api.github.com/users/jade-addin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jade-addin/received_events",
    "type": "User",
    "site_admin": false
  },
  "forks": [

  ],
  "history": [
    {
      "user": {
        "login": "theGove",
        "id": 24496385,
        "node_id": "MDQ6VXNlcjI0NDk2Mzg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/24496385?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theGove",
        "html_url": "https://github.com/theGove",
        "followers_url": "https://api.github.com/users/theGove/followers",
        "following_url": "https://api.github.com/users/theGove/following{/other_user}",
        "gists_url": "https://api.github.com/users/theGove/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/theGove/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/theGove/subscriptions",
        "organizations_url": "https://api.github.com/users/theGove/orgs",
        "repos_url": "https://api.github.com/users/theGove/repos",
        "events_url": "https://api.github.com/users/theGove/events{/privacy}",
        "received_events_url": "https://api.github.com/users/theGove/received_events",
        "type": "User",
        "site_admin": false
      },
      "version": "35b9a521c82924d053b02371071dd0f5ec67edaa",
      "committed_at": "2023-05-08T22:00:11Z",
      "change_status": {
        "total": 519,
        "additions": 519,
        "deletions": 0
      },
      "url": "https://api.github.com/gists/53d9bea76d4d48dec4d67b2d0f042583/35b9a521c82924d053b02371071dd0f5ec67edaa"
    }
  ],
  "truncated": false
}
