{
  "url": "https://api.github.com/gists/8b97cfb3612268feda36f172ff8843e0",
  "forks_url": "https://api.github.com/gists/8b97cfb3612268feda36f172ff8843e0/forks",
  "commits_url": "https://api.github.com/gists/8b97cfb3612268feda36f172ff8843e0/commits",
  "id": "8b97cfb3612268feda36f172ff8843e0",
  "node_id": "G_kwDOBcuSaNoAIDhiOTdjZmIzNjEyMjY4ZmVkYTM2ZjE3MmZmODg0M2Uw",
  "git_pull_url": "https://gist.github.com/8b97cfb3612268feda36f172ff8843e0.git",
  "git_push_url": "https://gist.github.com/8b97cfb3612268feda36f172ff8843e0.git",
  "html_url": "https://gist.github.com/jade-addin/8b97cfb3612268feda36f172ff8843e0",
  "files": {
    "code.js": {
      "filename": "code.js",
      "type": "application/javascript",
      "language": "JavaScript",
      "raw_url": "https://gist.githubusercontent.com/jade-addin/8b97cfb3612268feda36f172ff8843e0/raw/8b54bade1d173378aac360a97a19696069dde234/code.js",
      "size": 11420,
      "truncated": false,
      "content": "\n//logistic regression in excel using javascript\n\nlet predictor_names\nlet select_values\n//const form_data={}// takes the place of the from where users entered data on original webpage\nlet model_results={}\nasync function auto_exec(){\n  // set the tool css\n  Jade.set_css(gist_files('style.css'),\"naive-bayes\")\n  // place the tool html \n  tag(\"tools-body\").innerHTML=gist_files('kruskal-wallis.html')\n\n  // add the script : https://stdlib.io/docs/api/latest\n  const sc  = document.createElement('script');\n  sc.type=\"module\"\n  sc.innerHTML=`import kruskalTest  from 'https://cdn.jsdelivr.net/gh/stdlib-js/stats-kruskal-test@esm/index.mjs';\n    window.kruskalTest  = kruskalTest ;`   \n  document.head.appendChild(sc);\n\n\n\n\n  // fill in values from last tool use\n  const tool_data = await jade.read_object_from_workbook(window.active_tool)\n  if(tool_data.outcome_values){\n    select_values = tool_data.outcome_values\n  }\n\n //console.log(\"select_values\",select_values)\n\n  for(const[key,value] of Object.entries(tool_data)){\n    if(tag(key)){\n      tag(key).value=value\n    }\n  }\n\n  // read the last run if there is one\n  model_results = await jade.read_object_from_workbook(window.active_tool+\"_model_result\")\n //console.log(\"model_results\",model_results)\n\n}\n\nfunction input_ids(classname=\"param\"){\n  //returns an array of all elements with the given classname\n  const retval=[]\n  for(const elem of document.getElementsByClassName(classname)){\n    retval.push(elem.id)\n  }\n  return retval\n}\n\n\nfunction save_inputs(){\n  const values_to_save=get_form_values(input_ids())\n  jade.save_object_to_workbook(\n    values_to_save     \n    , window.active_tool)\n}\n// function reset_model(){\n//   console.log(\"at reset model\")\n//   tag(\"predictor-names\").innerHTML=\"\"\n// }\nfunction new_data_sheet(){\n  tag(\"datarange\").value=\"\"\n  tag(\"predictors\").value=\"\"\n  tag(\"outcome\").value=\"\"\n  tag(\"predictor-names\").innerHTML=\"\"\n  \n}\nfunction new_data_range(){\n   tag(\"predictors\").value=\"\"\n   tag(\"outcome\").value=\"\"\n   tag(\"predictor-names\").innerHTML=\"\"\n  }\n\n\n\nfunction get_form_values(tag_names){\n  const obj={}\n  console.log(tag_names)\n  for(const tag_name of tag_names){\n    obj[tag_name]=tag(tag_name).value\n  }\n  return obj\n}\n\n\nfunction configure_example(){\n  Excel.run(async function(excel){\n    const sheetname=\"Example Data\"\n    let sheet = excel.workbook.worksheets.getItemOrNullObject(sheetname); \n    await excel.sync()\n    if (sheet.isNullObject) {\n      // sheet does not yet exist, create it\n      sheet=excel.workbook.worksheets.add(sheetname)\n    }else{\n      sheet.getUsedRange().delete()\n    }\n    sheet.activate()\n    await jade_modules.jet_engine.stream_to_range(\"https://jade-addin.github.io/data/three-drugs.data\",sheet)\n    await excel.sync()\n    tag(\"datasheet\").value=\"Example Data\"\n    tag(\"sample\").value=\"A1:C11\"\n  })\n}\n\n\nasync function get_address(tag_name){\n  tag(tag_name).value=await jade_modules.jet_engine.selected_range_address()\n}\n\n\n// must be called from insde an excel block\nfunction format_table(sheet, start_row,start_column,rows,columns,row_headers=0, column_headers=1){\n  if(column_headers){\n    const col_head_range = sheet.getRangeByIndexes(start_row-1,start_column-1,column_headers,columns)\n    jade_modules.jet_engine.range_format(sheet, col_head_range, \"format/fill/color\",  \"Maroon\")\n    jade_modules.jet_engine.range_format(sheet, col_head_range, \"format/font/color\",  \"White\")\n    jade_modules.jet_engine.range_format(sheet, col_head_range, \"format/font/bold\",  true)\n        \n  }\n  if(row_headers){\n    const row_head_range = sheet.getRangeByIndexes(start_row-1+column_headers,start_column-1,rows-column_headers,row_headers)\n    jade_modules.jet_engine.range_format(sheet, row_head_range, \"format/fill/color\",  \"LightGray\")\n  }\n  const table_range = sheet.getRangeByIndexes(start_row-1,start_column-1,rows,columns)\n  jade_modules.jet_engine.border_around(sheet, table_range,\"Medium\",\"Continuous\",\"Black\")\n  \n}\nfunction collapse_array(array_data, allow_null=false){\n  //Takes all values from a two dimensional array and returns a one dimensional array of all values\n  const retval=[]\n  for(const row of array_data){\n    for(const col of row){\n      if(col===null){\n        if(allow_null){\n          retval.push(null)  \n        }\n      }else{\n        retval.push(col)\n      }\n      \n    }\n  }\n  return retval\n}\nasync function run_model(){\n  // save the defaults for the tool\n console.log(\"run model\")\n \n  save_inputs()\n\n\n\n\n\n  Excel.run(async function(excel){\n   //console.log('tag(\"outcome\")',tag(\"outcome\").value)\n\n    const sheet = excel.workbook.worksheets.getItem(tag(\"datasheet\").value)\n    const confidence = tag(\"confidence\").value\n    \n    const sample = sheet.getRange(tag(\"sample\").value)\n\n    let sheetname=\"Kruskal-Wallis Results\"\n    sample.load(\"values\")\n    let out_sheet = excel.workbook.worksheets.getItemOrNullObject(sheetname); \n    try{\n      await excel.sync()\n    }catch(e){\n     //console.log(\"e\",e)\n      alert(\"Unable to initialize model. Check that the data field is a valid range and that the Data Sheet is a valid sheet name.\", \"Problem\")\n    }\n\n    //check confidence\n    if(isNaN(confidence) || confidence < 0 || confidence > 100){\n      alert('Confidence must be a number between 0 and 100.  This analysis stopped because the confidence level is ' + confidence + \".\", \"Problem\")\n      return  \n    }\n\n\n    // check sample\n    const sample_data = sample.values\n    console.log(\"sample_data\",sample_data)\n    if(sample_data[0].length<2){\n      alert('The Data field must comprise at least two columns.', \"Problem\")\n      return  \n    }\n\n    const array_of_arrays=[]\n    for(let x=0;x<sample_data[0].length;x++){\n      array_of_arrays.push([])\n    }\n\n    for(const row of sample_data){\n      for(let c=0;c<sample_data[0].length;c++ ){\n        if(!isNaN(row[c]) && row[c]!==null && row[c]!==\"\" ){\n          array_of_arrays[c].push(row[c])\n        }\n      }\n    }\n\n    console.log(\"array_of_arrays\",array_of_arrays)\n    // Each column has numeric data\n    for(const arr of array_of_arrays){\n      if(arr.length===0){\n        alert('At least one of the coluns specified does not contain any numeric data.', \"Problem\")\n        return  \n      }\n    }\n\n\n   // passed all checks, ready to run the analysis   \n\n    model_results=kruskal_test(array_of_arrays, confidence)\n\n    \n    //console.log(form_data.output)\n    console.log(\"model_results\",model_results)\n\n    \n    if (out_sheet.isNullObject) {\n      // sheet does not yet exist, create it\n      out_sheet=excel.workbook.worksheets.add(sheetname)\n    }else{\n      out_sheet.getRange(\"1:10\").insert(Excel.InsertShiftDirection.down)\n    }\n\n   //console.log(\"predictor_names\",predictor_names.values)\n \n    out_sheet.activate()\n    //await excel.sync()\n\n\n    // header\n    out_sheet.getRange(\"B2:f2\").merge(true)\n    jade_modules.jet_engine.range_format(out_sheet, \"B2:f2\",\"format/fill/color\",  \"#000080\")\n    jade_modules.jet_engine.range_format(out_sheet, \"B2:f2\", \"format/font/color\",  \"White\")\n    jade_modules.jet_engine.range_format(out_sheet, \"B2:f2\", \"format/font/bold\",  true)\n    jade_modules.jet_engine.range_format(out_sheet, \"B2:f2\", \"format/horizontalAlignment\",  \"Center\") \n    out_sheet.getRange(\"B2\").values=model_results.method //sample_1[0]+ \" vs. \" + sample_2[0]\n\n\n    // analysis data\n    format_table(out_sheet,4,2,4,2,1,1)\n    format_table(out_sheet,4,5,5,2,1,1)\n    \n    // jade_modules.jet_engine.range_format(out_sheet, \"F9:H9\",\"format/fill/color\",  \"Gray\")\n    // jade_modules.jet_engine.range_format(out_sheet, \"B9:H\"+(9+predictors_in_model.length), \"numberFormat\",  \"0.000\")\n    // jade_modules.jet_engine.range_format(out_sheet, \"E9:E\"+(9+predictors_in_model.length), \"numberFormat\",  \"0.00000\")\n    // jade_modules.jet_engine.range_format(out_sheet, \"C3\", \"numberFormat\",  \"0.000\")\n    // jade_modules.jet_engine.range_format(out_sheet, \"C4\", \"numberFormat\",  \"0\")\n    // jade_modules.jet_engine.range_format(out_sheet, \"C5\", \"numberFormat\",  \"0.00000\")\n\n    out_sheet.getRange(\"B4:C7\").values=[\n       [\"Analysis Configuration\",null],\n       [\"Data Sheet\",tag(\"datasheet\").value],\n       [\"Data Range\",tag(\"sample\").value],\n       [\"Significance Level\",tag(\"confidence\").value+\"%\"],\n     ]\n     await excel.sync()\n     out_sheet.getRange(\"E4:F8\").values=[\n      [\"Analysis Result\",null],\n      [\"Test Statistic\",model_results.statistic],\n      [\"alpha\",model_results.alpha],\n      [\"p-Value\",model_results.pValue],\n      [\"Reject H0\",model_results.rejected],\n    ]\n    await excel.sync()\n\n    jade_modules.jet_engine.range_format(out_sheet, \"f5\", \"numberFormat\",  \"0.000\")\n    jade_modules.jet_engine.range_format(out_sheet, \"f6\", \"numberFormat\",  \"0.00\")\n    jade_modules.jet_engine.range_format(out_sheet, \"f7\", \"numberFormat\",  \"0.0000\")\n\n    // conclusion\n    out_sheet.getRange(\"B10:f10\").merge(true)\n    out_sheet.getRange(\"B10\").values=[[model_results.conclusion]]\n    out_sheet.getRange(\"B10\").format.wrapText = true\n    \n    out_sheet.getRange(\"10:10\").format.rowHeight=45\n\n    out_sheet.getRange(\"B1:F1\").format.autofitColumns()\n    await excel.sync()\n    await save_model_to_sheet(out_sheet, model_results, excel)\n\n    await excel.sync()\n    // not sure what the next line does\n    jade.save_object_to_workbook(model_results,window.active_tool+\"_model_result\")\n    })\n\n\n}\n\nasync function save_model_to_sheet(sheet, report, ctx){\n  const model_names=sheet.names\n  model_names.load(\"items\")\n  const name_list=[]\n  await ctx.sync()\n\n  if(model_names.items.length>0){\n    for(let y=model_names.items.length-1; y>=0 ;y--){\n      //console.log(\"deleting model name on sheet\",y)\n      model_names.items[y].delete()\n    }\n  }\n  \n  //write the model result\n  for(const[key,val] of Object.entries(report)){\n    console.log(key, val)\n    name_list.push(key)\n    if(typeof val===\"string\"){\n      sheet.names.add(key,val).visible=false\n    }else{\n      sheet.names.add(key,JSON.stringify(val)).visible=false\n    }\n    await ctx.sync()\n  }\n\n  for(id of input_ids()){// write the user config\n    if(!name_list.includes(id)){\n      if(typeof tag(id).value===\"string\"){\n        sheet.names.add(id,tag(id).value).visible=false\n      }else{\n        sheet.names.add(id,JSON.stringify(tag(id).value)).visible=false\n      }  \n    }\n  }\n\n}\n\nfunction kruskal_test(array_of_arrays, significance){\n\n  const alpha = (100-parseFloat(significance))/100\n  const result = kruskalTest( ...array_of_arrays,{\n    alpha:alpha,\n  });\n\n  result.alpha = alpha\n  result.significance = parseFloat(significance)\n  result.conclusion = (result.rejected ? `At the ${result.significance}% significance level, we can conclude that the median of at least one of the populations represented by the samples provided differs from at least one other population median.` \n                           : `At the ${result.significance}% significance level, we have do not have sufficient evidence to concluded that any of the populations represented by the provided samples have diffent medians.` \n  )\n  \n\n  return JSON.parse(JSON.stringify(result,null,2))// stringify-parse gets rid of the print function that is included in the result\n}\n\nfunction get_column_letter(address, first_or_last=\"first\"){\n  const data =  address.split(\":\")\n  console.log(\"first_or_last\",first_or_last)\n  if(first_or_last===\"first\"){\n    return data[0].replace(/[0-9]/g, '').toUpperCase()\n  }else{\n    return data[1].replace(/[0-9]/g, '').toUpperCase()\n  }\n\n}"
    },
    "kruskal-wallis.html": {
      "filename": "kruskal-wallis.html",
      "type": "text/html",
      "language": "HTML",
      "raw_url": "https://gist.githubusercontent.com/jade-addin/8b97cfb3612268feda36f172ff8843e0/raw/299126bb2d73dcb80f38b89f6f1fe27bd34e5820/kruskal-wallis.html",
      "size": 4529,
      "truncated": false,
      "content": "\n\n<div class=\"hidden\" id=\"jet-refresh\" style=\"margin-left: .5rem;\"><i title=\"Re-load this tool.\" onclick=\"jade_modules.jet_engine.select_page()\" class=\"fa-solid fa-arrows-rotate\"  cursor:pointer\"></i></div>    \n<div style=\"margin:1rem; text-align: center;\"><div style=\"display:inline-block; text-align: left;\">\n    <table style=\"width:100%\" align=\"center\" cellspacing=\"0\" cellpadding=\"4\">\n        <tbody>\n            <tr>\n                <td onclick=\"jade_modules.jet_engine.toggle_table(this.nextElementSibling.firstElementChild)\" colspan=\"2\" class=\"section head\">Example</td>\n                <td class=\"section drop\"><i  title=\"Hide or show this step.\" onclick=\"jade_modules.jet_engine.toggle_table(this)\" class=\"fa-solid fa-chevron-down\"></i></td>\n            </tr>            \n            <tr class=\"hidden\" style=\"background-color: white;\">\n                <td colspan=\"3\">Click the button below to build a sheet called \"Example Data\" and configure this tool to run an analysis based on the data.  You can <a href=\"https://atlas.myeducator.com/vimeo.html?id=735466668\">watch a video</a> walking you through the process and explaining the basics of the analysis.</td>\n            </tr>            \n            <tr class=\"hidden\">\n                <td colspan=\"3\" align=\"right\"><button id=\"configure-button\" onclick=\"jade_modules.code.configure_example()\">Configure Example</button></td>\n            </tr>            \n        </tbody>\n    </table>\n    <div style=\"margin-top: 1rem;\" />\n\n\n    <table style=\"width:100%\" align=\"center\" cellspacing=\"0\" cellpadding=\"4\">\n    <tbody>\n        <tr>\n            <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\" colspan=\"2\" class=\"section head\">Analysis</td>\n            <td class=\"section drop\"><i  title=\"Hide or show this step.\" onclick=\"jade_modules.jet_engine.toggle_table(this)\" class=\"fa-solid fa-chevron-up\"></i></td>\n        </tr>            \n        <tr class=\"hidden note\">\n            <td colspan=\"3\">Identify the data to be used for your analysis.</td>\n        </tr>            \n\n        <tr>\n            <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\"  class=\"label\" >Data Sheet:</td>\n            <td class=\"entry\"><input class=\"param\" type=\"text\" id=\"datasheet\" onchange=\"jade_modules.code.new_data_sheet()\" onfocus=\"jade_modules.jet_engine.default_selected_sheet(this)\"/></td>\n            <td><i title=\"Get the name of the active sheet.\" onclick=\"jade_modules.jet_engine.get_sheet_name('datasheet');jade_modules.code.new_data_sheet()\" class=\"fa-solid fa-file\" style=\"color:#777; cursor:pointer\"></i></td>\n        </tr>            \n        <tr class=\"hidden note\">\n            <td colspan=\"3\">This is the name of the worksheet that has the data you will use to build your prediction model</td>\n        </tr>            \n\n\n        <tr>\n            <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\"  class=\"label\" >Data:</td>\n            <td class=\"entry\"><input class=\"param\" type=\"text\" id=\"sample\" onfocus=\"jade_modules.jet_engine.default_selected_range(this);jade_modules.code.reset_model()\"/></td>\n            <td><i title=\"Get the data columns from the selecte range.\" onclick=\"jade_modules.jet_engine.get_data_column_address('sample');jade_modules.code.reset_model()\" class=\"fa-solid fa-table\" style=\"color:#777; cursor:pointer\"></i></td>\n        </tr>            \n        <tr class=\"hidden note\">\n            <td colspan=\"3\">The range that holds the measurements for comparison.  The measurements are assumed to be organized in columns, which must be contiguous.  So if you have select three columns of data, you will be comparing three population samples.  Non-numeric value are ignored.</td>\n        </tr>            \n\n\n\n        <tr>\n            <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\"  class=\"label\" >Significance Level:</td>\n            <td><input class=\"param\" size=\"2\" type=\"text\" id=\"confidence\" value=\"95\"/></td>\n            <td>%</td>\n        </tr>            \n        <tr class=\"hidden note\">\n            <td colspan=\"3\">Significance level is used for deciding if we can reject the null hypothesis that the two samples are drawn from the same population.  It's usually a number fairly close to 100%, like 90%, 95% or 99%.</td>\n        </tr>            \n\n\n        <tr>\n            <td colspan=\"3\" align=\"right\"><button id=\"configure-button\" onclick=\"jade_modules.code.run_model()\">Run Analysis</button></td>\n        </tr>            \n    </tbody>\n</table>\n<div style=\"margin-top: 1rem;\" />\n\n\n</div></div>"
    },
    "manifest.json": {
      "filename": "manifest.json",
      "type": "application/json",
      "language": "JSON",
      "raw_url": "https://gist.githubusercontent.com/jade-addin/8b97cfb3612268feda36f172ff8843e0/raw/e8aea277db503e201fc82d4e1bf3d3d5703fb83e/manifest.json",
      "size": 51,
      "truncated": false,
      "content": "[\n    \"code.js\",\"kruskal-wallis.html\",\"style.css\"\n]"
    },
    "style.css": {
      "filename": "style.css",
      "type": "text/css",
      "language": "CSS",
      "raw_url": "https://gist.githubusercontent.com/jade-addin/8b97cfb3612268feda36f172ff8843e0/raw/7068cde4d17e9f6c8158b5bf818f296d7fefcaa1/style.css",
      "size": 4,
      "truncated": false,
      "content": "/**/"
    }
  },
  "public": true,
  "created_at": "2023-05-10T13:45:48Z",
  "updated_at": "2023-05-10T15:15:56Z",
  "description": "JET: Kruskal-Wallis tool for JADE Excel Addin",
  "comments": 0,
  "user": null,
  "comments_url": "https://api.github.com/gists/8b97cfb3612268feda36f172ff8843e0/comments",
  "owner": {
    "login": "jade-addin",
    "id": 97227368,
    "node_id": "U_kgDOBcuSaA",
    "avatar_url": "https://avatars.githubusercontent.com/u/97227368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jade-addin",
    "html_url": "https://github.com/jade-addin",
    "followers_url": "https://api.github.com/users/jade-addin/followers",
    "following_url": "https://api.github.com/users/jade-addin/following{/other_user}",
    "gists_url": "https://api.github.com/users/jade-addin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jade-addin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jade-addin/subscriptions",
    "organizations_url": "https://api.github.com/users/jade-addin/orgs",
    "repos_url": "https://api.github.com/users/jade-addin/repos",
    "events_url": "https://api.github.com/users/jade-addin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jade-addin/received_events",
    "type": "User",
    "site_admin": false
  },
  "forks": [

  ],
  "history": [
    {
      "user": {
        "login": "theGove",
        "id": 24496385,
        "node_id": "MDQ6VXNlcjI0NDk2Mzg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/24496385?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theGove",
        "html_url": "https://github.com/theGove",
        "followers_url": "https://api.github.com/users/theGove/followers",
        "following_url": "https://api.github.com/users/theGove/following{/other_user}",
        "gists_url": "https://api.github.com/users/theGove/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/theGove/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/theGove/subscriptions",
        "organizations_url": "https://api.github.com/users/theGove/orgs",
        "repos_url": "https://api.github.com/users/theGove/repos",
        "events_url": "https://api.github.com/users/theGove/events{/privacy}",
        "received_events_url": "https://api.github.com/users/theGove/received_events",
        "type": "User",
        "site_admin": false
      },
      "version": "942e8d0277d5836ac9aaef98f1c4e07d0f08ba03",
      "committed_at": "2023-05-10T15:15:54Z",
      "change_status": {
        "total": 433,
        "additions": 433,
        "deletions": 0
      },
      "url": "https://api.github.com/gists/8b97cfb3612268feda36f172ff8843e0/942e8d0277d5836ac9aaef98f1c4e07d0f08ba03"
    }
  ],
  "truncated": false
}
