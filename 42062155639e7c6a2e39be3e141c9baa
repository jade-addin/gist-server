{
  "url": "https://api.github.com/gists/42062155639e7c6a2e39be3e141c9baa",
  "forks_url": "https://api.github.com/gists/42062155639e7c6a2e39be3e141c9baa/forks",
  "commits_url": "https://api.github.com/gists/42062155639e7c6a2e39be3e141c9baa/commits",
  "id": "42062155639e7c6a2e39be3e141c9baa",
  "node_id": "G_kwDOAlqljtoAIDQyMDYyMTU1NjM5ZTdjNmEyZTM5YmUzZTE0MWM5YmFh",
  "git_pull_url": "https://gist.github.com/42062155639e7c6a2e39be3e141c9baa.git",
  "git_push_url": "https://gist.github.com/42062155639e7c6a2e39be3e141c9baa.git",
  "html_url": "https://gist.github.com/42062155639e7c6a2e39be3e141c9baa",
  "files": {
    "code.js": {
      "filename": "code.js",
      "type": "application/javascript",
      "language": "JavaScript",
      "raw_url": "https://gist.githubusercontent.com/nickballphd/42062155639e7c6a2e39be3e141c9baa/raw/79128661220eea09ee0cfa4f12ba02e07ffc9c01/code.js",
      "size": 20975,
      "truncated": false,
      "content": "async function auto_exec(){\n  Jade.set_css(gist_files('style.css'))\n  tag(\"tools-body\").innerHTML=gist_files('setup.html')\n  const tool_data = await jade.read_object_from_workbook(window.active_tool)\n  console.log(\"tool_data\",tool_data)\n  for(const[key,value] of Object.entries(tool_data)){\n    console.log(key, value)\n    tag(key).value=value\n  }\n\n}\n\nasync function save_props(){\n  const the_object={result:\"it works with the active tool\"}\n  await jade.save_object_to_workbook(the_object, window.active_tool)\n}\n\nasync function read_props(){\n  const obj = await jade.read_object_from_workbook(window.active_tool)\n  console.log(\"obj\",obj)\n}\n\n\n\nfunction default_value(input){\n  if(!input.value){\n    console.log(\"getting address of active cell\")\n    Excel.run(async (excel) => {\n      let rng = excel.workbook.getSelectedRange();\n      rng.load(\"address\");\n      await excel.sync();\n      input.value = rng.address.split(\"!\")[1]\n  })\n}\n}\n\n\nasync function build_data_statement(range_tag_name, output_tag_name){\n\n  const range_to_build = tag(range_tag_name).value\n  await jade.save_object_to_workbook({\n    \"data-range\":range_to_build\n    }, window.active_tool)\n\n  Excel.run(async function(excel){\n    \n    console.log('range_to_build',range_to_build)\n    range = excel.workbook.worksheets.getActiveWorksheet().getRange(range_to_build)\n    range.load(\"address,formulas\")\n    await excel.sync()\n    const addrparts = range.address.split('!')\n    const data = range.formulas\n    //const output_text = [`- [data, [${addrparts[1]}], ${JSON.stringify(data)}]`,`- [data, [${addrparts[1]}], ${JSON.stringify(data)}]`]\n    //tag(\"result\").value = output_text.join(\"\\n\")\n    tag(output_tag_name).value = `- [data, [${addrparts[1]}], ${JSON.stringify(data)}]`\n\n  })\n}\n\nasync function build_sheet(sheet_name_tag_name, output_tag_name){\n  console.log('sheet_name_tag_name, output_tag_name',sheet_name_tag_name, output_tag_name)\n  const sheet_to_build = tag(sheet_name_tag_name).value\n  await jade.save_object_to_workbook({\n    \"sheet-name\":sheet_to_build\n    }, window.active_tool)\n    tag(output_tag_name).value = `- [add_sheet, ${sheet_to_build}]`\n}\n \nasync function build_table_statement(table_ranges_tag_name, output_tag_name){\n  tag(output_tag_name).value = `- [build_table_ranges, [${tag(table_ranges_tag_name).value}]]`\n}\n\nasync function build_merged_range_statement(merge_ranges_tag_name, output_tag_name){\n  tag(output_tag_name).value = `- [merge, [${tag(merge_ranges_tag_name).value}]]`\n}\n\nasync function build_answer_statement(answer_ranges_tag_name, output_tag_name){\n  tag(output_tag_name).value = `- [build_answer_ranges, [${tag(answer_ranges_tag_name).value}]]`\n}\n\nasync function build_validation_list_statement(validation_ranges_tag_name, validation_values_tag_name, output_tag_name){\n  console.log('in build_validation_list_statement')\n  tag(output_tag_name).value = `- [add_validation_list, ${tag(validation_ranges_tag_name).value}, '${tag(validation_values_tag_name).value}']`\n}\n\nasync function build_header_statement(header_ranges_tag_name, output_tag_name){\n  let yaml_statements = `- [range_format, [${tag(header_ranges_tag_name).value}], format/fill/color, header_color]`\n  yaml_statements += `\\n- [range_format, [${tag(header_ranges_tag_name).value}], format/font/color, '#FFFFFF']`\n  yaml_statements += `\\n- [range_format, [${tag(header_ranges_tag_name).value}], format/horizontalAlignment, Center]`\n  yaml_statements += `\\n- [range_format, [${tag(header_ranges_tag_name).value}], format/font/bold, true]`\n  tag(output_tag_name).value = yaml_statements\n}\n\nasync function build_number_format_statement(number_format_ranges_tag_name, output_tag_name, same_format){\n  Excel.run(async function(excel){\n  \n    const number_ranges = tag(number_format_ranges_tag_name).value.split(',')\n    let yaml_statements = []\n    for(const number_range of number_ranges){\n      const range = excel.workbook.worksheets.getActiveWorksheet().getRange(number_range)\n      range.load('numberFormat')\n      await excel.sync()\n      if(tag(same_format).checked){\n        yaml_statements.push(`- [range_format, [${number_ranges}], numberFormat, '${range.numberFormat[0][0]}']`)\n        break\n      }\n      yaml_statements.push(`- [range_format, [${number_range}], numberFormat, '${range.numberFormat[0][0]}']`)\n    }\n    \n    tag(output_tag_name).value = yaml_statements.join('\\n')\n  })\n}\n\nfunction copy_results(tag_name_to_copy) {\n  /* Get the text field */\n  const result_to_copy = tag(tag_name_to_copy)\n\n  /* Select the text field */\n  result_to_copy.select(); \n  \n   /* Copy the text inside the text field */\n  navigator.clipboard.writeText(result_to_copy.value);\n\n}\n\nfunction update_range(){\n  Excel.run(async (excel) => {\n    let rng = excel.workbook.getSelectedRange();\n    rng.load(\"address\");\n    await excel.sync();\n    tag(\"data-range\").value = rng.address.split(\"!\")[1]\n  })\n}\n\nasync function append_range(source,destination){\n  \n//  if(tag(source).value===''){\n  await jade_modules.jet_engine.get_multicell_address(source)\n//  }\n  \n  \n  let comma = \"\"\n  if(tag(destination).value && tag(destination).value.charAt(tag(destination).value.length-1)!==\",\"){comma=\",\"}\n  tag(destination).value += comma + tag(source).value\n  tag(source).value  = ''\n}\n\n\nasync function build_worksheet_yaml(output_tag_name){\n  Excel.run(async (excel) => {\n\n    const sheet = excel.workbook.worksheets.getActiveWorksheet()\n    const myRange = sheet.getUsedRange()\n\n    // Define the cell properties to get by setting the matching LoadOptions to true.\n    const propertiesToGet = myRange.getCellProperties({\n    address: true,\n    values: true,\n    format: {\n      columnWidth: true,  \n      horizontalAlignment: true,\n      verticalAlignment: true,\n      wrapText: true,\n/*\n      fill: {\n          color: true,\n          patternColor: true,\n      },\n*/\n      font: {\n          color: true,\n          bold:true,\n          italic:true,\n          size:true,\n      },\n      textOrientation: true,\n    },\n\n    columnIndex: true,\n    rowIndex: true,\n  });\n\n    sheet.load('name')\n    myRange.load('values,numberFormat,rowIndex,columnIndex,rowCount,columnCount')\n    //myRange.select()\n\n    await excel.sync()\n\n    console.log(\"propertiesToGet.value\",propertiesToGet.value,'columnIndex',myRange.columnIndex);\n\n    const myRangeRows = myRange.rowCount + myRange.rowIndex\n    const myRangeColumns = myRange.columnCount + myRange.columnIndex\n\n    //setup the data array to hold the setup instructions\n    let data = ['actions:']\n\n//load the data array with instructions to add the worksheet\n    const sheet_yaml = `- [add_sheet, '${sheet.name}']`\n    data.push(sheet_yaml)\n\n//load the data array with the instructions for the column widths\n\n    let widths = []\n    for(let i=0;i<myRange.columnIndex;i++){\n      widths.push(20)\n    }\n    for(const cell of propertiesToGet.value[0]){\n      widths.push(Math.round(cell.format.columnWidth/5)*5+5)\n    }\n\n    const column_width_yaml = `- [column_widths, [${widths.join(',')}]]`\n    data.push(column_width_yaml)\n\n    //load the data array with the instructions for the worksheet data\n\n    let cells = []\n\n    for(let r=0;r<myRange.values.length;r++){\n      for(let c=0;c<myRange.values[0].length;c++){\n        if(myRange.values[r][c]!==''){\n          cells.push({address:propertiesToGet.value[r][c].address.split('!')[1],row:propertiesToGet.value[r][c].rowIndex,column:propertiesToGet.value[r][c].columnIndex})\n        }\n      }\n    }\n\n    let myRanges\n    \n    //convert the array of cells to an array of ranges\n    if(cells.length>0){\n      myRanges = build_ranges(cells,myRangeRows,myRangeColumns)\n\n      for(const myRange of myRanges){\n        const myRangeValues = sheet.getRange(myRange)\n        myRangeValues.load('formulas')\n        await excel.sync()\n        let data_yaml = `- [data, ['${myRange}'], ${JSON.stringify(myRangeValues.formulas)}]`\n        data.push(data_yaml)\n      }\n    }\n\n    //load the data array with the instructions for the bold ranges\n    cells = []\n\n    for(const row of propertiesToGet.value){//determine which cells are bold\n      for(const cell of row){\n          if(cell.format.font.bold) {\n              cells.push({address:cell.address.split('!')[1],row:cell.rowIndex,column:cell.columnIndex})\n          }\n      }\n    }\n\n    //convert the array of cells to an array of ranges\n    if(cells.length>0){\n      myRanges = build_ranges(cells,myRangeRows,myRangeColumns)\n      const bold_yaml = `- [range_format, [${myRanges.join(',')}], format/font/bold, true]`\n      data.push(bold_yaml)\n    }\n\n    //load the data array with the instructions for the italic ranges\n    cells = []\n\n    for(const row of propertiesToGet.value){//determine which cells are italic\n      for(const cell of row){\n          if(cell.format.font.italic) {\n              cells.push({address:cell.address.split('!')[1],row:cell.rowIndex,column:cell.columnIndex})\n          }\n      }\n    }\n\n    //convert the array of cells to an array of ranges\n    if(cells.length>0){\n      myRanges = build_ranges(cells,myRangeRows,myRangeColumns)\n\n      const italic_yaml = `- [range_format, [${myRanges.join(',')}], format/font/italic, true]`\n      data.push(italic_yaml)\n    }\n\n//load the data array with the instructions for the range font sizes\n    let cell_font_sizes = {}\n\n    for(const row of propertiesToGet.value){//determine which cells have a non 12pt font size\n      for(const cell of row){\n          if(cell.format.font.size!==12) {\n              if(!cell_font_sizes[cell.format.font.size]) cell_font_sizes[cell.format.font.size] = []\n              cell_font_sizes[cell.format.font.size].push({address:cell.address.split('!')[1],row:cell.rowIndex,column:cell.columnIndex})\n          }\n      }\n    }\n\n    //convert the array of cells to an array of ranges\n    let cell_font_size_yaml\n    for(const key of Object.keys(cell_font_sizes)){\n      myRanges = build_ranges(cell_font_sizes[key],myRangeRows,myRangeColumns)\n      cell_font_size_yaml = `- [range_format, [${myRanges.join(',')}], format/font/size, ${key}]`\n      data.push(cell_font_size_yaml)\n    }\n\n//load the data array with the instructions for the ranges with different font colors\n    let cell_font_colors = {}\n\n    for(const row of propertiesToGet.value){//determine which cells have a non-black font color\n    for(const cell of row){\n        if(cell.format.font.color!=='#000000') {\n            if(!cell_font_colors[cell.format.font.color]) cell_font_colors[cell.format.font.color] = []\n            cell_font_colors[cell.format.font.color].push({address:cell.address.split('!')[1],row:cell.rowIndex,column:cell.columnIndex})\n        }\n    }\n    }\n\n    //convert the array of cells to an array of ranges\n    let cell_font_color_yaml\n    for(const key of Object.keys(cell_font_colors)){\n      myRanges = build_ranges(cell_font_colors[key],myRangeRows,myRangeColumns)\n      cell_font_color_yaml = `- [range_format, [${myRanges.join(\",\")}], format/font/color, '${key}']`\n      data.push(cell_font_color_yaml)\n    }\n\n\n\n\n    //load the data array with the instructions for the ranges with different text orientation\n    let cell_text_orientation = {}\n\n    for(const row of propertiesToGet.value){//determine which cells have a non-0 text orientation\n      for(const cell of row){\n          if(cell.format.textOrientation!==0) {\n              if(!cell_text_orientation[cell.format.textOrientation]) cell_text_orientation[cell.format.textOrientation] = []\n              cell_text_orientation[cell.format.textOrientation].push({address:cell.address.split('!')[1],row:cell.rowIndex,column:cell.columnIndex})\n          }\n      }\n    }\n\n    //convert the array of cells to an array of ranges\n    //const get_cell_text_orientation_yaml = new TextOrientation()\n    let cell_text_orientation_yaml\n    for(const key of Object.keys(cell_text_orientation)){\n      myRanges = build_ranges(cell_text_orientation[key],myRangeRows,myRangeColumns)\n      cell_text_orientation_yaml = `- [range_format, [${myRanges.join(',')}], format/orientation, ${key}]`\n      data.push(cell_text_orientation_yaml)\n    }\n\n//load the data array with the instructions for the horizontally centered ranges\n    cells = []\n\n    for(const row of propertiesToGet.value){//determine which cells are horizontally centered\n      for(const cell of row){\n          if(cell.format.horizontalAlignment==='Center') {\n              cells.push({address:cell.address.split('!')[1],row:cell.rowIndex,column:cell.columnIndex})\n          }\n      }\n    }\n\n    //convert the array of cells to an array of ranges\n    if(cells.length>0){\n      myRanges = build_ranges(cells,myRangeRows,myRangeColumns)\n      const center_yaml = `- [range_format, [${myRanges.join(',')}], format/horizontalAlignment, Center]`\n      data.push(center_yaml)\n    }\n\n\n\n//load the data array with the instructions for the vertically centered ranges\n    cells = []\n\n    for(const row of propertiesToGet.value){//determine which cells are vertically centered\n      for(const cell of row){\n          if(cell.format.verticalAlignment==='Center') {\n              cells.push({address:cell.address.split('!')[1],row:cell.rowIndex,column:cell.columnIndex})\n          }\n      }\n    }\n\n    //convert the array of cells to an array of ranges\n    if(cells.length>0){\n      myRanges = build_ranges(cells,myRangeRows,myRangeColumns)\n      const vertical_center_yaml = `- [range_format, [${myRanges.join(',')}], format/verticalAlignment, Center]`\n      data.push(vertical_center_yaml)\n    }\n\n\n    //load the data array with the instructions for the ranges with wrapped text\n    cells = []\n\n    for(const row of propertiesToGet.value){//determine which cells have wrapped text\n      for(const cell of row){\n          if(cell.format.wrapText) {\n              cells.push({address:cell.address.split('!')[1],row:cell.rowIndex,column:cell.columnIndex})\n          }\n      }\n    }\n\n    //convert the array of cells to an array of ranges\n    if(cells.length>0){\n      myRanges = build_ranges(cells,myRangeRows,myRangeColumns)\n      const wrapped_text_yaml = `- [range_format, [${myRanges.join(',')}], format/wrapText, true]`\n      data.push(wrapped_text_yaml)\n    }\n\n\n    //load the data array with the instructions for the ranges with formatted cells\n    cells = []\n    let cell_formats = {}\n\n    for(let x=0;x<propertiesToGet.value.length;x++){\n      for(let y=0;y<propertiesToGet.value[0].length;y++){\n          if(myRange.numberFormat[x][y]!=='General'){\n              if(!cell_formats[myRange.numberFormat[x][y]]) cell_formats[myRange.numberFormat[x][y]] = []\n              cell_formats[myRange.numberFormat[x][y]].push({address:propertiesToGet.value[x][y].address.split('!')[1],row:propertiesToGet.value[x][y].rowIndex,column:propertiesToGet.value[x][y].columnIndex})\n          }\n      }\n    }\n\n    //convert the array of cells to an array of ranges\n    let cell_format_yaml\n    for(const key of Object.keys(cell_formats)){\n      myRanges = build_ranges(cell_formats[key],myRangeRows,myRangeColumns)\n      cell_format_yaml = `- [range_format, [${myRanges.join(',')}], numberFormat, '${key}']`\n      data.push(cell_format_yaml)\n    }\n\n    //load the instructions to add the end statement for the setup file\n    data.push('- [end]')\n    tag(output_tag_name).value = data.join('\\n')\n\n\n    function build_ranges(cells,myRangeRows,myRangeColumns){//accepts a set of cells and the number of rows and columns from cell A1 in the used range and returns an array of ranges that the cells comprise.\n    let ranges = []\n\n    for(let row=0;row<myRangeRows;row++){//builds ranges (a two-dimensional array the size of the used range of the sheet starting in cell A1)\n        let range_row = []\n        for(let column=0;column<myRangeColumns;column++){\n            range_row.push({row:row,column:column})\n        }//for\n        ranges.push(range_row)\n    }//for\n\n    for(const matchCell of cells){//populates the ranges array with the 'cells' (those that match the criteria) in that range\n        ranges[matchCell.row][matchCell.column].address = matchCell.address\n    }//for\n\n    let matched_ranges_in_row = []\n\n    for(const row of ranges){//groups cells in rows that are part of a continuous range on that row\n        let focal_range = {}\n        let cell_count = 0\n        for(const cell of row){\n            if(cell.address){//if address exists in this part of the array, start a new range\n                if(!focal_range.first){//if this is the first cell in a new range, start the new range\n                    focal_range.first = cell.address\n                    focal_range.start = cell.column\n                    focal_range.row = cell.row\n                }//if\n                //populate the end range. each new cell examined replaces the last end range\n                focal_range.last = cell.address\n                focal_range.end = cell.column\n                cell_count++\n            }else{//if no address is in this part of the array, the range is over\n                if(cell_count>0){//as long as at least one of the immediately previous array positions had an array, a new range is pushed to the matched_ranges_in_row array\n                    if(cell_count===1){//a single cell is found\n                        matched_ranges_in_row.push({address:focal_range.first,row:focal_range.row,column_start:focal_range.start,column_end:focal_range.end})\n                    }else{//a range of cells is found\n                        matched_ranges_in_row.push({address:`${focal_range.first}:${focal_range.last}`,row:focal_range.row,column_start:focal_range.start,column_end:focal_range.end})\n                    }//if\n                    //set cell_count and focal_range variables to initial values to process a potential new range\n                    cell_count = 0\n                    focal_range = {}\n                }//if\n            }//for\n        }\n        if(cell_count>0){//this accomodates the last cell in the row. If it has an address or is part of a range it is added\n            if(cell_count===1){\n                matched_ranges_in_row.push({address:focal_range.first,row:focal_range.row,column_start:focal_range.start,column_end:focal_range.end})\n            }else{\n                matched_ranges_in_row.push({address:`${focal_range.first}:${focal_range.last}`,row:focal_range.row,column_start:focal_range.start,column_end:focal_range.end})\n            }//if\n        }//if\n    }//for that processes row ranges\n\n    let matched_ranges = []\n    let column_ranges = {}\n    let column_key\n\n    for(const matched_range_in_row of matched_ranges_in_row){//create an object to sort row ranges into columns\n        column_key = `S${matched_range_in_row.column_start}E${matched_range_in_row.column_end}`\n        if(!column_ranges[column_key]) column_ranges[column_key] = []\n        column_ranges[column_key].push(matched_range_in_row)\n    }\n\n    ////console.log('column_ranges',column_ranges)\n\n    var address_parts = []\n    var address_first\n    var address_last\n\n    for(const key of Object.keys(column_ranges)){//process through the column_ranges object to see if we can build column ranges\n        if(column_ranges[key].length===1){\n            matched_ranges.push(column_ranges[key][0].address)\n        }else{\n            let row_range = {}\n            for(let x=0;x<column_ranges[key].length-1;x++){\n                address_parts = column_ranges[key][x].address.split(':')\n                address_first = address_parts[0]\n                if(address_parts.length===1){\n                    address_last = address_parts[0]\n                }else{\n                    address_last = address_parts[1]\n                }//if\n                if(!row_range.start) row_range.start = address_first\n\n                row_range.end = address_last\n\n                if(column_ranges[key][x].row!==column_ranges[key][x+1].row-1){\n                    if(row_range.start===row_range.end){\n                        matched_ranges.push(row_range.start)\n                    }else{\n                        matched_ranges.push(`${row_range.start}:${row_range.end}`)\n                    }//if\n                    row_range = {}\n                }//if\n            }//for\n\n            address_parts = column_ranges[key][column_ranges[key].length-1].address.split(':')\n            if(row_range.start){//the last row checked is part of a bigger range\n                if(address_parts.length===1){\n                    matched_ranges.push(`${row_range.start}:${address_parts[0]}`)\n                }else{\n                    matched_ranges.push(`${row_range.start}:${address_parts[1]}`)\n                }//if\n            }else{//the last row is not part of a bigger range\n                if(address_parts.length===1){\n                    matched_ranges.push(address_parts[0])\n                }else{\n                    matched_ranges.push(`${address_parts[0]}:${address_parts[1]}`)\n                }//if\n            }//if\n            row_range = {}\n        }//if\n    }//for\n    return matched_ranges\n    }//build_ranges function\n  })\n}"
    },
    "data.html": {
      "filename": "data.html",
      "type": "text/html",
      "language": "HTML",
      "raw_url": "https://gist.githubusercontent.com/nickballphd/42062155639e7c6a2e39be3e141c9baa/raw/6f73905d70ca3f3cf071f74339d3ed1a32df0711/data.html",
      "size": 1317,
      "truncated": false,
      "content": "<div class=\"hidden\" id=\"jet-refresh\" style=\"margin-left: .5rem;\"><i title=\"Re-load this tool.\" onclick=\"jade_modules.jet_engine.select_page()\" class=\"fa-solid fa-arrows-rotate\"  cursor:pointer\"></i></div>    \n<div style=\"margin:1rem; text-align: center;\"><div style=\"display:inline-block; text-align: left;\">\n<table>\n    <tbody>\n        <tr>\n            <td colspan=\"3\"><b>Required Inputs:</b></td>\n        </tr>\n        <tr>\n            <td style=\"font-size:16px\">Range to build:</td>\n            <td><input size=\"6\" type=\"text\" id=\"data-range\" onfocus=\"jade_modules.code.default_value(this)\"/></td>\n            <td align=\"center\"><i title=\"Refresh the range.\" onclick=\"jade_modules.jet_engine.get_multicell_address('data-range')\" class=\"fa-solid fa-table\"></i></td>\n        </tr>            \n        <tr>\n            <td colspan=\"3\" align=\"right\"><button onclick=\"jade_modules.code.build_data_statement()\"  style=\"font-size:16px\">Build</button></td>\n        </tr>\n        <tr>\n            <td colspan=\"3\"><b>Output:</b></td>\n        </tr>\n        <tr>\n            <td colspan=\"2\"><textarea rows=\"10\" cols=\"21\" wrap=\"hard\" id=\"result\"></textarea></td>\n            <td><button onclick=\"jade_modules.code.copy_results()\" style=\"font-size:16px\">Copy</button></td>\n        </tr>\n    </tbody>\n</table>\n</div>\n</div>\n\n    "
    },
    "manifest.json": {
      "filename": "manifest.json",
      "type": "application/json",
      "language": "JSON",
      "raw_url": "https://gist.githubusercontent.com/nickballphd/42062155639e7c6a2e39be3e141c9baa/raw/f0df677a628dee806f378e0a12be2aeb502426fd/manifest.json",
      "size": 42,
      "truncated": false,
      "content": "[\n    \"code.js\",\"setup.html\",\"style.css\"\n]"
    },
    "setup.html": {
      "filename": "setup.html",
      "type": "text/html",
      "language": "HTML",
      "raw_url": "https://gist.githubusercontent.com/nickballphd/42062155639e7c6a2e39be3e141c9baa/raw/859982529d36d98088701654b4258b6ffb114837/setup.html",
      "size": 24428,
      "truncated": false,
      "content": "\n<div class=\"hidden\" id=\"jet-refresh\" style=\"margin-left: .5rem;\"><i title=\"Re-load this tool.\" onclick=\"jade_modules.jet_engine.select_page()\" class=\"fa-solid fa-arrows-rotate\"  cursor:pointer\"></i></div>    \n<div style=\"margin:1rem; text-align: center;\"><div style=\"display:inline-block; text-align: left;\">\n    <table style=\"width:100%\" align=\"center\" cellspacing=\"0\" cellpadding=\"4\">\n        <tbody>\n            <tr>\n                <td onclick=\"jade_modules.jet_engine.toggle_table(this.nextElementSibling.firstElementChild)\" colspan=\"2\" class=\"section head\">Instructions</td>\n                <td class=\"section drop\"><i  title=\"Hide or show this step.\" onclick=\"jade_modules.jet_engine.toggle_table(this)\" class=\"fa-solid fa-chevron-down\"></i></td>\n            </tr>            \n            <tr class=\"hidden\" style=\"background-color: white;\">\n                <td colspan=\"3\">The tools needed to create the YAML statements in the setup.yaml file are below. Click on the title for the tool you wish to use to expose the form for that tool. Supply the parameters and click build to create the statement. The statement will appear in the output textbox where it can be copied and pasted into the setup.yaml file.</td>\n            </tr>            \n        </tbody>\n    </table>\n    <div style=\"margin-top: 1rem;\" />\n\n    <table style=\"width:100%\" align=\"center\" cellspacing=\"0\" cellpadding=\"4\">\n        <!-- Creates the yaml statements for a worksheet minus tables, answer cells, merged cells, and data validation -->\n        <tbody>\n            <tr>\n                <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\" colspan=\"2\" class=\"section head\">Worksheet Yaml</td>\n                <td class=\"section drop\"><i  title=\"Hide or show this step.\" onclick=\"jade_modules.jet_engine.toggle_table(this)\" class=\"fa-solid fa-chevron-down\"></i></td>\n            </tr>            \n            <tr class=\"hidden note\">\n                <td colspan=\"3\">Creates the yaml statements to create a worksheet.</td>\n            </tr>            \n            <tr class=\"hidden\">\n                    <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\"  class=\"label\" colspan=\"2\">Create Yaml:</td>\n                    <td align=\"right\"><button id=\"configure-button\" onclick=\"jade_modules.code.build_worksheet_yaml('yaml-result')\">Build</button></td>\n                </tr>            \n                <tr class=\"hidden note\">\n                <td colspan=\"3\">This selects a sheet.</td>\n            </tr>                \n            <tr class=\"hidden\">\n            </tr>            \n            \n            <tr class=\"hidden\">\n                <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\"  class=\"label\" colspan=\"3\" >Output:</td>\n            </tr>            \n            <tr class=\"hidden\">\n                <td class=\"entry\" colspan=\"3\"><textarea rows=\"4\" cols=\"33\" wrap=\"hard\" id=\"yaml-result\"></textarea></td>\n            </tr>            \n            <tr class=\"hidden note\">\n                <td colspan=\"3\">This is the output that will be copied to the setup.yaml file.</td>\n            </tr>            \n            <tr class=\"hidden\">\n                <td colspan=\"3\" align=\"right\"><button id=\"configure-button\" onclick=\"jade_modules.code.copy_results('yaml-result')\">Copy</button></td>\n            </tr>            \n   \n        </tbody>\n    </table>\n    <div style=\"margin-top: 1rem;\" />\n\n    <table style=\"width:100%\" align=\"center\" cellspacing=\"0\" cellpadding=\"4\">\n        <!-- Creates the yaml statement to format an answer cell statement -->\n        <tbody>\n            <tr>\n                <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\" colspan=\"2\" class=\"section head\">Answer Ranges</td>\n                <td class=\"section drop\"><i  title=\"Hide or show this step.\" onclick=\"jade_modules.jet_engine.toggle_table(this)\" class=\"fa-solid fa-chevron-down\"></i></td>\n            </tr>            \n            <tr class=\"hidden note\">\n                <td colspan=\"3\">Creates the yaml statement to format ranges as answer cells.</td>\n            </tr>            \n            <tr class=\"hidden\">\n                <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\"  class=\"label\" >Ranges:</td>\n                <td class=\"entry\"><input type=\"text\" id=\"answer-ranges\" onchange=\"jade_modules.code.new_data_range()\"  onfocus=\"jade_modules.jet_engine.default_selected_range(this)\"/><input type=\"text\" id=\"answer-range\" style=\"display:none\"></td>\n                <td><i title=\"Get the data columns from the selected range.\" onclick=\"jade_modules.code.append_range('answer-range','answer-ranges')\" class=\"fa-solid fa-plus\" style=\"color:#777; cursor:pointer\"></i></td>\n            </tr>            \n            <tr class=\"hidden note\">\n                <td colspan=\"3\">This adds the selected range into the list of ranges.</td>\n            </tr>    \n            \n\n            <tr class=\"hidden\">\n                <td colspan=\"3\" align=\"right\"><button id=\"configure-button\" onclick=\"jade_modules.code.build_answer_statement('answer-ranges','answer-result')\">Build</button></td>\n            </tr>            \n\n            <tr class=\"hidden\">\n                <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\"  class=\"label\" colspan=\"3\" >Output:</td>\n            </tr>            \n            <tr class=\"hidden\">\n                <td class=\"entry\" colspan=\"3\"><textarea rows=\"4\" cols=\"33\" wrap=\"hard\" id=\"answer-result\"></textarea></td>\n            </tr>            \n            <tr class=\"hidden note\">\n                <td colspan=\"3\">This is the output that will be copied to the setup.yaml file.</td>\n            </tr>            \n            <tr class=\"hidden\">\n                <td colspan=\"3\" align=\"right\"><button id=\"configure-button\" onclick=\"jade_modules.code.copy_results('answer-result')\">Copy</button></td>\n            </tr>            \n   \n        </tbody>\n    </table>\n    <div style=\"margin-top: 1rem;\" />\n\n\n\n    <table style=\"width:100%\" align=\"center\" cellspacing=\"0\" cellpadding=\"4\">\n        <!-- Creates the yaml statement to create a table statement -->\n        <tbody>\n            <tr>\n                <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\" colspan=\"2\" class=\"section head\">Table Format</td>\n                <td class=\"section drop\"><i  title=\"Hide or show this step.\" onclick=\"jade_modules.jet_engine.toggle_table(this)\" class=\"fa-solid fa-chevron-down\"></i></td>\n            </tr>            \n            <tr class=\"hidden note\">\n                <td colspan=\"3\">Creates the yaml statement to format ranges as assignment tables.</td>\n            </tr>            \n            <tr class=\"hidden\">\n                <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\"  class=\"label\" >Ranges:</td>\n                <td class=\"entry\"><input type=\"text\" id=\"table-ranges\" onchange=\"jade_modules.code.new_data_range()\"  onfocus=\"jade_modules.jet_engine.default_selected_range(this)\"/><input type=\"text\" id=\"table-range\" style=\"display:none\"></td>\n                <td><i title=\"Get the data columns from the selected range.\" onclick=\"jade_modules.code.append_range('table-range','table-ranges')\" class=\"fa-solid fa-plus\" style=\"color:#777; cursor:pointer\"></i></td>\n            </tr>            \n            <tr class=\"hidden note\">\n                <td colspan=\"3\">This adds the range above into the list of ranges.</td>\n            </tr>    \n            \n\n            <tr class=\"hidden\">\n                <td colspan=\"3\" align=\"right\"><button id=\"configure-button\" onclick=\"jade_modules.code.build_table_statement('table-ranges','table-result')\">Build</button></td>\n            </tr>            \n\n            <tr class=\"hidden\">\n                <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\"  class=\"label\" colspan=\"3\" >Output:</td>\n            </tr>            \n            <tr class=\"hidden\">\n                <td class=\"entry\" colspan=\"3\"><textarea rows=\"4\" cols=\"33\" wrap=\"hard\" id=\"table-result\"></textarea></td>\n            </tr>            \n            <tr class=\"hidden note\">\n                <td colspan=\"3\">This is the output that will be copied to the setup.yaml file.</td>\n            </tr>            \n            <tr class=\"hidden\">\n                <td colspan=\"3\" align=\"right\"><button id=\"configure-button\" onclick=\"jade_modules.code.copy_results('table-result')\">Copy</button></td>\n            </tr>            \n   \n        </tbody>\n    </table>\n    <div style=\"margin-top: 1rem;\" />\n\n    <table style=\"width:100%\" align=\"center\" cellspacing=\"0\" cellpadding=\"4\">\n        <!-- Creates the yaml statement to create an add sheet statement -->\n        <tbody>\n            <tr>\n                <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\" colspan=\"2\" class=\"section head\">Add Sheet</td>\n                <td class=\"section drop\"><i  title=\"Hide or show this step.\" onclick=\"jade_modules.jet_engine.toggle_table(this)\" class=\"fa-solid fa-chevron-down\"></i></td>\n            </tr>            \n            <tr class=\"hidden note\">\n                <td colspan=\"3\">Creates the yaml statement for creating a worksheet in the assignment file.</td>\n            </tr>            \n            <tr class=\"hidden\">\n                    <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\"  class=\"label\" >Sheet:</td>\n                    <td class=\"entry\"><input type=\"text\" id=\"sheet-name\" onchange=\"jade_modules.code.new_data_sheet()\" onfocus=\"jade_modules.jet_engine.default_selected_sheet(this)\"/></td>\n                    <td><i title=\"Get the name of the active sheet.\" onclick=\"jade_modules.jet_engine.get_sheet_name('sheet-name');jade_modules.code.new_data_sheet()\" class=\"fa-solid fa-file\" style=\"color:#777; cursor:pointer\"></i></td>\n                </tr>            \n                <tr class=\"hidden note\">\n                <td colspan=\"3\">This selects a sheet.</td>\n            </tr>                \n            <tr class=\"hidden\">\n                <td colspan=\"3\" align=\"right\"><button id=\"configure-button\" onclick=\"jade_modules.code.build_sheet('sheet-name','sheet-result')\">Build</button></td>\n            </tr>            \n            \n            <tr class=\"hidden\">\n                <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\"  class=\"label\" colspan=\"3\" >Output:</td>\n            </tr>            \n            <tr class=\"hidden\">\n                <td class=\"entry\" colspan=\"3\"><textarea rows=\"4\" cols=\"33\" wrap=\"hard\" id=\"sheet-result\"></textarea></td>\n            </tr>            \n            <tr class=\"hidden note\">\n                <td colspan=\"3\">This is the output that will be copied to the setup.yaml file.</td>\n            </tr>            \n            <tr class=\"hidden\">\n                <td colspan=\"3\" align=\"right\"><button id=\"configure-button\" onclick=\"jade_modules.code.copy_results('sheet-result')\">Copy</button></td>\n            </tr>            \n   \n        </tbody>\n    </table>\n    <div style=\"margin-top: 1rem;\" />\n\n\n\n    <table style=\"width:100%\" align=\"center\" cellspacing=\"0\" cellpadding=\"4\">\n        <!-- Creates the yaml statement to add data a sheet -->\n\n        <tbody>\n            <tr>\n                <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\" colspan=\"2\" class=\"section head\">Data</td>\n                <td class=\"section drop\"><i  title=\"Hide or show this step.\" onclick=\"jade_modules.jet_engine.toggle_table(this)\" class=\"fa-solid fa-chevron-down\"></i></td>\n            </tr>            \n            <tr class=\"hidden note\">\n                <td colspan=\"3\">Creates the yaml statement for data to a worksheet range.</td>\n            </tr>            \n            <tr class=\"hidden\">\n                <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\"  class=\"label\" >Range:</td>\n                <td class=\"entry\"><input type=\"text\" id=\"data-range\" onchange=\"jade_modules.code.new_data_range()\"  onfocus=\"jade_modules.jet_engine.default_selected_range(this)\"/></td>\n                <td><i title=\"Get the data columns from the selected range.\" onclick=\"jade_modules.jet_engine.get_multicell_address('data-range');jade_modules.code.new_data_range()\" class=\"fa-solid fa-table\" style=\"color:#777; cursor:pointer\"></i></td>\n            </tr>            \n            <tr class=\"hidden note\">\n                <td colspan=\"3\">This selects a range.</td>\n            </tr>                \n            <tr class=\"hidden\">\n                <td colspan=\"3\" align=\"right\"><button id=\"configure-button\" onclick=\"jade_modules.code.build_data_statement('data-range','data-result')\">Build</button></td>\n            </tr>            \n\n            <tr class=\"hidden\">\n                <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\"  class=\"label\" colspan=\"3\" >Output:</td>\n            </tr>            \n            <tr class=\"hidden\">\n                <td class=\"entry\" colspan=\"3\"><textarea rows=\"4\" cols=\"33\" wrap=\"hard\" id=\"data-result\"></textarea></td>\n            </tr>            \n            <tr class=\"hidden note\">\n                <td colspan=\"3\">This is the output that will be copied to the setup.yaml file.</td>\n            </tr>            \n            <tr class=\"hidden\">\n                <td colspan=\"3\" align=\"right\"><button id=\"configure-button\" onclick=\"jade_modules.code.copy_results('data-result')\">Copy</button></td>\n            </tr>            \n   \n        </tbody>\n    </table>\n    <div style=\"margin-top: 1rem;\" />\n\n    <table style=\"width:100%\" align=\"center\" cellspacing=\"0\" cellpadding=\"4\">\n        <!-- Creates the yaml statement to format cells as a header -->\n        <tbody>\n            <tr>\n                <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\" colspan=\"2\" class=\"section head\">Header Ranges</td>\n                <td class=\"section drop\"><i  title=\"Hide or show this step.\" onclick=\"jade_modules.jet_engine.toggle_table(this)\" class=\"fa-solid fa-chevron-down\"></i></td>\n            </tr>            \n            <tr class=\"hidden note\">\n                <td colspan=\"3\">Creates the yaml statement to format ranges as header cells.</td>\n            </tr>            \n            <tr class=\"hidden\">\n                <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\"  class=\"label\" >Ranges:</td>\n                <td class=\"entry\"><input type=\"text\" id=\"header-ranges\" onchange=\"jade_modules.code.new_data_range()\"  onfocus=\"jade_modules.jet_engine.default_selected_range(this)\"/><input type=\"text\" id=\"header-range\" style=\"display:none\"></td>\n                <td><i title=\"Get the data columns from the selected range.\" onclick=\"jade_modules.code.append_range('header-range','header-ranges')\" class=\"fa-solid fa-plus\" style=\"color:#777; cursor:pointer\"></i></td>\n            </tr>            \n            <tr class=\"hidden note\">\n                <td colspan=\"3\">This adds the selected range into the list of ranges.</td>\n            </tr>    \n            \n\n            <tr class=\"hidden\">\n                <td colspan=\"3\" align=\"right\"><button id=\"configure-button\" onclick=\"jade_modules.code.build_header_statement('header-ranges','header-result')\">Build</button></td>\n            </tr>            \n\n            <tr class=\"hidden\">\n                <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\"  class=\"label\" colspan=\"3\" >Output:</td>\n            </tr>            \n            <tr class=\"hidden\">\n                <td class=\"entry\" colspan=\"3\"><textarea rows=\"4\" cols=\"33\" wrap=\"hard\" id=\"header-result\"></textarea></td>\n            </tr>            \n            <tr class=\"hidden note\">\n                <td colspan=\"3\">This is the output that will be copied to the setup.yaml file.</td>\n            </tr>            \n            <tr class=\"hidden\">\n                <td colspan=\"3\" align=\"right\"><button id=\"configure-button\" onclick=\"jade_modules.code.copy_results('header-result')\">Copy</button></td>\n            </tr>            \n   \n        </tbody>\n    </table>\n    <div style=\"margin-top: 1rem;\" />\n\n    <table style=\"width:100%\" align=\"center\" cellspacing=\"0\" cellpadding=\"4\">\n        <!-- Creates the yaml statement to format cells as a header -->\n        <tbody>\n            <tr>\n                <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\" colspan=\"2\" class=\"section head\">Number Format</td>\n                <td class=\"section drop\"><i  title=\"Hide or show this step.\" onclick=\"jade_modules.jet_engine.toggle_table(this)\" class=\"fa-solid fa-chevron-down\"></i></td>\n            </tr>            \n            <tr class=\"hidden note\">\n                <td colspan=\"3\">Creates the yaml statement to set the number format for ranges.</td>\n            </tr>            \n            <tr class=\"hidden\">\n                <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\"  class=\"label\" >Ranges:</td>\n                <td class=\"entry\"><input type=\"text\" id=\"number-format-ranges\" onchange=\"jade_modules.code.new_data_range()\"  onfocus=\"jade_modules.jet_engine.default_selected_range(this)\"/><input type=\"text\" id=\"number-format-range\" style=\"display:none\"></td>\n                <td><i title=\"Get the data columns from the selected range.\" onclick=\"jade_modules.code.append_range('number-format-range','number-format-ranges')\" class=\"fa-solid fa-plus\" style=\"color:#777; cursor:pointer\"></i></td>\n            </tr>            \n            <tr class=\"hidden note\">\n                <td colspan=\"3\">This adds the selected range into the list of ranges.</td>\n            </tr>    \n\n            <tr class=\"hidden\">\n                <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\"  class=\"label\" colspan=\"2\">Cells have same format?:</td>\n                <td class=\"entry\"><input type=\"checkbox\" id=\"same-format\" checked/></td> \n            </tr>            \n            <tr class=\"hidden note\">\n                <td colspan=\"3\">This adds the selected range into the list of ranges.</td>\n            </tr>    \n\n\n            <tr class=\"hidden\">\n                <td colspan=\"3\" align=\"right\"><button id=\"configure-button\" onclick=\"jade_modules.code.build_number_format_statement('number-format-ranges','number-format-result','same-format')\">Build</button></td>\n            </tr>            \n\n            <tr class=\"hidden\">\n                <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\"  class=\"label\" colspan=\"3\" >Output:</td>\n            </tr>            \n            <tr class=\"hidden\">\n                <td class=\"entry\" colspan=\"3\"><textarea rows=\"4\" cols=\"33\" wrap=\"hard\" id=\"number-format-result\"></textarea></td>\n            </tr>            \n            <tr class=\"hidden note\">\n                <td colspan=\"3\">This is the output that will be copied to the setup.yaml file.</td>\n            </tr>            \n            <tr class=\"hidden\">\n                <td colspan=\"3\" align=\"right\"><button id=\"configure-button\" onclick=\"jade_modules.code.copy_results('number-format-result')\">Copy</button></td>\n            </tr>            \n   \n        </tbody>\n    </table>\n    <div style=\"margin-top: 1rem;\" />\n\n    <table style=\"width:100%\" align=\"center\" cellspacing=\"0\" cellpadding=\"4\">\n        <!-- Creates the yaml statement to format cells as merged -->\n        <tbody>\n            <tr>\n                <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\" colspan=\"2\" class=\"section head\">Merge Ranges</td>\n                <td class=\"section drop\"><i  title=\"Hide or show this step.\" onclick=\"jade_modules.jet_engine.toggle_table(this)\" class=\"fa-solid fa-chevron-down\"></i></td>\n            </tr>            \n            <tr class=\"hidden note\">\n                <td colspan=\"3\">Creates the yaml statement to merge ranges.</td>\n            </tr>            \n            <tr class=\"hidden\">\n                <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\"  class=\"label\" >Ranges:</td>\n                <td class=\"entry\"><input type=\"text\" id=\"merge-ranges\" onchange=\"jade_modules.code.new_data_range()\"  onfocus=\"jade_modules.jet_engine.default_selected_range(this)\"/><input type=\"text\" id=\"merge-range\" style=\"display:none\"></td>\n                <td><i title=\"Get the data columns from the selected range.\" onclick=\"jade_modules.code.append_range('merge-range','merge-ranges')\" class=\"fa-solid fa-plus\" style=\"color:#777; cursor:pointer\"></i></td>\n            </tr>            \n            <tr class=\"hidden note\">\n                <td colspan=\"3\">This adds the selected range into the list of ranges.</td>\n            </tr>    \n\n\n            <tr class=\"hidden\">\n                <td colspan=\"3\" align=\"right\"><button id=\"configure-button\" onclick=\"jade_modules.code.build_merged_range_statement('merge-ranges','merge-result')\">Build</button></td>\n            </tr>            \n\n            <tr class=\"hidden\">\n                <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\"  class=\"label\" colspan=\"3\" >Output:</td>\n            </tr>            \n            <tr class=\"hidden\">\n                <td class=\"entry\" colspan=\"3\"><textarea rows=\"4\" cols=\"33\" wrap=\"hard\" id=\"merge-result\"></textarea></td>\n            </tr>            \n            <tr class=\"hidden note\">\n                <td colspan=\"3\">This is the output that will be copied to the setup.yaml file.</td>\n            </tr>            \n            <tr class=\"hidden\">\n                <td colspan=\"3\" align=\"right\"><button id=\"configure-button\" onclick=\"jade_modules.code.copy_results('merge-result')\">Copy</button></td>\n            </tr>            \n   \n        </tbody>\n    </table>\n    <div style=\"margin-top: 1rem;\" />\n\n    <table style=\"width:100%\" align=\"center\" cellspacing=\"0\" cellpadding=\"4\">\n        <!-- Creates the yaml statement to add a data validation list -->\n        <tbody>\n            <tr>\n                <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\" colspan=\"2\" class=\"section head\">Data Validation List</td>\n                <td class=\"section drop\"><i  title=\"Hide or show this step.\" onclick=\"jade_modules.jet_engine.toggle_table(this)\" class=\"fa-solid fa-chevron-down\"></i></td>\n            </tr>            \n            <tr class=\"hidden note\">\n                <td colspan=\"3\">Creates the yaml statement to add a data validation list.</td>\n            </tr>            \n            <tr class=\"hidden\">\n                <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\"  class=\"label\" >Ranges:</td>\n                <td class=\"entry\"><input type=\"text\" id=\"validation-list-ranges\" onchange=\"jade_modules.code.new_data_range()\"  onfocus=\"jade_modules.jet_engine.default_selected_range(this)\"/><input type=\"text\" id=\"validation-list-range\" style=\"display:none\"></td>\n                <td><i title=\"Get the data columns from the selected range.\" onclick=\"jade_modules.code.append_range('validation-list-range','validation-list-ranges')\" class=\"fa-solid fa-plus\" style=\"color:#777; cursor:pointer\"></i></td>\n            </tr>            \n            <tr class=\"hidden note\">\n                <td colspan=\"3\">This adds the selected range into the list of ranges.</td>\n            </tr>    \n\n            <tr class=\"hidden\">\n                <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\"  class=\"label\" >Values:</td>\n                <td class=\"entry\" colspan=\"2\"><input type=\"text\" id=\"validation-list-values\"/></td>\n            </tr>            \n\n            <tr class=\"hidden\">\n                <td colspan=\"3\" align=\"right\"><button id=\"configure-button\" onclick=\"jade_modules.code.build_validation_list_statement('validation-list-ranges','validation-list-values','validation-list-result')\">Build</button></td>\n            </tr>            \n\n            <tr class=\"hidden\">\n                <td onclick=\"jade_modules.jet_engine.toggle_next_row(this)\"  class=\"label\" colspan=\"3\" >Output:</td>\n            </tr>            \n            <tr class=\"hidden\">\n                <td class=\"entry\" colspan=\"3\"><textarea rows=\"4\" cols=\"33\" wrap=\"hard\" id=\"validation-list-result\"></textarea></td>\n            </tr>            \n            <tr class=\"hidden note\">\n                <td colspan=\"3\">This is the output that will be copied to the setup.yaml file.</td>\n            </tr>            \n            <tr class=\"hidden\">\n                <td colspan=\"3\" align=\"right\"><button id=\"configure-button\" onclick=\"jade_modules.code.copy_results('validation-list-result')\">Copy</button></td>\n            </tr>            \n   \n        </tbody>\n    </table>\n    <div style=\"margin-top: 1rem;\" />\n\n\n</div></div>\n"
    },
    "style.css": {
      "filename": "style.css",
      "type": "text/css",
      "language": "CSS",
      "raw_url": "https://gist.githubusercontent.com/nickballphd/42062155639e7c6a2e39be3e141c9baa/raw/1b0d670779eb52160e65442cf04a3c760b4023ea/style.css",
      "size": 24,
      "truncated": false,
      "content": ".light{\n    color:red;\n}"
    }
  },
  "public": true,
  "created_at": "2022-05-15T04:11:15Z",
  "updated_at": "2022-09-02T20:40:02Z",
  "description": "JET Create a yaml data statement for ATLAS",
  "comments": 0,
  "user": null,
  "comments_url": "https://api.github.com/gists/42062155639e7c6a2e39be3e141c9baa/comments",
  "owner": {
    "login": "nickballphd",
    "id": 39495054,
    "node_id": "MDQ6VXNlcjM5NDk1MDU0",
    "avatar_url": "https://avatars.githubusercontent.com/u/39495054?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickballphd",
    "html_url": "https://github.com/nickballphd",
    "followers_url": "https://api.github.com/users/nickballphd/followers",
    "following_url": "https://api.github.com/users/nickballphd/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickballphd/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickballphd/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickballphd/subscriptions",
    "organizations_url": "https://api.github.com/users/nickballphd/orgs",
    "repos_url": "https://api.github.com/users/nickballphd/repos",
    "events_url": "https://api.github.com/users/nickballphd/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickballphd/received_events",
    "type": "User",
    "site_admin": false
  },
  "forks": [

  ],
  "history": [
    {
      "user": {
        "login": "nickballphd",
        "id": 39495054,
        "node_id": "MDQ6VXNlcjM5NDk1MDU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/39495054?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nickballphd",
        "html_url": "https://github.com/nickballphd",
        "followers_url": "https://api.github.com/users/nickballphd/followers",
        "following_url": "https://api.github.com/users/nickballphd/following{/other_user}",
        "gists_url": "https://api.github.com/users/nickballphd/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nickballphd/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nickballphd/subscriptions",
        "organizations_url": "https://api.github.com/users/nickballphd/orgs",
        "repos_url": "https://api.github.com/users/nickballphd/repos",
        "events_url": "https://api.github.com/users/nickballphd/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nickballphd/received_events",
        "type": "User",
        "site_admin": false
      },
      "version": "3a87cdc329f2107beb97f0e83c8a56934fd5127f",
      "committed_at": "2022-09-02T20:40:01Z",
      "change_status": {
        "total": 972,
        "additions": 972,
        "deletions": 0
      },
      "url": "https://api.github.com/gists/42062155639e7c6a2e39be3e141c9baa/3a87cdc329f2107beb97f0e83c8a56934fd5127f"
    }
  ],
  "truncated": false
}
